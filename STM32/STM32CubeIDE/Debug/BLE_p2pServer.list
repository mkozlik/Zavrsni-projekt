
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c81c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e18  0800c95c  0800c95c  0001c95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d774  0800d774  0001d774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d77c  0800d77c  0001d77c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d780  0800d780  0001d780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b0  20000008  0800d784  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200000b8  0800d834  000200b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_APP_CONTEXT 00000090  20000154  0800d8cd  00020154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 00000025  200001e4  0800d95d  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  2000020c  0800d982  0002020c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000013e4  20000220  0800d993  00020220  2**2
                  ALLOC
 12 ._user_heap_stack 00001404  20001604  0800d993  00021604  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b8  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   00030e7b  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000681e  00000000  00000000  000510c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002a70  00000000  00000000  000578e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000027a8  00000000  00000000  0005a358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002e4e1  00000000  00000000  0005cb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00031dc2  00000000  00000000  0008afe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000fb686  00000000  00000000  000bcda3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  001b8429  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000b964  00000000  00000000  001b847c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000220 	.word	0x20000220
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c944 	.word	0x0800c944

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000224 	.word	0x20000224
 800017c:	0800c944 	.word	0x0800c944

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <LL_EXTI_EnableIT_32_63+0x24>)
 800053e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000542:	4905      	ldr	r1, [pc, #20]	; (8000558 <LL_EXTI_EnableIT_32_63+0x24>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4313      	orrs	r3, r2
 8000548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	58000800 	.word	0x58000800

0800055c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800058e:	b480      	push	{r7}
 8000590:	b085      	sub	sp, #20
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800059a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800059e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4313      	orrs	r3, r2
 80005a6:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80005aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ae:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4013      	ands	r3, r2
 80005b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b8:	68fb      	ldr	r3, [r7, #12]
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80005ca:	f003 fc43 	bl	8003e54 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80005ce:	f003 fc47 	bl	8003e60 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80005d2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005d6:	f7ff ffad 	bl	8000534 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80005da:	f009 f86b 	bl	80096b4 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 80005de:	f000 f821 	bl	8000624 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80005e2:	f000 f8c3 	bl	800076c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80005e6:	bf00      	nop
}
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <APPD_EnableCPU2+0x34>)
 80005f4:	1d3c      	adds	r4, r7, #4
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000600:	c403      	stmia	r4!, {r0, r1}
 8000602:	8022      	strh	r2, [r4, #0]
 8000604:	3402      	adds	r4, #2
 8000606:	0c13      	lsrs	r3, r2, #16
 8000608:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800060a:	f00a fd99 	bl	800b140 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4618      	mov	r0, r3
 8000612:	f009 fbee 	bl	8009df2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000616:	bf00      	nop
}
 8000618:	3720      	adds	r7, #32
 800061a:	46bd      	mov	sp, r7
 800061c:	bdb0      	pop	{r4, r5, r7, pc}
 800061e:	bf00      	nop
 8000620:	0800c95c 	.word	0x0800c95c

08000624 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000644:	2300      	movs	r3, #0
 8000646:	77fb      	strb	r3, [r7, #31]
 8000648:	e038      	b.n	80006bc <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800064a:	7ffb      	ldrb	r3, [r7, #31]
 800064c:	4a44      	ldr	r2, [pc, #272]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 800064e:	00db      	lsls	r3, r3, #3
 8000650:	4413      	add	r3, r2
 8000652:	799b      	ldrb	r3, [r3, #6]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d02b      	beq.n	80006b0 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000658:	7ffb      	ldrb	r3, [r7, #31]
 800065a:	4a41      	ldr	r2, [pc, #260]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 800065c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000660:	4a40      	ldr	r2, [pc, #256]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d01b      	beq.n	800069e <APPD_SetCPU2GpioConfig+0x7a>
 8000666:	4a3f      	ldr	r2, [pc, #252]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d823      	bhi.n	80006b4 <APPD_SetCPU2GpioConfig+0x90>
 800066c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000670:	d003      	beq.n	800067a <APPD_SetCPU2GpioConfig+0x56>
 8000672:	4a3d      	ldr	r2, [pc, #244]	; (8000768 <APPD_SetCPU2GpioConfig+0x144>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d009      	beq.n	800068c <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000678:	e01c      	b.n	80006b4 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800067a:	7ffb      	ldrb	r3, [r7, #31]
 800067c:	4a38      	ldr	r2, [pc, #224]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	4413      	add	r3, r2
 8000682:	889a      	ldrh	r2, [r3, #4]
 8000684:	8bbb      	ldrh	r3, [r7, #28]
 8000686:	4313      	orrs	r3, r2
 8000688:	83bb      	strh	r3, [r7, #28]
          break;
 800068a:	e014      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 800068c:	7ffb      	ldrb	r3, [r7, #31]
 800068e:	4a34      	ldr	r2, [pc, #208]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	4413      	add	r3, r2
 8000694:	889a      	ldrh	r2, [r3, #4]
 8000696:	8b7b      	ldrh	r3, [r7, #26]
 8000698:	4313      	orrs	r3, r2
 800069a:	837b      	strh	r3, [r7, #26]
          break;
 800069c:	e00b      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800069e:	7ffb      	ldrb	r3, [r7, #31]
 80006a0:	4a2f      	ldr	r2, [pc, #188]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	4413      	add	r3, r2
 80006a6:	889a      	ldrh	r2, [r3, #4]
 80006a8:	8b3b      	ldrh	r3, [r7, #24]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	833b      	strh	r3, [r7, #24]
          break;
 80006ae:	e002      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 80006b0:	bf00      	nop
 80006b2:	e000      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
          break;
 80006b4:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006b6:	7ffb      	ldrb	r3, [r7, #31]
 80006b8:	3301      	adds	r3, #1
 80006ba:	77fb      	strb	r3, [r7, #31]
 80006bc:	7ffb      	ldrb	r3, [r7, #31]
 80006be:	2b25      	cmp	r3, #37	; 0x25
 80006c0:	d9c3      	bls.n	800064a <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ca:	2303      	movs	r3, #3
 80006cc:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80006ce:	8bbb      	ldrh	r3, [r7, #28]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d014      	beq.n	80006fe <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 80006d4:	8bbb      	ldrh	r3, [r7, #28]
 80006d6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ff3f 	bl	800055c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80006de:	2001      	movs	r0, #1
 80006e0:	f7ff ff55 	bl	800058e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ec:	f004 f8ca 	bl	8004884 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80006f0:	8bbb      	ldrh	r3, [r7, #28]
 80006f2:	2200      	movs	r2, #0
 80006f4:	4619      	mov	r1, r3
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f004 fa33 	bl	8004b64 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80006fe:	8b7b      	ldrh	r3, [r7, #26]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d012      	beq.n	800072a <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000704:	8b7b      	ldrh	r3, [r7, #26]
 8000706:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff ff27 	bl	800055c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800070e:	2002      	movs	r0, #2
 8000710:	f7ff ff3d 	bl	800058e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4813      	ldr	r0, [pc, #76]	; (8000768 <APPD_SetCPU2GpioConfig+0x144>)
 800071a:	f004 f8b3 	bl	8004884 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800071e:	8b7b      	ldrh	r3, [r7, #26]
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	4810      	ldr	r0, [pc, #64]	; (8000768 <APPD_SetCPU2GpioConfig+0x144>)
 8000726:	f004 fa1d 	bl	8004b64 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800072a:	8b3b      	ldrh	r3, [r7, #24]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d013      	beq.n	8000758 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000730:	8b3b      	ldrh	r3, [r7, #24]
 8000732:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000734:	2004      	movs	r0, #4
 8000736:	f7ff ff11 	bl	800055c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800073a:	2004      	movs	r0, #4
 800073c:	f7ff ff27 	bl	800058e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	4619      	mov	r1, r3
 8000744:	4807      	ldr	r0, [pc, #28]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000746:	f004 f89d 	bl	8004884 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800074a:	8b3b      	ldrh	r3, [r7, #24]
 800074c:	2200      	movs	r2, #0
 800074e:	4619      	mov	r1, r3
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000752:	f004 fa07 	bl	8004b64 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000756:	bf00      	nop
 8000758:	bf00      	nop
}
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	0800d3e0 	.word	0x0800d3e0
 8000764:	48000800 	.word	0x48000800
 8000768:	48000400 	.word	0x48000400

0800076c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000770:	bf00      	nop
}
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 800077e:	f001 fc3f 	bl	8002000 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000782:	bf00      	nop
}
 8000784:	bd80      	pop	{r7, pc}

08000786 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b084      	sub	sp, #16
 800078a:	af00      	add	r7, sp, #0
 800078c:	60f8      	str	r0, [r7, #12]
 800078e:	460b      	mov	r3, r1
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000794:	897a      	ldrh	r2, [r7, #10]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	68f9      	ldr	r1, [r7, #12]
 800079a:	2000      	movs	r0, #0
 800079c:	f001 faae 	bl	8001cfc <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80007a0:	bf00      	nop
}
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <LL_C2_PWR_SetPowerMode+0x28>)
 80007b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007b6:	f023 0207 	bic.w	r2, r3, #7
 80007ba:	4905      	ldr	r1, [pc, #20]	; (80007d0 <LL_C2_PWR_SetPowerMode+0x28>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4313      	orrs	r3, r2
 80007c0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	58000400 	.word	0x58000400

080007d4 <LL_EXTI_EnableIT_32_63>:
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <LL_EXTI_EnableIT_32_63+0x24>)
 80007de:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80007e2:	4905      	ldr	r1, [pc, #20]	; (80007f8 <LL_EXTI_EnableIT_32_63+0x24>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	58000800 	.word	0x58000800

080007fc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800080a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800080e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000816:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000822:	4313      	orrs	r3, r2
 8000824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	cafecafe 	.word	0xcafecafe

08000838 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800084a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4313      	orrs	r3, r2
 8000852:	608b      	str	r3, [r1, #8]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800086c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800088e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80008a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80008b8:	d101      	bne.n	80008be <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80008ba:	2301      	movs	r3, #1
 80008bc:	e000      	b.n	80008c0 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80008ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008de:	d101      	bne.n	80008e4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e000      	b.n	80008e6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <LL_AHB3_GRP1_EnableClock>:
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80008f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4313      	orrs	r3, r2
 8000906:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800090c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4013      	ands	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000914:	68fb      	ldr	r3, [r7, #12]
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <LL_DBGMCU_GetRevisionID+0x18>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	0c1b      	lsrs	r3, r3, #16
 800092e:	b29b      	uxth	r3, r3
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e0042000 	.word	0xe0042000

08000940 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	041b      	lsls	r3, r3, #16
 8000952:	431a      	orrs	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	605a      	str	r2, [r3, #4]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	431a      	orrs	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	605a      	str	r2, [r3, #4]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	695a      	ldr	r2, [r3, #20]
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	041b      	lsls	r3, r3, #16
 8000998:	431a      	orrs	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	615a      	str	r2, [r3, #20]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
 80009b2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	695a      	ldr	r2, [r3, #20]
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	431a      	orrs	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	615a      	str	r2, [r3, #20]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	609a      	str	r2, [r3, #8]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	619a      	str	r2, [r3, #24]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <LL_LPM_EnableSleep+0x1c>)
 8000a0a:	691b      	ldr	r3, [r3, #16]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <LL_LPM_EnableSleep+0x1c>)
 8000a0e:	f023 0304 	bic.w	r3, r3, #4
 8000a12:	6113      	str	r3, [r2, #16]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	22ca      	movs	r2, #202	; 0xca
 8000a4a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2253      	movs	r2, #83	; 0x53
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	f023 0207 	bic.w	r2, r3, #7
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	431a      	orrs	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	609a      	str	r2, [r3, #8]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <MX_APPE_Config>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <MX_APPE_Config+0x18>)
 8000a8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a8e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8000a90:	f000 f82e 	bl	8000af0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000a94:	f000 f86e 	bl	8000b74 <Config_HSE>

  return;
 8000a98:	bf00      	nop
}
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	58004000 	.word	0x58004000

08000aa0 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 8000aa4:	f000 f87a 	bl	8000b9c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000aa8:	f000 f892 	bl	8000bd0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000aac:	4908      	ldr	r1, [pc, #32]	; (8000ad0 <MX_APPE_Init+0x30>)
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 fea2 	bl	80017f8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000ab4:	f7ff fd87 	bl	80005c6 <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000ab8:	2101      	movs	r1, #1
 8000aba:	2001      	movs	r0, #1
 8000abc:	f00a fbde 	bl	800b27c <UTIL_LPM_SetOffMode>

  Led_Init();
 8000ac0:	f000 f9d0 	bl	8000e64 <Led_Init>

  Button_Init();
 8000ac4:	f000 f9de 	bl	8000e84 <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ac8:	f000 f890 	bl	8000bec <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000acc:	bf00      	nop
}
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000480 	.word	0x20000480

08000ad4 <Init_Smps>:

void Init_Smps( void )
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  return;
 8000ad8:	bf00      	nop
}
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <Init_Exti>:

void Init_Exti( void )
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63( LL_EXTI_LINE_36 & LL_EXTI_LINE_38 );
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f7ff fe74 	bl	80007d4 <LL_EXTI_EnableIT_32_63>

  return;
 8000aec:	bf00      	nop
}
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8000af4:	f000 f804 	bl	8000b00 <Reset_BackupDomain>

  Reset_IPCC();
 8000af8:	f000 f81a 	bl	8000b30 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 8000afc:	bf00      	nop
}
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000b04:	f7ff fece 	bl	80008a4 <LL_RCC_IsActiveFlag_PINRST>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00d      	beq.n	8000b2a <Reset_BackupDomain+0x2a>
 8000b0e:	f7ff fedc 	bl	80008ca <LL_RCC_IsActiveFlag_SFTRST>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d108      	bne.n	8000b2a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000b18:	f004 f8fe 	bl	8004d18 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000b1c:	f004 f8fc 	bl	8004d18 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000b20:	f7ff fe9e 	bl	8000860 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000b24:	f7ff fead 	bl	8000882 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
}
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000b34:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b38:	f7ff feda 	bl	80008f0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000b3c:	213f      	movs	r1, #63	; 0x3f
 8000b3e:	480c      	ldr	r0, [pc, #48]	; (8000b70 <Reset_IPCC+0x40>)
 8000b40:	f7ff ff44 	bl	80009cc <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000b44:	213f      	movs	r1, #63	; 0x3f
 8000b46:	480a      	ldr	r0, [pc, #40]	; (8000b70 <Reset_IPCC+0x40>)
 8000b48:	f7ff ff4e 	bl	80009e8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000b4c:	213f      	movs	r1, #63	; 0x3f
 8000b4e:	4808      	ldr	r0, [pc, #32]	; (8000b70 <Reset_IPCC+0x40>)
 8000b50:	f7ff fef6 	bl	8000940 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000b54:	213f      	movs	r1, #63	; 0x3f
 8000b56:	4806      	ldr	r0, [pc, #24]	; (8000b70 <Reset_IPCC+0x40>)
 8000b58:	f7ff ff15 	bl	8000986 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000b5c:	213f      	movs	r1, #63	; 0x3f
 8000b5e:	4804      	ldr	r0, [pc, #16]	; (8000b70 <Reset_IPCC+0x40>)
 8000b60:	f7ff ff00 	bl	8000964 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000b64:	213f      	movs	r1, #63	; 0x3f
 8000b66:	4802      	ldr	r0, [pc, #8]	; (8000b70 <Reset_IPCC+0x40>)
 8000b68:	f7ff ff1f 	bl	80009aa <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000b6c:	bf00      	nop
}
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	58000c00 	.word	0x58000c00

08000b74 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f008 ffce 	bl	8009b1c <OTP_Read>
 8000b80:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d005      	beq.n	8000b94 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	799b      	ldrb	r3, [r3, #6]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fe35 	bl	80007fc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
}
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <System_Init>:

static void System_Init( void )
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  Init_Smps( );
 8000ba0:	f7ff ff98 	bl	8000ad4 <Init_Smps>

  Init_Exti( );
 8000ba4:	f7ff ff9d 	bl	8000ae2 <Init_Exti>

  Init_Rtc( );
 8000ba8:	f000 f802 	bl	8000bb0 <Init_Rtc>

  return;
 8000bac:	bf00      	nop
}
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <Init_Rtc>:

static void Init_Rtc( void )
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <Init_Rtc+0x1c>)
 8000bb6:	f7ff ff42 	bl	8000a3e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <Init_Rtc+0x1c>)
 8000bbe:	f7ff ff4e 	bl	8000a5e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000bc2:	4802      	ldr	r0, [pc, #8]	; (8000bcc <Init_Rtc+0x1c>)
 8000bc4:	f7ff ff2e 	bl	8000a24 <LL_RTC_EnableWriteProtection>

  return;
 8000bc8:	bf00      	nop
}
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40002800 	.word	0x40002800

08000bd0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000bd4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000bd8:	f7ff fe2e 	bl	8000838 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000bdc:	f00a fb3c 	bl	800b258 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000be0:	2004      	movs	r0, #4
 8000be2:	f7ff fde1 	bl	80007a8 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000be6:	bf00      	nop
}
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000bf2:	f00a f8ef 	bl	800add4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000bf6:	4a11      	ldr	r2, [pc, #68]	; (8000c3c <appe_Tl_Init+0x50>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2040      	movs	r0, #64	; 0x40
 8000bfc:	f00a fc58 	bl	800b4b0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <appe_Tl_Init+0x54>)
 8000c02:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <appe_Tl_Init+0x58>)
 8000c06:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000c08:	463b      	mov	r3, r7
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480e      	ldr	r0, [pc, #56]	; (8000c48 <appe_Tl_Init+0x5c>)
 8000c0e:	f009 f9cb 	bl	8009fa8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <appe_Tl_Init+0x60>)
 8000c14:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <appe_Tl_Init+0x64>)
 8000c18:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <appe_Tl_Init+0x68>)
 8000c1c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000c1e:	f240 533c 	movw	r3, #1340	; 0x53c
 8000c22:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f00a fa15 	bl	800b058 <TL_MM_Init>

  TL_Enable();
 8000c2e:	f00a f8cb 	bl	800adc8 <TL_Enable>

  return;
 8000c32:	bf00      	nop
}
 8000c34:	3720      	adds	r7, #32
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08009fe1 	.word	0x08009fe1
 8000c40:	20030724 	.word	0x20030724
 8000c44:	08000c59 	.word	0x08000c59
 8000c48:	08000c71 	.word	0x08000c71
 8000c4c:	2003093c 	.word	0x2003093c
 8000c50:	20030830 	.word	0x20030830
 8000c54:	200301e8 	.word	0x200301e8

08000c58 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000c62:	bf00      	nop
}
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	330b      	adds	r3, #11
 8000c7e:	61fb      	str	r3, [r7, #28]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	4618      	mov	r0, r3
 8000c86:	f009 f8e1 	bl	8009e4c <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000c8a:	7b3b      	ldrb	r3, [r7, #12]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	7b7b      	ldrb	r3, [r7, #13]
 8000c90:	461a      	mov	r2, r3
 8000c92:	7bbb      	ldrb	r3, [r7, #14]
 8000c94:	482e      	ldr	r0, [pc, #184]	; (8000d50 <APPE_SysUserEvtRx+0xe0>)
 8000c96:	f00a fd8f 	bl	800b7b8 <iprintf>
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000c9a:	7c3b      	ldrb	r3, [r7, #16]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	482d      	ldr	r0, [pc, #180]	; (8000d54 <APPE_SysUserEvtRx+0xe4>)
 8000ca0:	f00a fd8a 	bl	800b7b8 <iprintf>
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000ca4:	7dbb      	ldrb	r3, [r7, #22]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	7dfb      	ldrb	r3, [r7, #23]
 8000caa:	461a      	mov	r2, r3
 8000cac:	7e3b      	ldrb	r3, [r7, #24]
 8000cae:	482a      	ldr	r0, [pc, #168]	; (8000d58 <APPE_SysUserEvtRx+0xe8>)
 8000cb0:	f00a fd82 	bl	800b7b8 <iprintf>

  switch(p_sys_event->subevtcode)
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000cbe:	2b07      	cmp	r3, #7
 8000cc0:	d840      	bhi.n	8000d44 <APPE_SysUserEvtRx+0xd4>
 8000cc2:	a201      	add	r2, pc, #4	; (adr r2, 8000cc8 <APPE_SysUserEvtRx+0x58>)
 8000cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc8:	08000ce9 	.word	0x08000ce9
 8000ccc:	08000cf1 	.word	0x08000cf1
 8000cd0:	08000cf9 	.word	0x08000cf9
 8000cd4:	08000d45 	.word	0x08000d45
 8000cd8:	08000d15 	.word	0x08000d15
 8000cdc:	08000d25 	.word	0x08000d25
 8000ce0:	08000d2d 	.word	0x08000d2d
 8000ce4:	08000d3d 	.word	0x08000d3d
  {
  case SHCI_SUB_EVT_CODE_READY:
    APPE_SysEvtReadyProcessing(pPayload);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f000 f869 	bl	8000dc0 <APPE_SysEvtReadyProcessing>
    break;
 8000cee:	e02a      	b.n	8000d46 <APPE_SysUserEvtRx+0xd6>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APPE_SysEvtError(pPayload);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 f83f 	bl	8000d74 <APPE_SysEvtError>
    break;
 8000cf6:	e026      	b.n	8000d46 <APPE_SysUserEvtRx+0xd6>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG("-- BLE NVM RAM HAS BEEN UPDATED BY CMO+ \n");
 8000cf8:	4818      	ldr	r0, [pc, #96]	; (8000d5c <APPE_SysUserEvtRx+0xec>)
 8000cfa:	f00a fde3 	bl	800b8c4 <puts>
    APP_DBG_MSG("SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE : StartAddress = %lx , Size = %ld\n",
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3302      	adds	r3, #2
    APP_DBG_MSG("SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE : StartAddress = %lx , Size = %ld\n",
 8000d02:	6819      	ldr	r1, [r3, #0]
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	3302      	adds	r3, #2
    APP_DBG_MSG("SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE : StartAddress = %lx , Size = %ld\n",
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4814      	ldr	r0, [pc, #80]	; (8000d60 <APPE_SysUserEvtRx+0xf0>)
 8000d0e:	f00a fd53 	bl	800b7b8 <iprintf>
    break;
 8000d12:	e018      	b.n	8000d46 <APPE_SysUserEvtRx+0xd6>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	3302      	adds	r3, #2
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4811      	ldr	r0, [pc, #68]	; (8000d64 <APPE_SysUserEvtRx+0xf4>)
 8000d1e:	f00a fd4b 	bl	800b7b8 <iprintf>
    break;
 8000d22:	e010      	b.n	8000d46 <APPE_SysUserEvtRx+0xd6>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_WRITE\n");
 8000d24:	4810      	ldr	r0, [pc, #64]	; (8000d68 <APPE_SysUserEvtRx+0xf8>)
 8000d26:	f00a fdcd 	bl	800b8c4 <puts>
    break;
 8000d2a:	e00c      	b.n	8000d46 <APPE_SysUserEvtRx+0xd6>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	3302      	adds	r3, #2
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4619      	mov	r1, r3
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <APPE_SysUserEvtRx+0xfc>)
 8000d36:	f00a fd3f 	bl	800b7b8 <iprintf>
    break;
 8000d3a:	e004      	b.n	8000d46 <APPE_SysUserEvtRx+0xd6>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
 8000d3c:	480c      	ldr	r0, [pc, #48]	; (8000d70 <APPE_SysUserEvtRx+0x100>)
 8000d3e:	f00a fdc1 	bl	800b8c4 <puts>
    break;
 8000d42:	e000      	b.n	8000d46 <APPE_SysUserEvtRx+0xd6>

  default:
    break;
 8000d44:	bf00      	nop
  }

  return;
 8000d46:	bf00      	nop
}
 8000d48:	3720      	adds	r7, #32
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	0800c978 	.word	0x0800c978
 8000d54:	0800c99c 	.word	0x0800c99c
 8000d58:	0800c9b8 	.word	0x0800c9b8
 8000d5c:	0800c9d0 	.word	0x0800c9d0
 8000d60:	0800c9fc 	.word	0x0800c9fc
 8000d64:	0800ca40 	.word	0x0800ca40
 8000d68:	0800ca74 	.word	0x0800ca74
 8000d6c:	0800ca90 	.word	0x0800ca90
 8000d70:	0800cac8 	.word	0x0800cac8

08000d74 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( void * pPayload)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	330b      	adds	r3, #11
 8000d82:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	3302      	adds	r3, #2
 8000d88:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n",(*p_sys_error_code));
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4808      	ldr	r0, [pc, #32]	; (8000db4 <APPE_SysEvtError+0x40>)
 8000d92:	f00a fd11 	bl	800b7b8 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d103      	bne.n	8000da6 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <APPE_SysEvtError+0x44>)
 8000da0:	f00a fd90 	bl	800b8c4 <puts>
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000da4:	e003      	b.n	8000dae <APPE_SysEvtError+0x3a>
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <APPE_SysEvtError+0x48>)
 8000da8:	f00a fd8c 	bl	800b8c4 <puts>
  return;
 8000dac:	bf00      	nop
}
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	0800cae4 	.word	0x0800cae4
 8000db8:	0800cb10 	.word	0x0800cb10
 8000dbc:	0800cb48 	.word	0x0800cb48

08000dc0 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	330b      	adds	r3, #11
 8000de0:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000de2:	6a3b      	ldr	r3, [r7, #32]
 8000de4:	3302      	adds	r3, #2
 8000de6:	61fb      	str	r3, [r7, #28]

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d11e      	bne.n	8000e2e <APPE_SysEvtReadyProcessing+0x6e>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");
 8000df0:	4818      	ldr	r0, [pc, #96]	; (8000e54 <APPE_SysEvtReadyProcessing+0x94>)
 8000df2:	f00a fd67 	bl	800b8c4 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2( );
 8000df6:	f7ff fbf9 	bl	80005ec <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000dfa:	230d      	movs	r3, #13
 8000dfc:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000dfe:	237f      	movs	r3, #127	; 0x7f
 8000e00:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000e02:	f7ff fd8f 	bl	8000924 <LL_DBGMCU_GetRevisionID>
 8000e06:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);
 8000e08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e0a:	4813      	ldr	r0, [pc, #76]	; (8000e58 <APPE_SysEvtReadyProcessing+0x98>)
 8000e0c:	f00a fcd4 	bl	800b7b8 <iprintf>

    config_param.RevisionID = RevisionID;
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f009 f800 	bl	8009e20 <SHCI_C2_Config>

    APP_BLE_Init( );
 8000e20:	f001 fd28 	bl	8002874 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000e24:	2100      	movs	r1, #0
 8000e26:	2001      	movs	r0, #1
 8000e28:	f00a fa28 	bl	800b27c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
  }

  return;
 8000e2c:	e00e      	b.n	8000e4c <APPE_SysEvtReadyProcessing+0x8c>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d106      	bne.n	8000e44 <APPE_SysEvtReadyProcessing+0x84>
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n");
 8000e36:	4809      	ldr	r0, [pc, #36]	; (8000e5c <APPE_SysEvtReadyProcessing+0x9c>)
 8000e38:	f00a fd44 	bl	800b8c4 <puts>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
  return;
 8000e42:	e003      	b.n	8000e4c <APPE_SysEvtReadyProcessing+0x8c>
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
 8000e44:	4806      	ldr	r0, [pc, #24]	; (8000e60 <APPE_SysEvtReadyProcessing+0xa0>)
 8000e46:	f00a fd3d 	bl	800b8c4 <puts>
  return;
 8000e4a:	bf00      	nop
}
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	0800cb7c 	.word	0x0800cb7c
 8000e58:	0800cbac 	.word	0x0800cbac
 8000e5c:	0800cbcc 	.word	0x0800cbcc
 8000e60:	0800cbf8 	.word	0x0800cbf8

08000e64 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f002 fe0d 	bl	8003a88 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f002 fe0a 	bl	8003a88 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000e74:	2002      	movs	r0, #2
 8000e76:	f002 fe07 	bl	8003a88 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f002 fe3e 	bl	8003afc <BSP_LED_On>
#endif

  return;
 8000e80:	bf00      	nop
}
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <Button_Init>:

static void Button_Init( void )
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000e88:	2101      	movs	r1, #1
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f002 fe6a 	bl	8003b64 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000e90:	2101      	movs	r1, #1
 8000e92:	2001      	movs	r0, #1
 8000e94:	f002 fe66 	bl	8003b64 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000e98:	2101      	movs	r1, #1
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	f002 fe62 	bl	8003b64 <BSP_PB_Init>
#endif

  return;
 8000ea0:	bf00      	nop
}
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f002 ffae 	bl	8003e0c <HAL_GetTick>
 8000eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebc:	d00a      	beq.n	8000ed4 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000ebe:	f002 ffbd 	bl	8003e3c <HAL_GetTickFreq>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4413      	add	r3, r2
 8000eca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ecc:	e002      	b.n	8000ed4 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000ece:	f7ff fd99 	bl	8000a04 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8000ed2:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000ed4:	f002 ff9a 	bl	8003e0c <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d8f4      	bhi.n	8000ece <HAL_Delay+0x2a>
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef6:	f00a f9f1 	bl	800b2dc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}

08000efe <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000f02:	bf00      	nop
}
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000f16:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1a:	f00a f9df 	bl	800b2dc <UTIL_SEQ_Run>

  return;
 8000f1e:	bf00      	nop
}
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2040      	movs	r0, #64	; 0x40
 8000f32:	f00a fadf 	bl	800b4f4 <UTIL_SEQ_SetTask>
  return;
 8000f36:	bf00      	nop
}
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000f46:	2002      	movs	r0, #2
 8000f48:	f00a fb40 	bl	800b5cc <UTIL_SEQ_SetEvt>
  return;
 8000f4c:	bf00      	nop
}
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f00a fb55 	bl	800b60c <UTIL_SEQ_WaitEvt>
  return;
 8000f62:	bf00      	nop
}
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4603      	mov	r3, r0
 8000f72:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	2b10      	cmp	r3, #16
 8000f78:	d006      	beq.n	8000f88 <HAL_GPIO_EXTI_Callback+0x1e>
 8000f7a:	2b10      	cmp	r3, #16
 8000f7c:	dc0d      	bgt.n	8000f9a <HAL_GPIO_EXTI_Callback+0x30>
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d005      	beq.n	8000f8e <HAL_GPIO_EXTI_Callback+0x24>
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d006      	beq.n	8000f94 <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8000f86:	e008      	b.n	8000f9a <HAL_GPIO_EXTI_Callback+0x30>
     APP_BLE_Key_Button1_Action();
 8000f88:	f001 fe90 	bl	8002cac <APP_BLE_Key_Button1_Action>
      break; 
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 8000f8e:	f001 fe93 	bl	8002cb8 <APP_BLE_Key_Button2_Action>
      break; 
 8000f92:	e003      	b.n	8000f9c <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 8000f94:	f001 fe98 	bl	8002cc8 <APP_BLE_Key_Button3_Action>
      break;
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8000f9a:	bf00      	nop

  }
  return;
 8000f9c:	bf00      	nop
}
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <LL_EXTI_EnableIT_0_31>:
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <LL_EXTI_EnableIT_0_31+0x24>)
 8000fae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000fb2:	4905      	ldr	r1, [pc, #20]	; (8000fc8 <LL_EXTI_EnableIT_0_31+0x24>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	58000800 	.word	0x58000800

08000fcc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4904      	ldr	r1, [pc, #16]	; (8000fec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]

}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	58000800 	.word	0x58000800

08000ff0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <ReadRtcSsrValue+0x3c>)
 8000ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <ReadRtcSsrValue+0x3c>)
 8001000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001002:	b29b      	uxth	r3, r3
 8001004:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001006:	e005      	b.n	8001014 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <ReadRtcSsrValue+0x3c>)
 800100e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001010:	b29b      	uxth	r3, r3
 8001012:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	429a      	cmp	r2, r3
 800101a:	d1f5      	bne.n	8001008 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800101c:	683b      	ldr	r3, [r7, #0]
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40002800 	.word	0x40002800

08001030 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	460a      	mov	r2, r1
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	4613      	mov	r3, r2
 800103e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001040:	79ba      	ldrb	r2, [r7, #6]
 8001042:	491d      	ldr	r1, [pc, #116]	; (80010b8 <LinkTimerAfter+0x88>)
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	440b      	add	r3, r1
 800104e:	3315      	adds	r3, #21
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	2b06      	cmp	r3, #6
 8001058:	d009      	beq.n	800106e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	4916      	ldr	r1, [pc, #88]	; (80010b8 <LinkTimerAfter+0x88>)
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	440b      	add	r3, r1
 8001068:	3314      	adds	r3, #20
 800106a:	79fa      	ldrb	r2, [r7, #7]
 800106c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800106e:	79fa      	ldrb	r2, [r7, #7]
 8001070:	4911      	ldr	r1, [pc, #68]	; (80010b8 <LinkTimerAfter+0x88>)
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	440b      	add	r3, r1
 800107c:	3315      	adds	r3, #21
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001082:	79fa      	ldrb	r2, [r7, #7]
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <LinkTimerAfter+0x88>)
 8001086:	4613      	mov	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	440b      	add	r3, r1
 8001090:	3314      	adds	r3, #20
 8001092:	79ba      	ldrb	r2, [r7, #6]
 8001094:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001096:	79ba      	ldrb	r2, [r7, #6]
 8001098:	4907      	ldr	r1, [pc, #28]	; (80010b8 <LinkTimerAfter+0x88>)
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	440b      	add	r3, r1
 80010a4:	3315      	adds	r3, #21
 80010a6:	79fa      	ldrb	r2, [r7, #7]
 80010a8:	701a      	strb	r2, [r3, #0]

  return;
 80010aa:	bf00      	nop
}
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	200000b8 	.word	0x200000b8

080010bc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80010cc:	4b29      	ldr	r3, [pc, #164]	; (8001174 <LinkTimerBefore+0xb8>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	79ba      	ldrb	r2, [r7, #6]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d032      	beq.n	800113e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80010d8:	79ba      	ldrb	r2, [r7, #6]
 80010da:	4927      	ldr	r1, [pc, #156]	; (8001178 <LinkTimerBefore+0xbc>)
 80010dc:	4613      	mov	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4413      	add	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	440b      	add	r3, r1
 80010e6:	3314      	adds	r3, #20
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	4922      	ldr	r1, [pc, #136]	; (8001178 <LinkTimerBefore+0xbc>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	440b      	add	r3, r1
 80010fa:	3315      	adds	r3, #21
 80010fc:	79fa      	ldrb	r2, [r7, #7]
 80010fe:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001100:	79fa      	ldrb	r2, [r7, #7]
 8001102:	491d      	ldr	r1, [pc, #116]	; (8001178 <LinkTimerBefore+0xbc>)
 8001104:	4613      	mov	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	440b      	add	r3, r1
 800110e:	3315      	adds	r3, #21
 8001110:	79ba      	ldrb	r2, [r7, #6]
 8001112:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001114:	79fa      	ldrb	r2, [r7, #7]
 8001116:	4918      	ldr	r1, [pc, #96]	; (8001178 <LinkTimerBefore+0xbc>)
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	440b      	add	r3, r1
 8001122:	3314      	adds	r3, #20
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001128:	79ba      	ldrb	r2, [r7, #6]
 800112a:	4913      	ldr	r1, [pc, #76]	; (8001178 <LinkTimerBefore+0xbc>)
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	440b      	add	r3, r1
 8001136:	3314      	adds	r3, #20
 8001138:	79fa      	ldrb	r2, [r7, #7]
 800113a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800113c:	e014      	b.n	8001168 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800113e:	79fa      	ldrb	r2, [r7, #7]
 8001140:	490d      	ldr	r1, [pc, #52]	; (8001178 <LinkTimerBefore+0xbc>)
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	3315      	adds	r3, #21
 800114e:	79ba      	ldrb	r2, [r7, #6]
 8001150:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001152:	79ba      	ldrb	r2, [r7, #6]
 8001154:	4908      	ldr	r1, [pc, #32]	; (8001178 <LinkTimerBefore+0xbc>)
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	440b      	add	r3, r1
 8001160:	3314      	adds	r3, #20
 8001162:	79fa      	ldrb	r2, [r7, #7]
 8001164:	701a      	strb	r2, [r3, #0]
  return;
 8001166:	bf00      	nop
}
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000148 	.word	0x20000148
 8001178:	200000b8 	.word	0x200000b8

0800117c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001186:	4b4e      	ldr	r3, [pc, #312]	; (80012c0 <linkTimer+0x144>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b06      	cmp	r3, #6
 800118e:	d118      	bne.n	80011c2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001190:	4b4b      	ldr	r3, [pc, #300]	; (80012c0 <linkTimer+0x144>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b4b      	ldr	r3, [pc, #300]	; (80012c4 <linkTimer+0x148>)
 8001198:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800119a:	4a49      	ldr	r2, [pc, #292]	; (80012c0 <linkTimer+0x144>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80011a0:	79fa      	ldrb	r2, [r7, #7]
 80011a2:	4949      	ldr	r1, [pc, #292]	; (80012c8 <linkTimer+0x14c>)
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	440b      	add	r3, r1
 80011ae:	3315      	adds	r3, #21
 80011b0:	2206      	movs	r2, #6
 80011b2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80011b4:	4b45      	ldr	r3, [pc, #276]	; (80012cc <linkTimer+0x150>)
 80011b6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ba:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	81fb      	strh	r3, [r7, #14]
 80011c0:	e078      	b.n	80012b4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80011c2:	f000 f909 	bl	80013d8 <ReturnTimeElapsed>
 80011c6:	4603      	mov	r3, r0
 80011c8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80011ca:	79fa      	ldrb	r2, [r7, #7]
 80011cc:	493e      	ldr	r1, [pc, #248]	; (80012c8 <linkTimer+0x14c>)
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	440b      	add	r3, r1
 80011d8:	3308      	adds	r3, #8
 80011da:	6819      	ldr	r1, [r3, #0]
 80011dc:	89fb      	ldrh	r3, [r7, #14]
 80011de:	79fa      	ldrb	r2, [r7, #7]
 80011e0:	4419      	add	r1, r3
 80011e2:	4839      	ldr	r0, [pc, #228]	; (80012c8 <linkTimer+0x14c>)
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4403      	add	r3, r0
 80011ee:	3308      	adds	r3, #8
 80011f0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80011f2:	79fa      	ldrb	r2, [r7, #7]
 80011f4:	4934      	ldr	r1, [pc, #208]	; (80012c8 <linkTimer+0x14c>)
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	440b      	add	r3, r1
 8001200:	3308      	adds	r3, #8
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001206:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <linkTimer+0x144>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	4619      	mov	r1, r3
 800120e:	4a2e      	ldr	r2, [pc, #184]	; (80012c8 <linkTimer+0x14c>)
 8001210:	460b      	mov	r3, r1
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	440b      	add	r3, r1
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	4413      	add	r3, r2
 800121a:	3308      	adds	r3, #8
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	429a      	cmp	r2, r3
 8001222:	d337      	bcc.n	8001294 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <linkTimer+0x144>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800122a:	7b7a      	ldrb	r2, [r7, #13]
 800122c:	4926      	ldr	r1, [pc, #152]	; (80012c8 <linkTimer+0x14c>)
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	440b      	add	r3, r1
 8001238:	3315      	adds	r3, #21
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800123e:	e013      	b.n	8001268 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001240:	7b7a      	ldrb	r2, [r7, #13]
 8001242:	4921      	ldr	r1, [pc, #132]	; (80012c8 <linkTimer+0x14c>)
 8001244:	4613      	mov	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	440b      	add	r3, r1
 800124e:	3315      	adds	r3, #21
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001254:	7b7a      	ldrb	r2, [r7, #13]
 8001256:	491c      	ldr	r1, [pc, #112]	; (80012c8 <linkTimer+0x14c>)
 8001258:	4613      	mov	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	440b      	add	r3, r1
 8001262:	3315      	adds	r3, #21
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001268:	7b3b      	ldrb	r3, [r7, #12]
 800126a:	2b06      	cmp	r3, #6
 800126c:	d00b      	beq.n	8001286 <linkTimer+0x10a>
 800126e:	7b3a      	ldrb	r2, [r7, #12]
 8001270:	4915      	ldr	r1, [pc, #84]	; (80012c8 <linkTimer+0x14c>)
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	440b      	add	r3, r1
 800127c:	3308      	adds	r3, #8
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	429a      	cmp	r2, r3
 8001284:	d2dc      	bcs.n	8001240 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001286:	7b7a      	ldrb	r2, [r7, #13]
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fecf 	bl	8001030 <LinkTimerAfter>
 8001292:	e00f      	b.n	80012b4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <linkTimer+0x144>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff0c 	bl	80010bc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <linkTimer+0x144>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <linkTimer+0x148>)
 80012ac:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <linkTimer+0x144>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80012b4:	89fb      	ldrh	r3, [r7, #14]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000148 	.word	0x20000148
 80012c4:	20000149 	.word	0x20000149
 80012c8:	200000b8 	.word	0x200000b8
 80012cc:	2000014c 	.word	0x2000014c

080012d0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	460a      	mov	r2, r1
 80012da:	71fb      	strb	r3, [r7, #7]
 80012dc:	4613      	mov	r3, r2
 80012de:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80012e0:	4b39      	ldr	r3, [pc, #228]	; (80013c8 <UnlinkTimer+0xf8>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	79fa      	ldrb	r2, [r7, #7]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d111      	bne.n	8001310 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80012ec:	4b36      	ldr	r3, [pc, #216]	; (80013c8 <UnlinkTimer+0xf8>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b36      	ldr	r3, [pc, #216]	; (80013cc <UnlinkTimer+0xfc>)
 80012f4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80012f6:	79fa      	ldrb	r2, [r7, #7]
 80012f8:	4935      	ldr	r1, [pc, #212]	; (80013d0 <UnlinkTimer+0x100>)
 80012fa:	4613      	mov	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4413      	add	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	440b      	add	r3, r1
 8001304:	3315      	adds	r3, #21
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <UnlinkTimer+0xf8>)
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	e03e      	b.n	800138e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001310:	79fa      	ldrb	r2, [r7, #7]
 8001312:	492f      	ldr	r1, [pc, #188]	; (80013d0 <UnlinkTimer+0x100>)
 8001314:	4613      	mov	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	440b      	add	r3, r1
 800131e:	3314      	adds	r3, #20
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001324:	79fa      	ldrb	r2, [r7, #7]
 8001326:	492a      	ldr	r1, [pc, #168]	; (80013d0 <UnlinkTimer+0x100>)
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	440b      	add	r3, r1
 8001332:	3315      	adds	r3, #21
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001338:	79f9      	ldrb	r1, [r7, #7]
 800133a:	7bfa      	ldrb	r2, [r7, #15]
 800133c:	4824      	ldr	r0, [pc, #144]	; (80013d0 <UnlinkTimer+0x100>)
 800133e:	460b      	mov	r3, r1
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	440b      	add	r3, r1
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4403      	add	r3, r0
 8001348:	3315      	adds	r3, #21
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b2d8      	uxtb	r0, r3
 800134e:	4920      	ldr	r1, [pc, #128]	; (80013d0 <UnlinkTimer+0x100>)
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	440b      	add	r3, r1
 800135a:	3315      	adds	r3, #21
 800135c:	4602      	mov	r2, r0
 800135e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001360:	7bbb      	ldrb	r3, [r7, #14]
 8001362:	2b06      	cmp	r3, #6
 8001364:	d013      	beq.n	800138e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001366:	79f9      	ldrb	r1, [r7, #7]
 8001368:	7bba      	ldrb	r2, [r7, #14]
 800136a:	4819      	ldr	r0, [pc, #100]	; (80013d0 <UnlinkTimer+0x100>)
 800136c:	460b      	mov	r3, r1
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	440b      	add	r3, r1
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	4403      	add	r3, r0
 8001376:	3314      	adds	r3, #20
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	b2d8      	uxtb	r0, r3
 800137c:	4914      	ldr	r1, [pc, #80]	; (80013d0 <UnlinkTimer+0x100>)
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	440b      	add	r3, r1
 8001388:	3314      	adds	r3, #20
 800138a:	4602      	mov	r2, r0
 800138c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800138e:	79fa      	ldrb	r2, [r7, #7]
 8001390:	490f      	ldr	r1, [pc, #60]	; (80013d0 <UnlinkTimer+0x100>)
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	440b      	add	r3, r1
 800139c:	330c      	adds	r3, #12
 800139e:	2201      	movs	r2, #1
 80013a0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <UnlinkTimer+0xf8>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b06      	cmp	r3, #6
 80013aa:	d107      	bne.n	80013bc <UnlinkTimer+0xec>
 80013ac:	79bb      	ldrb	r3, [r7, #6]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d104      	bne.n	80013bc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <UnlinkTimer+0x104>)
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295
 80013b8:	601a      	str	r2, [r3, #0]
  }

  return;
 80013ba:	bf00      	nop
 80013bc:	bf00      	nop
}
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	20000148 	.word	0x20000148
 80013cc:	20000149 	.word	0x20000149
 80013d0:	200000b8 	.word	0x200000b8
 80013d4:	2000014c 	.word	0x2000014c

080013d8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <ReturnTimeElapsed+0x70>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e6:	d026      	beq.n	8001436 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80013e8:	f7ff fe02 	bl	8000ff0 <ReadRtcSsrValue>
 80013ec:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <ReturnTimeElapsed+0x70>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d805      	bhi.n	8001404 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <ReturnTimeElapsed+0x70>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	e00a      	b.n	800141a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <ReturnTimeElapsed+0x74>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <ReturnTimeElapsed+0x70>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	4413      	add	r3, r2
 8001418:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <ReturnTimeElapsed+0x78>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	fb02 f303 	mul.w	r3, r2, r3
 8001426:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <ReturnTimeElapsed+0x7c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	40d3      	lsrs	r3, r2
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	e001      	b.n	800143a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	b29b      	uxth	r3, r3
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2000014c 	.word	0x2000014c
 800144c:	20000242 	.word	0x20000242
 8001450:	20000241 	.word	0x20000241
 8001454:	20000240 	.word	0x20000240

08001458 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d108      	bne.n	800147a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001468:	f7ff fdc2 	bl	8000ff0 <ReadRtcSsrValue>
 800146c:	4603      	mov	r3, r0
 800146e:	4a24      	ldr	r2, [pc, #144]	; (8001500 <RestartWakeupCounter+0xa8>)
 8001470:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001472:	2003      	movs	r0, #3
 8001474:	f002 fe77 	bl	8004166 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001478:	e03e      	b.n	80014f8 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d803      	bhi.n	8001488 <RestartWakeupCounter+0x30>
 8001480:	4b20      	ldr	r3, [pc, #128]	; (8001504 <RestartWakeupCounter+0xac>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d002      	beq.n	800148e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	3b01      	subs	r3, #1
 800148c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800148e:	bf00      	nop
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <RestartWakeupCounter+0xb0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f7      	beq.n	8001490 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <RestartWakeupCounter+0xb0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <RestartWakeupCounter+0xb0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80014b4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <RestartWakeupCounter+0xb4>)
 80014b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014bc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80014be:	2003      	movs	r0, #3
 80014c0:	f002 fe5f 	bl	8004182 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <RestartWakeupCounter+0xb8>)
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	0c1b      	lsrs	r3, r3, #16
 80014ca:	041b      	lsls	r3, r3, #16
 80014cc:	88fa      	ldrh	r2, [r7, #6]
 80014ce:	4910      	ldr	r1, [pc, #64]	; (8001510 <RestartWakeupCounter+0xb8>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80014d4:	f7ff fd8c 	bl	8000ff0 <ReadRtcSsrValue>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a09      	ldr	r2, [pc, #36]	; (8001500 <RestartWakeupCounter+0xa8>)
 80014dc:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <RestartWakeupCounter+0xb0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <RestartWakeupCounter+0xb0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014f0:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80014f2:	f3af 8000 	nop.w
  return ;
 80014f6:	bf00      	nop
}
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000014c 	.word	0x2000014c
 8001504:	20000240 	.word	0x20000240
 8001508:	2000023c 	.word	0x2000023c
 800150c:	58000800 	.word	0x58000800
 8001510:	40002800 	.word	0x40002800

08001514 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800151a:	4b47      	ldr	r3, [pc, #284]	; (8001638 <RescheduleTimerList+0x124>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001526:	d108      	bne.n	800153a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001528:	bf00      	nop
 800152a:	4b44      	ldr	r3, [pc, #272]	; (800163c <RescheduleTimerList+0x128>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f7      	bne.n	800152a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800153a:	4b40      	ldr	r3, [pc, #256]	; (800163c <RescheduleTimerList+0x128>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	4b3e      	ldr	r3, [pc, #248]	; (800163c <RescheduleTimerList+0x128>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800154c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800154e:	4b3c      	ldr	r3, [pc, #240]	; (8001640 <RescheduleTimerList+0x12c>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	493b      	ldr	r1, [pc, #236]	; (8001644 <RescheduleTimerList+0x130>)
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	440b      	add	r3, r1
 8001562:	3308      	adds	r3, #8
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001568:	f7ff ff36 	bl	80013d8 <ReturnTimeElapsed>
 800156c:	4603      	mov	r3, r0
 800156e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	429a      	cmp	r2, r3
 8001576:	d205      	bcs.n	8001584 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800157c:	4b32      	ldr	r3, [pc, #200]	; (8001648 <RescheduleTimerList+0x134>)
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
 8001582:	e04d      	b.n	8001620 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	4a31      	ldr	r2, [pc, #196]	; (800164c <RescheduleTimerList+0x138>)
 8001588:	8812      	ldrh	r2, [r2, #0]
 800158a:	b292      	uxth	r2, r2
 800158c:	4413      	add	r3, r2
 800158e:	461a      	mov	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4293      	cmp	r3, r2
 8001594:	d906      	bls.n	80015a4 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <RescheduleTimerList+0x138>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <RescheduleTimerList+0x134>)
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
 80015a2:	e03d      	b.n	8001620 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <RescheduleTimerList+0x134>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80015b4:	e034      	b.n	8001620 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	4922      	ldr	r1, [pc, #136]	; (8001644 <RescheduleTimerList+0x130>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	3308      	adds	r3, #8
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d20a      	bcs.n	80015e4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	491c      	ldr	r1, [pc, #112]	; (8001644 <RescheduleTimerList+0x130>)
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	440b      	add	r3, r1
 80015dc:	3308      	adds	r3, #8
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	e013      	b.n	800160c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	4917      	ldr	r1, [pc, #92]	; (8001644 <RescheduleTimerList+0x130>)
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	440b      	add	r3, r1
 80015f2:	3308      	adds	r3, #8
 80015f4:	6819      	ldr	r1, [r3, #0]
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	1ac9      	subs	r1, r1, r3
 80015fc:	4811      	ldr	r0, [pc, #68]	; (8001644 <RescheduleTimerList+0x130>)
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4403      	add	r3, r0
 8001608:	3308      	adds	r3, #8
 800160a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	490d      	ldr	r1, [pc, #52]	; (8001644 <RescheduleTimerList+0x130>)
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	440b      	add	r3, r1
 800161a:	3315      	adds	r3, #21
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	2b06      	cmp	r3, #6
 8001624:	d1c7      	bne.n	80015b6 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001626:	89bb      	ldrh	r3, [r7, #12]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff15 	bl	8001458 <RestartWakeupCounter>

  return ;
 800162e:	bf00      	nop
}
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40002800 	.word	0x40002800
 800163c:	2000023c 	.word	0x2000023c
 8001640:	20000148 	.word	0x20000148
 8001644:	200000b8 	.word	0x200000b8
 8001648:	20000150 	.word	0x20000150
 800164c:	20000244 	.word	0x20000244

08001650 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001656:	f3ef 8310 	mrs	r3, PRIMASK
 800165a:	617b      	str	r3, [r7, #20]
  return(result);
 800165c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
}
 8001662:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001664:	4b5f      	ldr	r3, [pc, #380]	; (80017e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	22ca      	movs	r2, #202	; 0xca
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
 800166e:	4b5d      	ldr	r3, [pc, #372]	; (80017e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2253      	movs	r2, #83	; 0x53
 8001676:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001678:	4b5a      	ldr	r3, [pc, #360]	; (80017e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	4b58      	ldr	r3, [pc, #352]	; (80017e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800168a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800168c:	4b56      	ldr	r3, [pc, #344]	; (80017e8 <HW_TS_RTC_Wakeup_Handler+0x198>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001694:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001698:	4954      	ldr	r1, [pc, #336]	; (80017ec <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	440b      	add	r3, r1
 80016a4:	330c      	adds	r3, #12
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d172      	bne.n	8001794 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80016ae:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80016b2:	494e      	ldr	r1, [pc, #312]	; (80017ec <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80016b4:	4613      	mov	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4413      	add	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	440b      	add	r3, r1
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80016c2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80016c6:	4949      	ldr	r1, [pc, #292]	; (80017ec <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	440b      	add	r3, r1
 80016d2:	3310      	adds	r3, #16
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80016d8:	4b45      	ldr	r3, [pc, #276]	; (80017f0 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d050      	beq.n	8001784 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80016e2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80016e6:	4941      	ldr	r1, [pc, #260]	; (80017ec <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	440b      	add	r3, r1
 80016f2:	330d      	adds	r3, #13
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d126      	bne.n	800174a <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80016fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001700:	2101      	movs	r1, #1
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fde4 	bl	80012d0 <UnlinkTimer>
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	f383 8810 	msr	PRIMASK, r3
}
 8001712:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001714:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001718:	4934      	ldr	r1, [pc, #208]	; (80017ec <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	440b      	add	r3, r1
 8001724:	3304      	adds	r3, #4
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f000 fa4e 	bl	8001bd0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	22ca      	movs	r2, #202	; 0xca
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
 800173e:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2253      	movs	r2, #83	; 0x53
 8001746:	625a      	str	r2, [r3, #36]	; 0x24
 8001748:	e014      	b.n	8001774 <HW_TS_RTC_Wakeup_Handler+0x124>
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f383 8810 	msr	PRIMASK, r3
}
 8001754:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001756:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f9ac 	bl	8001ab8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001760:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	22ca      	movs	r2, #202	; 0xca
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
 800176a:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2253      	movs	r2, #83	; 0x53
 8001772:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001774:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	4619      	mov	r1, r3
 800177c:	69b8      	ldr	r0, [r7, #24]
 800177e:	f000 faaf 	bl	8001ce0 <HW_TS_RTC_Int_AppNot>
 8001782:	e025      	b.n	80017d0 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8001784:	f7ff fec6 	bl	8001514 <RescheduleTimerList>
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	f383 8810 	msr	PRIMASK, r3
}
 8001792:	e01d      	b.n	80017d0 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001794:	bf00      	nop
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f7      	beq.n	8001796 <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80017ba:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 80017be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f383 8810 	msr	PRIMASK, r3
}
 80017ce:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	22ff      	movs	r2, #255	; 0xff
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80017da:	bf00      	nop
}
 80017dc:	3728      	adds	r7, #40	; 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	2000023c 	.word	0x2000023c
 80017e8:	20000148 	.word	0x20000148
 80017ec:	200000b8 	.word	0x200000b8
 80017f0:	20000150 	.word	0x20000150
 80017f4:	58000800 	.word	0x58000800

080017f8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001804:	4a64      	ldr	r2, [pc, #400]	; (8001998 <HW_TS_Init+0x1a0>)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800180a:	4b63      	ldr	r3, [pc, #396]	; (8001998 <HW_TS_Init+0x1a0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	22ca      	movs	r2, #202	; 0xca
 8001812:	625a      	str	r2, [r3, #36]	; 0x24
 8001814:	4b60      	ldr	r3, [pc, #384]	; (8001998 <HW_TS_Init+0x1a0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2253      	movs	r2, #83	; 0x53
 800181c:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800181e:	4b5f      	ldr	r3, [pc, #380]	; (800199c <HW_TS_Init+0x1a4>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	4a5e      	ldr	r2, [pc, #376]	; (800199c <HW_TS_Init+0x1a4>)
 8001824:	f043 0320 	orr.w	r3, r3, #32
 8001828:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800182a:	4b5c      	ldr	r3, [pc, #368]	; (800199c <HW_TS_Init+0x1a4>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	b2db      	uxtb	r3, r3
 8001836:	f1c3 0304 	rsb	r3, r3, #4
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b58      	ldr	r3, [pc, #352]	; (80019a0 <HW_TS_Init+0x1a8>)
 800183e:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001840:	4b56      	ldr	r3, [pc, #344]	; (800199c <HW_TS_Init+0x1a4>)
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001848:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800184c:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	fa92 f2a2 	rbit	r2, r2
 8001854:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	2a00      	cmp	r2, #0
 800185e:	d101      	bne.n	8001864 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001860:	2220      	movs	r2, #32
 8001862:	e003      	b.n	800186c <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	fab2 f282 	clz	r2, r2
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	40d3      	lsrs	r3, r2
 800186e:	b2db      	uxtb	r3, r3
 8001870:	3301      	adds	r3, #1
 8001872:	b2da      	uxtb	r2, r3
 8001874:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <HW_TS_Init+0x1ac>)
 8001876:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001878:	4b48      	ldr	r3, [pc, #288]	; (800199c <HW_TS_Init+0x1a4>)
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	b29b      	uxth	r3, r3
 800187e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001882:	b29b      	uxth	r3, r3
 8001884:	3301      	adds	r3, #1
 8001886:	b29a      	uxth	r2, r3
 8001888:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <HW_TS_Init+0x1b0>)
 800188a:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800188c:	4b46      	ldr	r3, [pc, #280]	; (80019a8 <HW_TS_Init+0x1b0>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	3b01      	subs	r3, #1
 8001892:	4a44      	ldr	r2, [pc, #272]	; (80019a4 <HW_TS_Init+0x1ac>)
 8001894:	7812      	ldrb	r2, [r2, #0]
 8001896:	fb02 f303 	mul.w	r3, r2, r3
 800189a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800189e:	4a40      	ldr	r2, [pc, #256]	; (80019a0 <HW_TS_Init+0x1a8>)
 80018a0:	7812      	ldrb	r2, [r2, #0]
 80018a2:	40d3      	lsrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d904      	bls.n	80018ba <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80018b0:	4b3e      	ldr	r3, [pc, #248]	; (80019ac <HW_TS_Init+0x1b4>)
 80018b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018b6:	801a      	strh	r2, [r3, #0]
 80018b8:	e003      	b.n	80018c2 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	4b3b      	ldr	r3, [pc, #236]	; (80019ac <HW_TS_Init+0x1b4>)
 80018c0:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80018c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80018c6:	f7ff fb81 	bl	8000fcc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80018ca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80018ce:	f7ff fb69 	bl	8000fa4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d143      	bne.n	8001960 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80018d8:	4b35      	ldr	r3, [pc, #212]	; (80019b0 <HW_TS_Init+0x1b8>)
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80018de:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <HW_TS_Init+0x1bc>)
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	77fb      	strb	r3, [r7, #31]
 80018ea:	e00c      	b.n	8001906 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80018ec:	7ffa      	ldrb	r2, [r7, #31]
 80018ee:	4932      	ldr	r1, [pc, #200]	; (80019b8 <HW_TS_Init+0x1c0>)
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	440b      	add	r3, r1
 80018fa:	330c      	adds	r3, #12
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001900:	7ffb      	ldrb	r3, [r7, #31]
 8001902:	3301      	adds	r3, #1
 8001904:	77fb      	strb	r3, [r7, #31]
 8001906:	7ffb      	ldrb	r3, [r7, #31]
 8001908:	2b05      	cmp	r3, #5
 800190a:	d9ef      	bls.n	80018ec <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800190c:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HW_TS_Init+0x1c4>)
 800190e:	2206      	movs	r2, #6
 8001910:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001912:	4b21      	ldr	r3, [pc, #132]	; (8001998 <HW_TS_Init+0x1a0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <HW_TS_Init+0x1a0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001924:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <HW_TS_Init+0x1a0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HW_TS_Init+0x1a0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800193a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800193c:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HW_TS_Init+0x1c8>)
 800193e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001942:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001944:	2003      	movs	r0, #3
 8001946:	f002 fc1c 	bl	8004182 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <HW_TS_Init+0x1a0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HW_TS_Init+0x1a0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	e00a      	b.n	8001976 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001960:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HW_TS_Init+0x1a0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001970:	2003      	movs	r0, #3
 8001972:	f002 fbf8 	bl	8004166 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HW_TS_Init+0x1a0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	22ff      	movs	r2, #255	; 0xff
 800197e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001980:	2200      	movs	r2, #0
 8001982:	2103      	movs	r1, #3
 8001984:	2003      	movs	r0, #3
 8001986:	f002 fbac 	bl	80040e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800198a:	2003      	movs	r0, #3
 800198c:	f002 fbc3 	bl	8004116 <HAL_NVIC_EnableIRQ>

  return;
 8001990:	bf00      	nop
}
 8001992:	3720      	adds	r7, #32
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	2000023c 	.word	0x2000023c
 800199c:	40002800 	.word	0x40002800
 80019a0:	20000240 	.word	0x20000240
 80019a4:	20000241 	.word	0x20000241
 80019a8:	20000242 	.word	0x20000242
 80019ac:	20000244 	.word	0x20000244
 80019b0:	20000150 	.word	0x20000150
 80019b4:	2000014c 	.word	0x2000014c
 80019b8:	200000b8 	.word	0x200000b8
 80019bc:	20000148 	.word	0x20000148
 80019c0:	58000800 	.word	0x58000800

080019c4 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b08b      	sub	sp, #44	; 0x2c
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	4613      	mov	r3, r2
 80019d2:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019da:	f3ef 8310 	mrs	r3, PRIMASK
 80019de:	61fb      	str	r3, [r7, #28]
  return(result);
 80019e0:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80019e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80019e4:	b672      	cpsid	i
}
 80019e6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80019e8:	e004      	b.n	80019f4 <HW_TS_Create+0x30>
  {
    loop++;
 80019ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019ee:	3301      	adds	r3, #1
 80019f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80019f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d80c      	bhi.n	8001a16 <HW_TS_Create+0x52>
 80019fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001a00:	492c      	ldr	r1, [pc, #176]	; (8001ab4 <HW_TS_Create+0xf0>)
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	440b      	add	r3, r1
 8001a0c:	330c      	adds	r3, #12
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1e9      	bne.n	80019ea <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d038      	beq.n	8001a90 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001a1e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001a22:	4924      	ldr	r1, [pc, #144]	; (8001ab4 <HW_TS_Create+0xf0>)
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	440b      	add	r3, r1
 8001a2e:	330c      	adds	r3, #12
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	f383 8810 	msr	PRIMASK, r3
}
 8001a3e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001a40:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001a44:	491b      	ldr	r1, [pc, #108]	; (8001ab4 <HW_TS_Create+0xf0>)
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	440b      	add	r3, r1
 8001a50:	3310      	adds	r3, #16
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001a56:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001a5a:	4916      	ldr	r1, [pc, #88]	; (8001ab4 <HW_TS_Create+0xf0>)
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	330d      	adds	r3, #13
 8001a68:	79fa      	ldrb	r2, [r7, #7]
 8001a6a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001a6c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001a70:	4910      	ldr	r1, [pc, #64]	; (8001ab4 <HW_TS_Create+0xf0>)
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	440b      	add	r3, r1
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001a86:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a8e:	e008      	b.n	8001aa2 <HW_TS_Create+0xde>
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f383 8810 	msr	PRIMASK, r3
}
 8001a9a:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001aa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	372c      	adds	r7, #44	; 0x2c
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	200000b8 	.word	0x200000b8

08001ab8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8001ac6:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001aca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001acc:	b672      	cpsid	i
}
 8001ace:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f002 fb2e 	bl	8004132 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001ad6:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <HW_TS_Stop+0x100>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	22ca      	movs	r2, #202	; 0xca
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24
 8001ae0:	4b35      	ldr	r3, [pc, #212]	; (8001bb8 <HW_TS_Stop+0x100>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2253      	movs	r2, #83	; 0x53
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001aea:	79fa      	ldrb	r2, [r7, #7]
 8001aec:	4933      	ldr	r1, [pc, #204]	; (8001bbc <HW_TS_Stop+0x104>)
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	440b      	add	r3, r1
 8001af8:	330c      	adds	r3, #12
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d148      	bne.n	8001b94 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fbe2 	bl	80012d0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001b0c:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <HW_TS_Stop+0x108>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b12:	7cfb      	ldrb	r3, [r7, #19]
 8001b14:	2b06      	cmp	r3, #6
 8001b16:	d135      	bne.n	8001b84 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001b18:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <HW_TS_Stop+0x10c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b24:	d108      	bne.n	8001b38 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001b26:	bf00      	nop
 8001b28:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <HW_TS_Stop+0x100>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f7      	bne.n	8001b28 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001b38:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <HW_TS_Stop+0x100>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <HW_TS_Stop+0x100>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b4a:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001b4c:	bf00      	nop
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <HW_TS_Stop+0x100>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f7      	beq.n	8001b4e <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <HW_TS_Stop+0x100>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <HW_TS_Stop+0x100>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001b72:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HW_TS_Stop+0x110>)
 8001b76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b7a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	f002 fb00 	bl	8004182 <HAL_NVIC_ClearPendingIRQ>
 8001b82:	e007      	b.n	8001b94 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HW_TS_Stop+0x114>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	7cfa      	ldrb	r2, [r7, #19]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001b90:	f7ff fcc0 	bl	8001514 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <HW_TS_Stop+0x100>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	22ff      	movs	r2, #255	; 0xff
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001b9e:	2003      	movs	r0, #3
 8001ba0:	f002 fab9 	bl	8004116 <HAL_NVIC_EnableIRQ>
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f383 8810 	msr	PRIMASK, r3
}
 8001bae:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001bb0:	bf00      	nop
}
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	2000023c 	.word	0x2000023c
 8001bbc:	200000b8 	.word	0x200000b8
 8001bc0:	20000148 	.word	0x20000148
 8001bc4:	40002800 	.word	0x40002800
 8001bc8:	58000800 	.word	0x58000800
 8001bcc:	20000149 	.word	0x20000149

08001bd0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001bdc:	79fa      	ldrb	r2, [r7, #7]
 8001bde:	493c      	ldr	r1, [pc, #240]	; (8001cd0 <HW_TS_Start+0x100>)
 8001be0:	4613      	mov	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	440b      	add	r3, r1
 8001bea:	330c      	adds	r3, #12
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d103      	bne.n	8001bfc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff5e 	bl	8001ab8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8001c00:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c02:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c06:	b672      	cpsid	i
}
 8001c08:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001c0a:	2003      	movs	r0, #3
 8001c0c:	f002 fa91 	bl	8004132 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001c10:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <HW_TS_Start+0x104>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	22ca      	movs	r2, #202	; 0xca
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
 8001c1a:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <HW_TS_Start+0x104>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2253      	movs	r2, #83	; 0x53
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001c24:	79fa      	ldrb	r2, [r7, #7]
 8001c26:	492a      	ldr	r1, [pc, #168]	; (8001cd0 <HW_TS_Start+0x100>)
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	440b      	add	r3, r1
 8001c32:	330c      	adds	r3, #12
 8001c34:	2202      	movs	r2, #2
 8001c36:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001c38:	79fa      	ldrb	r2, [r7, #7]
 8001c3a:	4925      	ldr	r1, [pc, #148]	; (8001cd0 <HW_TS_Start+0x100>)
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	440b      	add	r3, r1
 8001c46:	3308      	adds	r3, #8
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001c4c:	79fa      	ldrb	r2, [r7, #7]
 8001c4e:	4920      	ldr	r1, [pc, #128]	; (8001cd0 <HW_TS_Start+0x100>)
 8001c50:	4613      	mov	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	440b      	add	r3, r1
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fa8a 	bl	800117c <linkTimer>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HW_TS_Start+0x108>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001c72:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <HW_TS_Start+0x10c>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	7c7a      	ldrb	r2, [r7, #17]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d002      	beq.n	8001c84 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8001c7e:	f7ff fc49 	bl	8001514 <RescheduleTimerList>
 8001c82:	e013      	b.n	8001cac <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001c84:	79fa      	ldrb	r2, [r7, #7]
 8001c86:	4912      	ldr	r1, [pc, #72]	; (8001cd0 <HW_TS_Start+0x100>)
 8001c88:	4613      	mov	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	3308      	adds	r3, #8
 8001c94:	6819      	ldr	r1, [r3, #0]
 8001c96:	8a7b      	ldrh	r3, [r7, #18]
 8001c98:	79fa      	ldrb	r2, [r7, #7]
 8001c9a:	1ac9      	subs	r1, r1, r3
 8001c9c:	480c      	ldr	r0, [pc, #48]	; (8001cd0 <HW_TS_Start+0x100>)
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4403      	add	r3, r0
 8001ca8:	3308      	adds	r3, #8
 8001caa:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <HW_TS_Start+0x104>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	22ff      	movs	r2, #255	; 0xff
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001cb6:	2003      	movs	r0, #3
 8001cb8:	f002 fa2d 	bl	8004116 <HAL_NVIC_EnableIRQ>
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f383 8810 	msr	PRIMASK, r3
}
 8001cc6:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001cc8:	bf00      	nop
}
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	200000b8 	.word	0x200000b8
 8001cd4:	2000023c 	.word	0x2000023c
 8001cd8:	20000148 	.word	0x20000148
 8001cdc:	20000149 	.word	0x20000149

08001ce0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4798      	blx	r3

  return;
 8001cf2:	bf00      	nop
}
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	4603      	mov	r3, r0
 8001d08:	73fb      	strb	r3, [r7, #15]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001d12:	2300      	movs	r3, #0
 8001d14:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <HW_UART_Transmit_DMA+0x26>
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d00f      	beq.n	8001d40 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001d20:	e01d      	b.n	8001d5e <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 8001d22:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <HW_UART_Transmit_DMA+0xa4>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001d28:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <HW_UART_Transmit_DMA+0xa8>)
 8001d2a:	4a1f      	ldr	r2, [pc, #124]	; (8001da8 <HW_UART_Transmit_DMA+0xac>)
 8001d2c:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001d2e:	89bb      	ldrh	r3, [r7, #12]
 8001d30:	461a      	mov	r2, r3
 8001d32:	68b9      	ldr	r1, [r7, #8]
 8001d34:	481b      	ldr	r0, [pc, #108]	; (8001da4 <HW_UART_Transmit_DMA+0xa8>)
 8001d36:	f005 f85b 	bl	8006df0 <HAL_UART_Transmit_DMA>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	75fb      	strb	r3, [r7, #23]
            break;
 8001d3e:	e00e      	b.n	8001d5e <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 8001d40:	4a1a      	ldr	r2, [pc, #104]	; (8001dac <HW_UART_Transmit_DMA+0xb0>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <HW_UART_Transmit_DMA+0xb4>)
 8001d48:	4a1a      	ldr	r2, [pc, #104]	; (8001db4 <HW_UART_Transmit_DMA+0xb8>)
 8001d4a:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8001d4c:	89bb      	ldrh	r3, [r7, #12]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	4817      	ldr	r0, [pc, #92]	; (8001db0 <HW_UART_Transmit_DMA+0xb4>)
 8001d54:	f005 f84c 	bl	8006df0 <HAL_UART_Transmit_DMA>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	75fb      	strb	r3, [r7, #23]
            break;
 8001d5c:	bf00      	nop
    }

    switch (hal_status)
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d817      	bhi.n	8001d94 <HW_UART_Transmit_DMA+0x98>
 8001d64:	a201      	add	r2, pc, #4	; (adr r2, 8001d6c <HW_UART_Transmit_DMA+0x70>)
 8001d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6a:	bf00      	nop
 8001d6c:	08001d7d 	.word	0x08001d7d
 8001d70:	08001d83 	.word	0x08001d83
 8001d74:	08001d89 	.word	0x08001d89
 8001d78:	08001d8f 	.word	0x08001d8f
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	75bb      	strb	r3, [r7, #22]
            break;
 8001d80:	e009      	b.n	8001d96 <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001d82:	2301      	movs	r3, #1
 8001d84:	75bb      	strb	r3, [r7, #22]
            break;
 8001d86:	e006      	b.n	8001d96 <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	75bb      	strb	r3, [r7, #22]
            break;
 8001d8c:	e003      	b.n	8001d96 <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	75bb      	strb	r3, [r7, #22]
            break;
 8001d92:	e000      	b.n	8001d96 <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 8001d94:	bf00      	nop
    }

    return hw_status;
 8001d96:	7dbb      	ldrb	r3, [r7, #22]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000248 	.word	0x20000248
 8001da4:	2000031c 	.word	0x2000031c
 8001da8:	40013800 	.word	0x40013800
 8001dac:	2000024c 	.word	0x2000024c
 8001db0:	2000028c 	.word	0x2000028c
 8001db4:	40008000 	.word	0x40008000

08001db8 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <HAL_UART_TxCpltCallback+0x4c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00a      	beq.n	8001de0 <HAL_UART_TxCpltCallback+0x28>
 8001dca:	4a0f      	ldr	r2, [pc, #60]	; (8001e08 <HAL_UART_TxCpltCallback+0x50>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d10f      	bne.n	8001df0 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_UART_TxCpltCallback+0x54>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00d      	beq.n	8001df4 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <HAL_UART_TxCpltCallback+0x54>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4798      	blx	r3
            }
            break;
 8001dde:	e009      	b.n	8001df4 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_UART_TxCpltCallback+0x58>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_UART_TxCpltCallback+0x58>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4798      	blx	r3
            }
            break;
 8001dee:	e003      	b.n	8001df8 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8001df0:	bf00      	nop
 8001df2:	e002      	b.n	8001dfa <HAL_UART_TxCpltCallback+0x42>
            break;
 8001df4:	bf00      	nop
 8001df6:	e000      	b.n	8001dfa <HAL_UART_TxCpltCallback+0x42>
            break;
 8001df8:	bf00      	nop
    }

    return;
 8001dfa:	bf00      	nop
}
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40008000 	.word	0x40008000
 8001e08:	40013800 	.word	0x40013800
 8001e0c:	20000248 	.word	0x20000248
 8001e10:	2000024c 	.word	0x2000024c

08001e14 <LL_RCC_LSE_SetDriveCapability>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e24:	f023 0218 	bic.w	r2, r3, #24
 8001e28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_AHB1_GRP1_EnableClock>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4013      	ands	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e64:	68fb      	ldr	r3, [r7, #12]
}
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_AHB2_GRP1_EnableClock>:
{
 8001e72:	b480      	push	{r7}
 8001e74:	b085      	sub	sp, #20
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4013      	ands	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e96:	68fb      	ldr	r3, [r7, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ea8:	f001 ff42 	bl	8003d30 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001eac:	f7fe fdea 	bl	8000a84 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eb0:	f000 f814 	bl	8001edc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001eb4:	f000 f870 	bl	8001f98 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001eb8:	f000 f88e 	bl	8001fd8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ebc:	f000 f95d 	bl	800217a <MX_GPIO_Init>
  MX_DMA_Init();
 8001ec0:	f000 f93e 	bl	8002140 <MX_DMA_Init>
  MX_RF_Init();
 8001ec4:	f000 f8ea 	bl	800209c <MX_RF_Init>
  MX_RTC_Init();
 8001ec8:	f000 f906 	bl	80020d8 <MX_RTC_Init>
  MX_RNG_Init();
 8001ecc:	f000 f8ee 	bl	80020ac <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001ed0:	f7fe fde6 	bl	8000aa0 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001ed4:	f7ff f80b 	bl	8000eee <MX_APPE_Process>
 8001ed8:	e7fc      	b.n	8001ed4 <main+0x30>
	...

08001edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b09a      	sub	sp, #104	; 0x68
 8001ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ee2:	f107 0320 	add.w	r3, r7, #32
 8001ee6:	2248      	movs	r2, #72	; 0x48
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f009 fc5c 	bl	800b7a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]
 8001efe:	615a      	str	r2, [r3, #20]
 8001f00:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f02:	f002 ff09 	bl	8004d18 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7ff ff84 	bl	8001e14 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f0c:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <SystemClock_Config+0xb8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f14:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <SystemClock_Config+0xb8>)
 8001f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <SystemClock_Config+0xb8>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001f28:	2347      	movs	r3, #71	; 0x47
 8001f2a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f32:	2301      	movs	r3, #1
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f40:	2340      	movs	r3, #64	; 0x40
 8001f42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f48:	f107 0320 	add.w	r3, r7, #32
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 fa77 	bl	8005440 <HAL_RCC_OscConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001f58:	f000 f91c 	bl	8002194 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001f5c:	236f      	movs	r3, #111	; 0x6f
 8001f5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001f60:	2302      	movs	r3, #2
 8001f62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fded 	bl	8005b5c <HAL_RCC_ClockConfig>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001f88:	f000 f904 	bl	8002194 <Error_Handler>
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	3768      	adds	r7, #104	; 0x68
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	58000400 	.word	0x58000400

08001f98 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b094      	sub	sp, #80	; 0x50
 8001f9c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	2250      	movs	r2, #80	; 0x50
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f009 fbff 	bl	800b7a8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001faa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001fae:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001fb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fb4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001fba:	2310      	movs	r3, #16
 8001fbc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fbe:	463b      	mov	r3, r7
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f004 fa08 	bl	80063d6 <HAL_RCCEx_PeriphCLKConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001fcc:	f000 f8e2 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001fd0:	bf00      	nop
 8001fd2:	3750      	adds	r7, #80	; 0x50
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <MX_IPCC_Init+0x20>)
 8001fde:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <MX_IPCC_Init+0x24>)
 8001fe0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001fe2:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <MX_IPCC_Init+0x20>)
 8001fe4:	f002 fe12 	bl	8004c0c <HAL_IPCC_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001fee:	f000 f8d1 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000250 	.word	0x20000250
 8001ffc:	58000c00 	.word	0x58000c00

08002000 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002004:	4b23      	ldr	r3, [pc, #140]	; (8002094 <MX_USART1_UART_Init+0x94>)
 8002006:	4a24      	ldr	r2, [pc, #144]	; (8002098 <MX_USART1_UART_Init+0x98>)
 8002008:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800200a:	4b22      	ldr	r3, [pc, #136]	; (8002094 <MX_USART1_UART_Init+0x94>)
 800200c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002010:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <MX_USART1_UART_Init+0x94>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <MX_USART1_UART_Init+0x94>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800201e:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <MX_USART1_UART_Init+0x94>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <MX_USART1_UART_Init+0x94>)
 8002026:	220c      	movs	r2, #12
 8002028:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <MX_USART1_UART_Init+0x94>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <MX_USART1_UART_Init+0x94>)
 8002032:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002036:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <MX_USART1_UART_Init+0x94>)
 800203a:	2200      	movs	r2, #0
 800203c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <MX_USART1_UART_Init+0x94>)
 8002040:	2200      	movs	r2, #0
 8002042:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <MX_USART1_UART_Init+0x94>)
 8002046:	2200      	movs	r2, #0
 8002048:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800204a:	4812      	ldr	r0, [pc, #72]	; (8002094 <MX_USART1_UART_Init+0x94>)
 800204c:	f004 fe80 	bl	8006d50 <HAL_UART_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002056:	f000 f89d 	bl	8002194 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800205a:	2100      	movs	r1, #0
 800205c:	480d      	ldr	r0, [pc, #52]	; (8002094 <MX_USART1_UART_Init+0x94>)
 800205e:	f006 f848 	bl	80080f2 <HAL_UARTEx_SetTxFifoThreshold>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002068:	f000 f894 	bl	8002194 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800206c:	2100      	movs	r1, #0
 800206e:	4809      	ldr	r0, [pc, #36]	; (8002094 <MX_USART1_UART_Init+0x94>)
 8002070:	f006 f87d 	bl	800816e <HAL_UARTEx_SetRxFifoThreshold>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800207a:	f000 f88b 	bl	8002194 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_USART1_UART_Init+0x94>)
 8002080:	f005 fffe 	bl	8008080 <HAL_UARTEx_DisableFifoMode>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800208a:	f000 f883 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	2000031c 	.word	0x2000031c
 8002098:	40013800 	.word	0x40013800

0800209c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <MX_RNG_Init+0x24>)
 80020b2:	4a08      	ldr	r2, [pc, #32]	; (80020d4 <MX_RNG_Init+0x28>)
 80020b4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <MX_RNG_Init+0x24>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80020bc:	4804      	ldr	r0, [pc, #16]	; (80020d0 <MX_RNG_Init+0x24>)
 80020be:	f004 fc11 	bl	80068e4 <HAL_RNG_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80020c8:	f000 f864 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	2000046c 	.word	0x2000046c
 80020d4:	58001000 	.word	0x58001000

080020d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80020dc:	4b16      	ldr	r3, [pc, #88]	; (8002138 <MX_RTC_Init+0x60>)
 80020de:	4a17      	ldr	r2, [pc, #92]	; (800213c <MX_RTC_Init+0x64>)
 80020e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <MX_RTC_Init+0x60>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <MX_RTC_Init+0x60>)
 80020ea:	220f      	movs	r2, #15
 80020ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80020ee:	4b12      	ldr	r3, [pc, #72]	; (8002138 <MX_RTC_Init+0x60>)
 80020f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80020f4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <MX_RTC_Init+0x60>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020fc:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <MX_RTC_Init+0x60>)
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <MX_RTC_Init+0x60>)
 8002104:	2200      	movs	r2, #0
 8002106:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <MX_RTC_Init+0x60>)
 800210a:	2200      	movs	r2, #0
 800210c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800210e:	480a      	ldr	r0, [pc, #40]	; (8002138 <MX_RTC_Init+0x60>)
 8002110:	f004 fc1d 	bl	800694e <HAL_RTC_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800211a:	f000 f83b 	bl	8002194 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	4805      	ldr	r0, [pc, #20]	; (8002138 <MX_RTC_Init+0x60>)
 8002124:	f004 fd02 	bl	8006b2c <HAL_RTCEx_SetWakeUpTimer_IT>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800212e:	f000 f831 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000480 	.word	0x20000480
 800213c:	40002800 	.word	0x40002800

08002140 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002144:	2004      	movs	r0, #4
 8002146:	f7ff fe7b 	bl	8001e40 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800214a:	2001      	movs	r0, #1
 800214c:	f7ff fe78 	bl	8001e40 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002150:	2002      	movs	r0, #2
 8002152:	f7ff fe75 	bl	8001e40 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	210f      	movs	r1, #15
 800215a:	200e      	movs	r0, #14
 800215c:	f001 ffc1 	bl	80040e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002160:	200e      	movs	r0, #14
 8002162:	f001 ffd8 	bl	8004116 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	210f      	movs	r1, #15
 800216a:	203a      	movs	r0, #58	; 0x3a
 800216c:	f001 ffb9 	bl	80040e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002170:	203a      	movs	r0, #58	; 0x3a
 8002172:	f001 ffd0 	bl	8004116 <HAL_NVIC_EnableIRQ>

}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}

0800217a <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	2004      	movs	r0, #4
 8002180:	f7ff fe77 	bl	8001e72 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002184:	2001      	movs	r0, #1
 8002186:	f7ff fe74 	bl	8001e72 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	2002      	movs	r0, #2
 800218c:	f7ff fe71 	bl	8001e72 <LL_AHB2_GRP1_EnableClock>

}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}

08002194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <LL_RCC_EnableRTC>:
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80021a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_AHB2_GRP1_EnableClock>:
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4313      	orrs	r3, r2
 80021da:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4013      	ands	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021e8:	68fb      	ldr	r3, [r7, #12]
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <LL_AHB3_GRP1_EnableClock>:
{
 80021f6:	b480      	push	{r7}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80021fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002202:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002204:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4313      	orrs	r3, r2
 800220c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800220e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002212:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4013      	ands	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800221a:	68fb      	ldr	r3, [r7, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_APB1_GRP1_EnableClock>:
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002234:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002236:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4313      	orrs	r3, r2
 800223e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002244:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4013      	ands	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800224c:	68fb      	ldr	r3, [r7, #12]
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_APB1_GRP2_EnableClock>:
{
 800225a:	b480      	push	{r7}
 800225c:	b085      	sub	sp, #20
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002266:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002268:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4313      	orrs	r3, r2
 8002270:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002276:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4013      	ands	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800227e:	68fb      	ldr	r3, [r7, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_APB2_GRP1_EnableClock>:
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002298:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800229a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4013      	ands	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022b0:	68fb      	ldr	r3, [r7, #12]
}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80022c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80022c6:	f7ff ff96 	bl	80021f6 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2100      	movs	r1, #0
 80022ce:	202e      	movs	r0, #46	; 0x2e
 80022d0:	f001 ff07 	bl	80040e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80022d4:	202e      	movs	r0, #46	; 0x2e
 80022d6:	f001 ff1e 	bl	8004116 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <HAL_IPCC_MspInit+0x44>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d113      	bne.n	800231a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80022f2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80022f6:	f7ff ff7e 	bl	80021f6 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	2100      	movs	r1, #0
 80022fe:	202c      	movs	r0, #44	; 0x2c
 8002300:	f001 feef 	bl	80040e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002304:	202c      	movs	r0, #44	; 0x2c
 8002306:	f001 ff06 	bl	8004116 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2100      	movs	r1, #0
 800230e:	202d      	movs	r0, #45	; 0x2d
 8002310:	f001 fee7 	bl	80040e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002314:	202d      	movs	r0, #45	; 0x2d
 8002316:	f001 fefe 	bl	8004116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	58000c00 	.word	0x58000c00

08002328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b0a0      	sub	sp, #128	; 0x80
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	2250      	movs	r2, #80	; 0x50
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f009 fa2d 	bl	800b7a8 <memset>
  if(huart->Instance==LPUART1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a68      	ldr	r2, [pc, #416]	; (80024f4 <HAL_UART_MspInit+0x1cc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d16e      	bne.n	8002436 <HAL_UART_MspInit+0x10e>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002358:	2302      	movs	r3, #2
 800235a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800235c:	2300      	movs	r3, #0
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	4618      	mov	r0, r3
 8002366:	f004 f836 	bl	80063d6 <HAL_RCCEx_PeriphCLKConfig>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002370:	f7ff ff10 	bl	8002194 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002374:	2001      	movs	r0, #1
 8002376:	f7ff ff70 	bl	800225a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	2001      	movs	r0, #1
 800237c:	f7ff ff22 	bl	80021c4 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002380:	230c      	movs	r3, #12
 8002382:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238c:	2303      	movs	r3, #3
 800238e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002390:	2308      	movs	r3, #8
 8002392:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002394:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002398:	4619      	mov	r1, r3
 800239a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800239e:	f002 fa71 	bl	8004884 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 80023a2:	4b55      	ldr	r3, [pc, #340]	; (80024f8 <HAL_UART_MspInit+0x1d0>)
 80023a4:	4a55      	ldr	r2, [pc, #340]	; (80024fc <HAL_UART_MspInit+0x1d4>)
 80023a6:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80023a8:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <HAL_UART_MspInit+0x1d0>)
 80023aa:	2211      	movs	r2, #17
 80023ac:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023ae:	4b52      	ldr	r3, [pc, #328]	; (80024f8 <HAL_UART_MspInit+0x1d0>)
 80023b0:	2210      	movs	r2, #16
 80023b2:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023b4:	4b50      	ldr	r3, [pc, #320]	; (80024f8 <HAL_UART_MspInit+0x1d0>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023ba:	4b4f      	ldr	r3, [pc, #316]	; (80024f8 <HAL_UART_MspInit+0x1d0>)
 80023bc:	2280      	movs	r2, #128	; 0x80
 80023be:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023c0:	4b4d      	ldr	r3, [pc, #308]	; (80024f8 <HAL_UART_MspInit+0x1d0>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023c6:	4b4c      	ldr	r3, [pc, #304]	; (80024f8 <HAL_UART_MspInit+0x1d0>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80023cc:	4b4a      	ldr	r3, [pc, #296]	; (80024f8 <HAL_UART_MspInit+0x1d0>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023d2:	4b49      	ldr	r3, [pc, #292]	; (80024f8 <HAL_UART_MspInit+0x1d0>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80023d8:	4847      	ldr	r0, [pc, #284]	; (80024f8 <HAL_UART_MspInit+0x1d0>)
 80023da:	f001 fee1 	bl	80041a0 <HAL_DMA_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80023e4:	f7ff fed6 	bl	8002194 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 80023e8:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 80023ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80023ee:	2300      	movs	r3, #0
 80023f0:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 80023fe:	2301      	movs	r3, #1
 8002400:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8002402:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002406:	4619      	mov	r1, r3
 8002408:	483b      	ldr	r0, [pc, #236]	; (80024f8 <HAL_UART_MspInit+0x1d0>)
 800240a:	f002 f9fb 	bl	8004804 <HAL_DMAEx_ConfigMuxSync>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8002414:	f7ff febe 	bl	8002194 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a37      	ldr	r2, [pc, #220]	; (80024f8 <HAL_UART_MspInit+0x1d0>)
 800241c:	679a      	str	r2, [r3, #120]	; 0x78
 800241e:	4a36      	ldr	r2, [pc, #216]	; (80024f8 <HAL_UART_MspInit+0x1d0>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	2100      	movs	r1, #0
 8002428:	2025      	movs	r0, #37	; 0x25
 800242a:	f001 fe5a 	bl	80040e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800242e:	2025      	movs	r0, #37	; 0x25
 8002430:	f001 fe71 	bl	8004116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002434:	e05a      	b.n	80024ec <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a31      	ldr	r2, [pc, #196]	; (8002500 <HAL_UART_MspInit+0x1d8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d155      	bne.n	80024ec <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002440:	2301      	movs	r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002444:	2300      	movs	r3, #0
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002448:	f107 030c 	add.w	r3, r7, #12
 800244c:	4618      	mov	r0, r3
 800244e:	f003 ffc2 	bl	80063d6 <HAL_RCCEx_PeriphCLKConfig>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_UART_MspInit+0x134>
      Error_Handler();
 8002458:	f7ff fe9c 	bl	8002194 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800245c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002460:	f7ff ff14 	bl	800228c <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002464:	2002      	movs	r0, #2
 8002466:	f7ff fead 	bl	80021c4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800246a:	23c0      	movs	r3, #192	; 0xc0
 800246c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246e:	2302      	movs	r3, #2
 8002470:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002472:	2301      	movs	r3, #1
 8002474:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002476:	2303      	movs	r3, #3
 8002478:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800247a:	2307      	movs	r3, #7
 800247c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002482:	4619      	mov	r1, r3
 8002484:	481f      	ldr	r0, [pc, #124]	; (8002504 <HAL_UART_MspInit+0x1dc>)
 8002486:	f002 f9fd 	bl	8004884 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 800248a:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <HAL_UART_MspInit+0x1e0>)
 800248c:	4a1f      	ldr	r2, [pc, #124]	; (800250c <HAL_UART_MspInit+0x1e4>)
 800248e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <HAL_UART_MspInit+0x1e0>)
 8002492:	220f      	movs	r2, #15
 8002494:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <HAL_UART_MspInit+0x1e0>)
 8002498:	2210      	movs	r2, #16
 800249a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800249c:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <HAL_UART_MspInit+0x1e0>)
 800249e:	2200      	movs	r2, #0
 80024a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024a2:	4b19      	ldr	r3, [pc, #100]	; (8002508 <HAL_UART_MspInit+0x1e0>)
 80024a4:	2280      	movs	r2, #128	; 0x80
 80024a6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <HAL_UART_MspInit+0x1e0>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024ae:	4b16      	ldr	r3, [pc, #88]	; (8002508 <HAL_UART_MspInit+0x1e0>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <HAL_UART_MspInit+0x1e0>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024ba:	4b13      	ldr	r3, [pc, #76]	; (8002508 <HAL_UART_MspInit+0x1e0>)
 80024bc:	2200      	movs	r2, #0
 80024be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80024c0:	4811      	ldr	r0, [pc, #68]	; (8002508 <HAL_UART_MspInit+0x1e0>)
 80024c2:	f001 fe6d 	bl	80041a0 <HAL_DMA_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80024cc:	f7ff fe62 	bl	8002194 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a0d      	ldr	r2, [pc, #52]	; (8002508 <HAL_UART_MspInit+0x1e0>)
 80024d4:	679a      	str	r2, [r3, #120]	; 0x78
 80024d6:	4a0c      	ldr	r2, [pc, #48]	; (8002508 <HAL_UART_MspInit+0x1e0>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024dc:	2200      	movs	r2, #0
 80024de:	2100      	movs	r1, #0
 80024e0:	2024      	movs	r0, #36	; 0x24
 80024e2:	f001 fdfe 	bl	80040e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024e6:	2024      	movs	r0, #36	; 0x24
 80024e8:	f001 fe15 	bl	8004116 <HAL_NVIC_EnableIRQ>
}
 80024ec:	bf00      	nop
 80024ee:	3780      	adds	r7, #128	; 0x80
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40008000 	.word	0x40008000
 80024f8:	200003ac 	.word	0x200003ac
 80024fc:	40020044 	.word	0x40020044
 8002500:	40013800 	.word	0x40013800
 8002504:	48000400 	.word	0x48000400
 8002508:	2000040c 	.word	0x2000040c
 800250c:	40020444 	.word	0x40020444

08002510 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b096      	sub	sp, #88	; 0x58
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002518:	f107 0308 	add.w	r3, r7, #8
 800251c:	2250      	movs	r2, #80	; 0x50
 800251e:	2100      	movs	r1, #0
 8002520:	4618      	mov	r0, r3
 8002522:	f009 f941 	bl	800b7a8 <memset>
  if(hrng->Instance==RNG)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a0d      	ldr	r2, [pc, #52]	; (8002560 <HAL_RNG_MspInit+0x50>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d113      	bne.n	8002558 <HAL_RNG_MspInit+0x48>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002534:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002536:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800253a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800253c:	f107 0308 	add.w	r3, r7, #8
 8002540:	4618      	mov	r0, r3
 8002542:	f003 ff48 	bl	80063d6 <HAL_RCCEx_PeriphCLKConfig>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800254c:	f7ff fe22 	bl	8002194 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002550:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002554:	f7ff fe4f 	bl	80021f6 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002558:	bf00      	nop
 800255a:	3758      	adds	r7, #88	; 0x58
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	58001000 	.word	0x58001000

08002564 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b096      	sub	sp, #88	; 0x58
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800256c:	f107 0308 	add.w	r3, r7, #8
 8002570:	2250      	movs	r2, #80	; 0x50
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f009 f917 	bl	800b7a8 <memset>
  if(hrtc->Instance==RTC)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a14      	ldr	r2, [pc, #80]	; (80025d0 <HAL_RTC_MspInit+0x6c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d120      	bne.n	80025c6 <HAL_RTC_MspInit+0x62>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002584:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002588:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800258a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800258e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002590:	f107 0308 	add.w	r3, r7, #8
 8002594:	4618      	mov	r0, r3
 8002596:	f003 ff1e 	bl	80063d6 <HAL_RCCEx_PeriphCLKConfig>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80025a0:	f7ff fdf8 	bl	8002194 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025a4:	f7ff fdfd 	bl	80021a2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80025a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80025ac:	f7ff fe3c 	bl	8002228 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80025b0:	2200      	movs	r2, #0
 80025b2:	2100      	movs	r1, #0
 80025b4:	2003      	movs	r0, #3
 80025b6:	f001 fd94 	bl	80040e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80025ba:	2003      	movs	r0, #3
 80025bc:	f001 fdab 	bl	8004116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f004 fb6f 	bl	8006ca4 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025c6:	bf00      	nop
 80025c8:	3758      	adds	r7, #88	; 0x58
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40002800 	.word	0x40002800

080025d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e6:	e7fe      	b.n	80025e6 <HardFault_Handler+0x4>

080025e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <MemManage_Handler+0x4>

080025ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025f2:	e7fe      	b.n	80025f2 <BusFault_Handler+0x4>

080025f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <UsageFault_Handler+0x4>

080025fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002628:	f001 fbdc 	bl	8003de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}

08002630 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002634:	f7ff f80c 	bl	8001650 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}

0800263c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <DMA1_Channel4_IRQHandler+0x10>)
 8002642:	f001 ff8e 	bl	8004562 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200003ac 	.word	0x200003ac

08002650 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <USART1_IRQHandler+0x10>)
 8002656:	f004 fc5d 	bl	8006f14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	2000031c 	.word	0x2000031c

08002664 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <LPUART1_IRQHandler+0x10>)
 800266a:	f004 fc53 	bl	8006f14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2000028c 	.word	0x2000028c

08002678 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800267c:	f001 f870 	bl	8003760 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}

08002684 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002688:	f001 f8a2 	bl	80037d0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}

08002690 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002694:	f002 fa96 	bl	8004bc4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}

0800269c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80026a0:	4802      	ldr	r0, [pc, #8]	; (80026ac <DMA2_Channel4_IRQHandler+0x10>)
 80026a2:	f001 ff5e 	bl	8004562 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	2000040c 	.word	0x2000040c

080026b0 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80026b4:	2010      	movs	r0, #16
 80026b6:	f002 fa6d 	bl	8004b94 <HAL_GPIO_EXTI_IRQHandler>
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}

080026be <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 80026c2:	2001      	movs	r0, #1
 80026c4:	f002 fa66 	bl	8004b94 <HAL_GPIO_EXTI_IRQHandler>
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}

080026cc <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 80026d0:	2002      	movs	r0, #2
 80026d2:	f002 fa5f 	bl	8004b94 <HAL_GPIO_EXTI_IRQHandler>
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}

080026da <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
	return 1;
 80026de:	2301      	movs	r3, #1
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <_kill>:

int _kill(int pid, int sig)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026f4:	f009 f820 	bl	800b738 <__errno>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2216      	movs	r2, #22
 80026fc:	601a      	str	r2, [r3, #0]
	return -1;
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <_exit>:

void _exit (int status)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002712:	f04f 31ff 	mov.w	r1, #4294967295
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ffe7 	bl	80026ea <_kill>
	while (1) {}		/* Make sure we hang here */
 800271c:	e7fe      	b.n	800271c <_exit+0x12>

0800271e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b086      	sub	sp, #24
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	e00a      	b.n	8002746 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002730:	f3af 8000 	nop.w
 8002734:	4601      	mov	r1, r0
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	60ba      	str	r2, [r7, #8]
 800273c:	b2ca      	uxtb	r2, r1
 800273e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3301      	adds	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	dbf0      	blt.n	8002730 <_read+0x12>
	}

return len;
 800274e:	687b      	ldr	r3, [r7, #4]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	return -1;
 8002760:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002780:	605a      	str	r2, [r3, #4]
	return 0;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <_isatty>:

int _isatty(int file)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	return 1;
 8002798:	2301      	movs	r3, #1
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b085      	sub	sp, #20
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
	return 0;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027c8:	4a14      	ldr	r2, [pc, #80]	; (800281c <_sbrk+0x5c>)
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <_sbrk+0x60>)
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <_sbrk+0x64>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <_sbrk+0x64>)
 80027de:	4a12      	ldr	r2, [pc, #72]	; (8002828 <_sbrk+0x68>)
 80027e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <_sbrk+0x64>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d207      	bcs.n	8002800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f0:	f008 ffa2 	bl	800b738 <__errno>
 80027f4:	4603      	mov	r3, r0
 80027f6:	220c      	movs	r2, #12
 80027f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295
 80027fe:	e009      	b.n	8002814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <_sbrk+0x64>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <_sbrk+0x64>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	4a05      	ldr	r2, [pc, #20]	; (8002824 <_sbrk+0x64>)
 8002810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002812:	68fb      	ldr	r3, [r7, #12]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20030000 	.word	0x20030000
 8002820:	00001000 	.word	0x00001000
 8002824:	200004a4 	.word	0x200004a4
 8002828:	20001608 	.word	0x20001608

0800282c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <LL_FLASH_GetUDN+0x14>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	1fff7580 	.word	0x1fff7580

08002844 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <LL_FLASH_GetDeviceID+0x14>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	b2db      	uxtb	r3, r3
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	1fff7584 	.word	0x1fff7584

0800285c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <LL_FLASH_GetSTCompanyID+0x14>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0a1b      	lsrs	r3, r3, #8
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	1fff7584 	.word	0x1fff7584

08002874 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8002874:	b5b0      	push	{r4, r5, r7, lr}
 8002876:	b08e      	sub	sp, #56	; 0x38
 8002878:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800287a:	4b2f      	ldr	r3, [pc, #188]	; (8002938 <APP_BLE_Init+0xc4>)
 800287c:	1d3c      	adds	r4, r7, #4
 800287e:	461d      	mov	r5, r3
 8002880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800288a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800288c:	682b      	ldr	r3, [r5, #0]
 800288e:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8002890:	f000 fa22 	bl	8002cd8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002894:	2101      	movs	r1, #1
 8002896:	2002      	movs	r0, #2
 8002898:	f008 fcf0 	bl	800b27c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800289c:	4a27      	ldr	r2, [pc, #156]	; (800293c <APP_BLE_Init+0xc8>)
 800289e:	2100      	movs	r1, #0
 80028a0:	2004      	movs	r0, #4
 80028a2:	f008 fe05 	bl	800b4b0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	4618      	mov	r0, r3
 80028aa:	f007 fa8b 	bl	8009dc4 <SHCI_C2_BLE_Init>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 80028b4:	f7ff fc6e 	bl	8002194 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80028b8:	f000 fa24 	bl	8002d04 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80028bc:	f008 f9de 	bl	800ac7c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80028c0:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <APP_BLE_Init+0xcc>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <APP_BLE_Init+0xcc>)
 80028ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ce:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80028d0:	4a1c      	ldr	r2, [pc, #112]	; (8002944 <APP_BLE_Init+0xd0>)
 80028d2:	2100      	movs	r1, #0
 80028d4:	2001      	movs	r0, #1
 80028d6:	f008 fdeb 	bl	800b4b0 <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 80028da:	4a1b      	ldr	r2, [pc, #108]	; (8002948 <APP_BLE_Init+0xd4>)
 80028dc:	2100      	movs	r1, #0
 80028de:	2002      	movs	r0, #2
 80028e0:	f008 fde6 	bl	800b4b0 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 80028e4:	2006      	movs	r0, #6
 80028e6:	f006 fc9b 	bl	8009220 <aci_hal_set_radio_activity_mask>
#endif

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
  index_con_int = 0;
 80028ea:	4b18      	ldr	r3, [pc, #96]	; (800294c <APP_BLE_Init+0xd8>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 80028f0:	4b17      	ldr	r3, [pc, #92]	; (8002950 <APP_BLE_Init+0xdc>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 80028f6:	f000 fd59 	bl	80033ac <P2PS_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 80028fa:	4b16      	ldr	r3, [pc, #88]	; (8002954 <APP_BLE_Init+0xe0>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	4916      	ldr	r1, [pc, #88]	; (8002958 <APP_BLE_Init+0xe4>)
 8002900:	2000      	movs	r0, #0
 8002902:	f7ff f85f 	bl	80019c4 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <APP_BLE_Init+0xe8>)
 8002908:	2200      	movs	r2, #0
 800290a:	4915      	ldr	r1, [pc, #84]	; (8002960 <APP_BLE_Init+0xec>)
 800290c:	2000      	movs	r0, #0
 800290e:	f7ff f859 	bl	80019c4 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <APP_BLE_Init+0xcc>)
 8002914:	2200      	movs	r2, #0
 8002916:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <APP_BLE_Init+0xcc>)
 800291a:	2200      	movs	r2, #0
 800291c:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800291e:	4b11      	ldr	r3, [pc, #68]	; (8002964 <APP_BLE_Init+0xf0>)
 8002920:	2280      	movs	r2, #128	; 0x80
 8002922:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8002924:	4b10      	ldr	r3, [pc, #64]	; (8002968 <APP_BLE_Init+0xf4>)
 8002926:	22a0      	movs	r2, #160	; 0xa0
 8002928:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800292a:	2001      	movs	r0, #1
 800292c:	f000 fa9e 	bl	8002e6c <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8002930:	bf00      	nop
}
 8002932:	3738      	adds	r7, #56	; 0x38
 8002934:	46bd      	mov	sp, r7
 8002936:	bdb0      	pop	{r4, r5, r7, pc}
 8002938:	0800cc24 	.word	0x0800cc24
 800293c:	080097e9 	.word	0x080097e9
 8002940:	20000154 	.word	0x20000154
 8002944:	08003041 	.word	0x08003041
 8002948:	08003189 	.word	0x08003189
 800294c:	200004b4 	.word	0x200004b4
 8002950:	200004b5 	.word	0x200004b5
 8002954:	080030a1 	.word	0x080030a1
 8002958:	200001d5 	.word	0x200001d5
 800295c:	080030b1 	.word	0x080030b1
 8002960:	200001d6 	.word	0x200001d6
 8002964:	200001d8 	.word	0x200001d8
 8002968:	200001da 	.word	0x200001da

0800296c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08c      	sub	sp, #48	; 0x30
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002974:	2392      	movs	r3, #146	; 0x92
 8002976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3301      	adds	r3, #1
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2bff      	cmp	r3, #255	; 0xff
 8002986:	f000 80ac 	beq.w	8002ae2 <SVCCTL_App_Notification+0x176>
 800298a:	2bff      	cmp	r3, #255	; 0xff
 800298c:	f300 814e 	bgt.w	8002c2c <SVCCTL_App_Notification+0x2c0>
 8002990:	2b05      	cmp	r3, #5
 8002992:	d002      	beq.n	800299a <SVCCTL_App_Notification+0x2e>
 8002994:	2b3e      	cmp	r3, #62	; 0x3e
 8002996:	d023      	beq.n	80029e0 <SVCCTL_App_Notification+0x74>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8002998:	e148      	b.n	8002c2c <SVCCTL_App_Notification+0x2c0>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299c:	3302      	adds	r3, #2
 800299e:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	4ba4      	ldr	r3, [pc, #656]	; (8002c3c <SVCCTL_App_Notification+0x2d0>)
 80029aa:	8adb      	ldrh	r3, [r3, #22]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d109      	bne.n	80029c4 <SVCCTL_App_Notification+0x58>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80029b0:	4ba2      	ldr	r3, [pc, #648]	; (8002c3c <SVCCTL_App_Notification+0x2d0>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80029b6:	4ba1      	ldr	r3, [pc, #644]	; (8002c3c <SVCCTL_App_Notification+0x2d0>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 80029be:	48a0      	ldr	r0, [pc, #640]	; (8002c40 <SVCCTL_App_Notification+0x2d4>)
 80029c0:	f008 ff80 	bl	800b8c4 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 80029c4:	2001      	movs	r0, #1
 80029c6:	f000 fa51 	bl	8002e6c <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 80029ca:	4b9e      	ldr	r3, [pc, #632]	; (8002c44 <SVCCTL_App_Notification+0x2d8>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80029d0:	4b9a      	ldr	r3, [pc, #616]	; (8002c3c <SVCCTL_App_Notification+0x2d0>)
 80029d2:	8ada      	ldrh	r2, [r3, #22]
 80029d4:	4b9b      	ldr	r3, [pc, #620]	; (8002c44 <SVCCTL_App_Notification+0x2d8>)
 80029d6:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 80029d8:	489a      	ldr	r0, [pc, #616]	; (8002c44 <SVCCTL_App_Notification+0x2d8>)
 80029da:	f000 fcd3 	bl	8003384 <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80029de:	e128      	b.n	8002c32 <SVCCTL_App_Notification+0x2c6>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 80029e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e2:	3302      	adds	r3, #2
 80029e4:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d009      	beq.n	8002a02 <SVCCTL_App_Notification+0x96>
 80029ee:	2b0c      	cmp	r3, #12
 80029f0:	dc75      	bgt.n	8002ade <SVCCTL_App_Notification+0x172>
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d043      	beq.n	8002a7e <SVCCTL_App_Notification+0x112>
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d171      	bne.n	8002ade <SVCCTL_App_Notification+0x172>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 80029fa:	4893      	ldr	r0, [pc, #588]	; (8002c48 <SVCCTL_App_Notification+0x2dc>)
 80029fc:	f008 ff62 	bl	800b8c4 <puts>
          break;
 8002a00:	e06e      	b.n	8002ae0 <SVCCTL_App_Notification+0x174>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 8002a02:	4892      	ldr	r0, [pc, #584]	; (8002c4c <SVCCTL_App_Notification+0x2e0>)
 8002a04:	f008 ff5e 	bl	800b8c4 <puts>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	61bb      	str	r3, [r7, #24]
          if (evt_le_phy_update_complete->Status == 0)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d103      	bne.n	8002a1e <SVCCTL_App_Notification+0xb2>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 8002a16:	488e      	ldr	r0, [pc, #568]	; (8002c50 <SVCCTL_App_Notification+0x2e4>)
 8002a18:	f008 ff54 	bl	800b8c4 <puts>
 8002a1c:	e002      	b.n	8002a24 <SVCCTL_App_Notification+0xb8>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 8002a1e:	488d      	ldr	r0, [pc, #564]	; (8002c54 <SVCCTL_App_Notification+0x2e8>)
 8002a20:	f008 ff50 	bl	800b8c4 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8002a24:	4b85      	ldr	r3, [pc, #532]	; (8002c3c <SVCCTL_App_Notification+0x2d0>)
 8002a26:	8adb      	ldrh	r3, [r3, #22]
 8002a28:	f107 020e 	add.w	r2, r7, #14
 8002a2c:	f107 010f 	add.w	r1, r7, #15
 8002a30:	4618      	mov	r0, r3
 8002a32:	f006 fc6d 	bl	8009310 <hci_le_read_phy>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 8002a3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d118      	bne.n	8002a76 <SVCCTL_App_Notification+0x10a>
            APP_DBG_MSG("Read_PHY success \n");
 8002a44:	4884      	ldr	r0, [pc, #528]	; (8002c58 <SVCCTL_App_Notification+0x2ec>)
 8002a46:	f008 ff3d 	bl	800b8c4 <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d10a      	bne.n	8002a66 <SVCCTL_App_Notification+0xfa>
 8002a50:	7bbb      	ldrb	r3, [r7, #14]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d107      	bne.n	8002a66 <SVCCTL_App_Notification+0xfa>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	7bbb      	ldrb	r3, [r7, #14]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	487f      	ldr	r0, [pc, #508]	; (8002c5c <SVCCTL_App_Notification+0x2f0>)
 8002a60:	f008 feaa 	bl	800b7b8 <iprintf>
          break;
 8002a64:	e03c      	b.n	8002ae0 <SVCCTL_App_Notification+0x174>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	7bbb      	ldrb	r3, [r7, #14]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	487b      	ldr	r0, [pc, #492]	; (8002c5c <SVCCTL_App_Notification+0x2f0>)
 8002a70:	f008 fea2 	bl	800b7b8 <iprintf>
          break;
 8002a74:	e034      	b.n	8002ae0 <SVCCTL_App_Notification+0x174>
            APP_DBG_MSG("Read conf not succeess \n");
 8002a76:	487a      	ldr	r0, [pc, #488]	; (8002c60 <SVCCTL_App_Notification+0x2f4>)
 8002a78:	f008 ff24 	bl	800b8c4 <puts>
          break;
 8002a7c:	e030      	b.n	8002ae0 <SVCCTL_App_Notification+0x174>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3301      	adds	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8002a84:	4b6d      	ldr	r3, [pc, #436]	; (8002c3c <SVCCTL_App_Notification+0x2d0>)
 8002a86:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff f814 	bl	8001ab8 <HW_TS_Stop>
          APP_DBG_MSG("HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4872      	ldr	r0, [pc, #456]	; (8002c64 <SVCCTL_App_Notification+0x2f8>)
 8002a9c:	f008 fe8c 	bl	800b7b8 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8002aa0:	4b66      	ldr	r3, [pc, #408]	; (8002c3c <SVCCTL_App_Notification+0x2d0>)
 8002aa2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d104      	bne.n	8002ab4 <SVCCTL_App_Notification+0x148>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8002aaa:	4b64      	ldr	r3, [pc, #400]	; (8002c3c <SVCCTL_App_Notification+0x2d0>)
 8002aac:	2206      	movs	r2, #6
 8002aae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8002ab2:	e003      	b.n	8002abc <SVCCTL_App_Notification+0x150>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8002ab4:	4b61      	ldr	r3, [pc, #388]	; (8002c3c <SVCCTL_App_Notification+0x2d0>)
 8002ab6:	2205      	movs	r2, #5
 8002ab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	4b5d      	ldr	r3, [pc, #372]	; (8002c3c <SVCCTL_App_Notification+0x2d0>)
 8002ac6:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8002ac8:	4b5e      	ldr	r3, [pc, #376]	; (8002c44 <SVCCTL_App_Notification+0x2d8>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002ace:	4b5b      	ldr	r3, [pc, #364]	; (8002c3c <SVCCTL_App_Notification+0x2d0>)
 8002ad0:	8ada      	ldrh	r2, [r3, #22]
 8002ad2:	4b5c      	ldr	r3, [pc, #368]	; (8002c44 <SVCCTL_App_Notification+0x2d8>)
 8002ad4:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8002ad6:	485b      	ldr	r0, [pc, #364]	; (8002c44 <SVCCTL_App_Notification+0x2d8>)
 8002ad8:	f000 fc54 	bl	8003384 <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8002adc:	e000      	b.n	8002ae0 <SVCCTL_App_Notification+0x174>
          break;
 8002ade:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 8002ae0:	e0a7      	b.n	8002c32 <SVCCTL_App_Notification+0x2c6>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8002ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af2:	f000 8087 	beq.w	8002c04 <SVCCTL_App_Notification+0x298>
 8002af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002afa:	f300 8099 	bgt.w	8002c30 <SVCCTL_App_Notification+0x2c4>
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	f000 8088 	beq.w	8002c14 <SVCCTL_App_Notification+0x2a8>
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	f2c0 8093 	blt.w	8002c30 <SVCCTL_App_Notification+0x2c4>
 8002b0a:	f240 420a 	movw	r2, #1034	; 0x40a
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	f300 808e 	bgt.w	8002c30 <SVCCTL_App_Notification+0x2c4>
 8002b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b18:	f2c0 808a 	blt.w	8002c30 <SVCCTL_App_Notification+0x2c4>
 8002b1c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002b20:	2b0a      	cmp	r3, #10
 8002b22:	f200 8085 	bhi.w	8002c30 <SVCCTL_App_Notification+0x2c4>
 8002b26:	a201      	add	r2, pc, #4	; (adr r2, 8002b2c <SVCCTL_App_Notification+0x1c0>)
 8002b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2c:	08002b59 	.word	0x08002b59
 8002b30:	08002bdb 	.word	0x08002bdb
 8002b34:	08002b61 	.word	0x08002b61
 8002b38:	08002b6f 	.word	0x08002b6f
 8002b3c:	08002b77 	.word	0x08002b77
 8002b40:	08002b7f 	.word	0x08002b7f
 8002b44:	08002c31 	.word	0x08002c31
 8002b48:	08002c0d 	.word	0x08002c0d
 8002b4c:	08002b97 	.word	0x08002b97
 8002b50:	08002ba7 	.word	0x08002ba7
 8002b54:	08002b9f 	.word	0x08002b9f
        APP_DBG_MSG("\r\n\r** ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 8002b58:	4843      	ldr	r0, [pc, #268]	; (8002c68 <SVCCTL_App_Notification+0x2fc>)
 8002b5a:	f008 feb3 	bl	800b8c4 <puts>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 8002b5e:	e064      	b.n	8002c2a <SVCCTL_App_Notification+0x2be>
        APP_DBG_MSG("\r\n\r** ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8002b60:	4842      	ldr	r0, [pc, #264]	; (8002c6c <SVCCTL_App_Notification+0x300>)
 8002b62:	f008 feaf 	bl	800b8c4 <puts>
        APP_DBG_MSG("\r\n\r** aci_gap_pass_key_resp \n");
 8002b66:	4842      	ldr	r0, [pc, #264]	; (8002c70 <SVCCTL_App_Notification+0x304>)
 8002b68:	f008 feac 	bl	800b8c4 <puts>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 8002b6c:	e05d      	b.n	8002c2a <SVCCTL_App_Notification+0x2be>
        APP_DBG_MSG("\r\n\r** ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE \n");
 8002b6e:	4841      	ldr	r0, [pc, #260]	; (8002c74 <SVCCTL_App_Notification+0x308>)
 8002b70:	f008 fea8 	bl	800b8c4 <puts>
          break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 8002b74:	e059      	b.n	8002c2a <SVCCTL_App_Notification+0x2be>
        APP_DBG_MSG("\r\n\r** ACI_GAP_SLAVE_SECURITY_INITIATED_VSEVT_CODE \n");
 8002b76:	4840      	ldr	r0, [pc, #256]	; (8002c78 <SVCCTL_App_Notification+0x30c>)
 8002b78:	f008 fea4 	bl	800b8c4 <puts>
          break; /* ACI_GAP_SLAVE_SECURITY_INITIATED_VSEVT_CODE */
 8002b7c:	e055      	b.n	8002c2a <SVCCTL_App_Notification+0x2be>
        APP_DBG_MSG("\r\n\r** ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 8002b7e:	483f      	ldr	r0, [pc, #252]	; (8002c7c <SVCCTL_App_Notification+0x310>)
 8002b80:	f008 fea0 	bl	800b8c4 <puts>
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8002b84:	4b2d      	ldr	r3, [pc, #180]	; (8002c3c <SVCCTL_App_Notification+0x2d0>)
 8002b86:	8adb      	ldrh	r3, [r3, #22]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f005 fef6 	bl	800897a <aci_gap_allow_rebond>
        APP_DBG_MSG("\r\n\r** Send allow rebond \n");
 8002b8e:	483c      	ldr	r0, [pc, #240]	; (8002c80 <SVCCTL_App_Notification+0x314>)
 8002b90:	f008 fe98 	bl	800b8c4 <puts>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8002b94:	e049      	b.n	8002c2a <SVCCTL_App_Notification+0x2be>
         APP_DBG_MSG("\r\n\r** ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 8002b96:	483b      	ldr	r0, [pc, #236]	; (8002c84 <SVCCTL_App_Notification+0x318>)
 8002b98:	f008 fe94 	bl	800b8c4 <puts>
          break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 8002b9c:	e045      	b.n	8002c2a <SVCCTL_App_Notification+0x2be>
         APP_DBG_MSG("\r\n\r** ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8002b9e:	483a      	ldr	r0, [pc, #232]	; (8002c88 <SVCCTL_App_Notification+0x31c>)
 8002ba0:	f008 fe90 	bl	800b8c4 <puts>
          break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */    
 8002ba4:	e041      	b.n	8002c2a <SVCCTL_App_Notification+0x2be>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blecore_evt->data))->Numeric_Value);
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	3302      	adds	r3, #2
          APP_DBG_MSG("numeric_value = %ld\n",
 8002baa:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4836      	ldr	r0, [pc, #216]	; (8002c8c <SVCCTL_App_Notification+0x320>)
 8002bb2:	f008 fe01 	bl	800b7b8 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blecore_evt->data))->Numeric_Value);
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	3302      	adds	r3, #2
          APP_DBG_MSG("Hex_value = %lx\n",
 8002bba:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4833      	ldr	r0, [pc, #204]	; (8002c90 <SVCCTL_App_Notification+0x324>)
 8002bc2:	f008 fdf9 	bl	800b7b8 <iprintf>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 8002bc6:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <SVCCTL_App_Notification+0x2d0>)
 8002bc8:	8adb      	ldrh	r3, [r3, #22]
 8002bca:	2101      	movs	r1, #1
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f005 ff28 	bl	8008a22 <aci_gap_numeric_comparison_value_confirm_yesno>
          APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 8002bd2:	4830      	ldr	r0, [pc, #192]	; (8002c94 <SVCCTL_App_Notification+0x328>)
 8002bd4:	f008 fe76 	bl	800b8c4 <puts>
      break;
 8002bd8:	e027      	b.n	8002c2a <SVCCTL_App_Notification+0x2be>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	3302      	adds	r3, #2
 8002bde:	623b      	str	r3, [r7, #32]
            APP_DBG_MSG("BLE_CTRL_App_Notification: ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE, pairing_complete->Status = %d\n",pairing_complete->Status);
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	789b      	ldrb	r3, [r3, #2]
 8002be4:	4619      	mov	r1, r3
 8002be6:	482c      	ldr	r0, [pc, #176]	; (8002c98 <SVCCTL_App_Notification+0x32c>)
 8002be8:	f008 fde6 	bl	800b7b8 <iprintf>
            if (pairing_complete->Status == 0)
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	789b      	ldrb	r3, [r3, #2]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d103      	bne.n	8002bfc <SVCCTL_App_Notification+0x290>
              APP_DBG_MSG("\r\n\r** Pairing OK \n");
 8002bf4:	4829      	ldr	r0, [pc, #164]	; (8002c9c <SVCCTL_App_Notification+0x330>)
 8002bf6:	f008 fe65 	bl	800b8c4 <puts>
           break;    
 8002bfa:	e016      	b.n	8002c2a <SVCCTL_App_Notification+0x2be>
              APP_DBG_MSG("\r\n\r** Pairing KO \n");
 8002bfc:	4828      	ldr	r0, [pc, #160]	; (8002ca0 <SVCCTL_App_Notification+0x334>)
 8002bfe:	f008 fe61 	bl	800b8c4 <puts>
           break;    
 8002c02:	e012      	b.n	8002c2a <SVCCTL_App_Notification+0x2be>
          mutex = 1;
 8002c04:	4b27      	ldr	r3, [pc, #156]	; (8002ca4 <SVCCTL_App_Notification+0x338>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	701a      	strb	r2, [r3, #0]
      break;
 8002c0a:	e00e      	b.n	8002c2a <SVCCTL_App_Notification+0x2be>
        APP_DBG_MSG("\r\n\r** ACI_GAP_PROC_COMPLETE_VSEVT_CODE \n");
 8002c0c:	4826      	ldr	r0, [pc, #152]	; (8002ca8 <SVCCTL_App_Notification+0x33c>)
 8002c0e:	f008 fe59 	bl	800b8c4 <puts>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8002c12:	e00a      	b.n	8002c2a <SVCCTL_App_Notification+0x2be>
          BSP_LED_On(LED_GREEN);
 8002c14:	2001      	movs	r0, #1
 8002c16:	f000 ff71 	bl	8003afc <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8002c1a:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <SVCCTL_App_Notification+0x2d0>)
 8002c1c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002c20:	210a      	movs	r1, #10
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe ffd4 	bl	8001bd0 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8002c28:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8002c2a:	e001      	b.n	8002c30 <SVCCTL_App_Notification+0x2c4>
      break;
 8002c2c:	bf00      	nop
 8002c2e:	e000      	b.n	8002c32 <SVCCTL_App_Notification+0x2c6>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8002c30:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8002c32:	2301      	movs	r3, #1
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3730      	adds	r7, #48	; 0x30
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000154 	.word	0x20000154
 8002c40:	0800cc58 	.word	0x0800cc58
 8002c44:	200004b0 	.word	0x200004b0
 8002c48:	0800cc80 	.word	0x0800cc80
 8002c4c:	0800ccac 	.word	0x0800ccac
 8002c50:	0800ccc8 	.word	0x0800ccc8
 8002c54:	0800ccec 	.word	0x0800ccec
 8002c58:	0800cd14 	.word	0x0800cd14
 8002c5c:	0800cd28 	.word	0x0800cd28
 8002c60:	0800cd44 	.word	0x0800cd44
 8002c64:	0800cd5c 	.word	0x0800cd5c
 8002c68:	0800cda0 	.word	0x0800cda0
 8002c6c:	0800cdd0 	.word	0x0800cdd0
 8002c70:	0800cdf8 	.word	0x0800cdf8
 8002c74:	0800ce18 	.word	0x0800ce18
 8002c78:	0800ce44 	.word	0x0800ce44
 8002c7c:	0800ce78 	.word	0x0800ce78
 8002c80:	0800ce9c 	.word	0x0800ce9c
 8002c84:	0800ceb8 	.word	0x0800ceb8
 8002c88:	0800cee4 	.word	0x0800cee4
 8002c8c:	0800cf14 	.word	0x0800cf14
 8002c90:	0800cf2c 	.word	0x0800cf2c
 8002c94:	0800cf40 	.word	0x0800cf40
 8002c98:	0800cf7c 	.word	0x0800cf7c
 8002c9c:	0800cfdc 	.word	0x0800cfdc
 8002ca0:	0800cff0 	.word	0x0800cff0
 8002ca4:	200004b5 	.word	0x200004b5
 8002ca8:	0800d004 	.word	0x0800d004

08002cac <APP_BLE_Key_Button1_Action>:
    return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 8002cb0:	f000 fba4 	bl	80033fc <P2PS_APP_SW1_Button_Action>
}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )    
  UTIL_SEQ_SetTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, CFG_SCH_PRIO_0);
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	2002      	movs	r0, #2
 8002cc0:	f008 fc18 	bl	800b4f4 <UTIL_SEQ_SetTask>
#endif
  
  return;
 8002cc4:	bf00      	nop
}
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <Ble_Tl_Init+0x20>)
 8002ce0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <Ble_Tl_Init+0x24>)
 8002ce4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8002ce6:	463b      	mov	r3, r7
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4805      	ldr	r0, [pc, #20]	; (8002d00 <Ble_Tl_Init+0x28>)
 8002cec:	f006 fd60 	bl	80097b0 <hci_init>

  return;
 8002cf0:	bf00      	nop
}
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20030028 	.word	0x20030028
 8002cfc:	08003231 	.word	0x08003231
 8002d00:	080031f9 	.word	0x080031f9

08002d04 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8002d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d06:	b08d      	sub	sp, #52	; 0x34
 8002d08:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8002d0e:	f006 fadb 	bl	80092c8 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8002d12:	f000 f951 	bl	8002fb8 <BleGetBdAddress>
 8002d16:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	2106      	movs	r1, #6
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f006 f993 	bl	8009048 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

#if (CFG_BLE_ADDRESS_TYPE == PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	795a      	ldrb	r2, [r3, #5]
 8002d26:	4b4b      	ldr	r3, [pc, #300]	; (8002e54 <Ble_Hci_Gap_Gatt_Init+0x150>)
 8002d28:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	791a      	ldrb	r2, [r3, #4]
 8002d2e:	4b49      	ldr	r3, [pc, #292]	; (8002e54 <Ble_Hci_Gap_Gatt_Init+0x150>)
 8002d30:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	78da      	ldrb	r2, [r3, #3]
 8002d36:	4b47      	ldr	r3, [pc, #284]	; (8002e54 <Ble_Hci_Gap_Gatt_Init+0x150>)
 8002d38:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	789a      	ldrb	r2, [r3, #2]
 8002d3e:	4b45      	ldr	r3, [pc, #276]	; (8002e54 <Ble_Hci_Gap_Gatt_Init+0x150>)
 8002d40:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	785a      	ldrb	r2, [r3, #1]
 8002d46:	4b43      	ldr	r3, [pc, #268]	; (8002e54 <Ble_Hci_Gap_Gatt_Init+0x150>)
 8002d48:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	781a      	ldrb	r2, [r3, #0]
 8002d4e:	4b41      	ldr	r3, [pc, #260]	; (8002e54 <Ble_Hci_Gap_Gatt_Init+0x150>)
 8002d50:	735a      	strb	r2, [r3, #13]
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8002d52:	4a41      	ldr	r2, [pc, #260]	; (8002e58 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8002d54:	2110      	movs	r1, #16
 8002d56:	2018      	movs	r0, #24
 8002d58:	f006 f976 	bl	8009048 <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8002d5c:	4a3f      	ldr	r2, [pc, #252]	; (8002e5c <Ble_Hci_Gap_Gatt_Init+0x158>)
 8002d5e:	2110      	movs	r1, #16
 8002d60:	2008      	movs	r0, #8
 8002d62:	f006 f971 	bl	8009048 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8002d66:	2118      	movs	r1, #24
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f006 f9f2 	bl	8009152 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8002d6e:	f005 febf 	bl	8008af0 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8002d76:	7cfb      	ldrb	r3, [r7, #19]
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8002d7e:	7cfb      	ldrb	r3, [r7, #19]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d01d      	beq.n	8002dc0 <Ble_Hci_Gap_Gatt_Init+0xbc>
  {
    const char *name = "P2PSRV1";
 8002d84:	4b36      	ldr	r3, [pc, #216]	; (8002e60 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8002d86:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 8002d88:	f107 020a 	add.w	r2, r7, #10
 8002d8c:	7cf8      	ldrb	r0, [r7, #19]
 8002d8e:	1dbb      	adds	r3, r7, #6
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	f107 0308 	add.w	r3, r7, #8
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	2207      	movs	r2, #7
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	f005 fca9 	bl	80086f4 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8002da2:	897c      	ldrh	r4, [r7, #10]
 8002da4:	893d      	ldrh	r5, [r7, #8]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f7fd f9ea 	bl	8000180 <strlen>
 8002dac:	4603      	mov	r3, r0
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	4613      	mov	r3, r2
 8002db6:	2200      	movs	r2, #0
 8002db8:	4629      	mov	r1, r5
 8002dba:	4620      	mov	r0, r4
 8002dbc:	f006 f89b 	bl	8008ef6 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8002dc0:	8978      	ldrh	r0, [r7, #10]
 8002dc2:	88f9      	ldrh	r1, [r7, #6]
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2302      	movs	r3, #2
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f006 f893 	bl	8008ef6 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	2102      	movs	r1, #2
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	f006 fb19 	bl	800940c <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8002dda:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8002de0:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f005 fb6d 	bl	80084c4 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8002dea:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8002df0:	4b1c      	ldr	r3, [pc, #112]	; (8002e64 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002df2:	2208      	movs	r2, #8
 8002df4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8002df6:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002df8:	2210      	movs	r2, #16
 8002dfa:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8002e02:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002e04:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8002e06:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8002e08:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8002e0e:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002e10:	789c      	ldrb	r4, [r3, #2]
 8002e12:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002e14:	785d      	ldrb	r5, [r3, #1]
 8002e16:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002e18:	791b      	ldrb	r3, [r3, #4]
 8002e1a:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002e1c:	7952      	ldrb	r2, [r2, #5]
 8002e1e:	4911      	ldr	r1, [pc, #68]	; (8002e64 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002e20:	78c9      	ldrb	r1, [r1, #3]
 8002e22:	4810      	ldr	r0, [pc, #64]	; (8002e64 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002e24:	6880      	ldr	r0, [r0, #8]
 8002e26:	2600      	movs	r6, #0
 8002e28:	9604      	str	r6, [sp, #16]
 8002e2a:	9003      	str	r0, [sp, #12]
 8002e2c:	9102      	str	r1, [sp, #8]
 8002e2e:	9201      	str	r2, [sp, #4]
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	2300      	movs	r3, #0
 8002e34:	2201      	movs	r2, #1
 8002e36:	4629      	mov	r1, r5
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f005 fb97 	bl	800856c <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8002e40:	789b      	ldrb	r3, [r3, #2]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <Ble_Hci_Gap_Gatt_Init+0x146>
   {
     aci_gap_configure_whitelist();
 8002e46:	f005 fd74 	bl	8008932 <aci_gap_configure_whitelist>
   }
}
 8002e4a:	bf00      	nop
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000010 	.word	0x20000010
 8002e58:	0800d518 	.word	0x0800d518
 8002e5c:	0800d528 	.word	0x0800d528
 8002e60:	0800d02c 	.word	0x0800d02c
 8002e64:	20000154 	.word	0x20000154
 8002e68:	0001b207 	.word	0x0001b207

08002e6c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08c      	sub	sp, #48	; 0x30
 8002e70:	af08      	add	r7, sp, #32
 8002e72:	4603      	mov	r3, r0
 8002e74:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002e76:	2392      	movs	r3, #146	; 0x92
 8002e78:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d106      	bne.n	8002e8e <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8002e80:	4b3f      	ldr	r3, [pc, #252]	; (8002f80 <Adv_Request+0x114>)
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8002e86:	4b3f      	ldr	r3, [pc, #252]	; (8002f84 <Adv_Request+0x118>)
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	81bb      	strh	r3, [r7, #12]
 8002e8c:	e005      	b.n	8002e9a <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8002e8e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002e92:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8002e94:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002e98:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8002e9a:	4b3b      	ldr	r3, [pc, #236]	; (8002f88 <Adv_Request+0x11c>)
 8002e9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fe fe09 	bl	8001ab8 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 8002ea6:	4b38      	ldr	r3, [pc, #224]	; (8002f88 <Adv_Request+0x11c>)
 8002ea8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002eac:	4619      	mov	r1, r3
 8002eae:	4837      	ldr	r0, [pc, #220]	; (8002f8c <Adv_Request+0x120>)
 8002eb0:	f008 fc82 	bl	800b7b8 <iprintf>

    if ((New_Status == APP_BLE_LP_ADV)
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d119      	bne.n	8002eee <Adv_Request+0x82>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8002eba:	4b33      	ldr	r3, [pc, #204]	; (8002f88 <Adv_Request+0x11c>)
 8002ebc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d004      	beq.n	8002ece <Adv_Request+0x62>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8002ec4:	4b30      	ldr	r3, [pc, #192]	; (8002f88 <Adv_Request+0x11c>)
 8002ec6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d10f      	bne.n	8002eee <Adv_Request+0x82>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8002ece:	f005 f9db 	bl	8008288 <aci_gap_set_non_discoverable>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	72fb      	strb	r3, [r7, #11]
      if (ret == BLE_STATUS_SUCCESS)
 8002ed6:	7afb      	ldrb	r3, [r7, #11]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d103      	bne.n	8002ee4 <Adv_Request+0x78>
      {
        APP_DBG_MSG("Successfully Stopped Advertising \n");
 8002edc:	482c      	ldr	r0, [pc, #176]	; (8002f90 <Adv_Request+0x124>)
 8002ede:	f008 fcf1 	bl	800b8c4 <puts>
 8002ee2:	e004      	b.n	8002eee <Adv_Request+0x82>
      }
      else
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 8002ee4:	7afb      	ldrb	r3, [r7, #11]
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	482a      	ldr	r0, [pc, #168]	; (8002f94 <Adv_Request+0x128>)
 8002eea:	f008 fc65 	bl	800b7b8 <iprintf>
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8002eee:	4a26      	ldr	r2, [pc, #152]	; (8002f88 <Adv_Request+0x11c>)
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8002ef6:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <Adv_Request+0x11c>)
 8002ef8:	7e1b      	ldrb	r3, [r3, #24]
 8002efa:	89ba      	ldrh	r2, [r7, #12]
 8002efc:	89f9      	ldrh	r1, [r7, #14]
 8002efe:	2000      	movs	r0, #0
 8002f00:	9006      	str	r0, [sp, #24]
 8002f02:	2000      	movs	r0, #0
 8002f04:	9005      	str	r0, [sp, #20]
 8002f06:	4824      	ldr	r0, [pc, #144]	; (8002f98 <Adv_Request+0x12c>)
 8002f08:	9004      	str	r0, [sp, #16]
 8002f0a:	9303      	str	r3, [sp, #12]
 8002f0c:	4b23      	ldr	r3, [pc, #140]	; (8002f9c <Adv_Request+0x130>)
 8002f0e:	9302      	str	r3, [sp, #8]
 8002f10:	2308      	movs	r3, #8
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	2300      	movs	r3, #0
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f005 f9d8 	bl	80082d0 <aci_gap_set_discoverable>
 8002f20:	4603      	mov	r3, r0
 8002f22:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8002f24:	491e      	ldr	r1, [pc, #120]	; (8002fa0 <Adv_Request+0x134>)
 8002f26:	200e      	movs	r0, #14
 8002f28:	f005 fc91 	bl	800884e <aci_gap_update_adv_data>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 8002f30:	7afb      	ldrb	r3, [r7, #11]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d111      	bne.n	8002f5a <Adv_Request+0xee>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d10a      	bne.n	8002f52 <Adv_Request+0xe6>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8002f3c:	4819      	ldr	r0, [pc, #100]	; (8002fa4 <Adv_Request+0x138>)
 8002f3e:	f008 fcc1 	bl	800b8c4 <puts>
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <Adv_Request+0x11c>)
 8002f44:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002f48:	4917      	ldr	r1, [pc, #92]	; (8002fa8 <Adv_Request+0x13c>)
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fe40 	bl	8001bd0 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 8002f50:	e012      	b.n	8002f78 <Adv_Request+0x10c>
        APP_DBG_MSG("Successfully Start Low Power Advertising \n");
 8002f52:	4816      	ldr	r0, [pc, #88]	; (8002fac <Adv_Request+0x140>)
 8002f54:	f008 fcb6 	bl	800b8c4 <puts>
  return;
 8002f58:	e00e      	b.n	8002f78 <Adv_Request+0x10c>
      if (New_Status == APP_BLE_FAST_ADV)
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <Adv_Request+0x100>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 8002f60:	7afb      	ldrb	r3, [r7, #11]
 8002f62:	4619      	mov	r1, r3
 8002f64:	4812      	ldr	r0, [pc, #72]	; (8002fb0 <Adv_Request+0x144>)
 8002f66:	f008 fc27 	bl	800b7b8 <iprintf>
  return;
 8002f6a:	e005      	b.n	8002f78 <Adv_Request+0x10c>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 8002f6c:	7afb      	ldrb	r3, [r7, #11]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4810      	ldr	r0, [pc, #64]	; (8002fb4 <Adv_Request+0x148>)
 8002f72:	f008 fc21 	bl	800b7b8 <iprintf>
  return;
 8002f76:	bf00      	nop
}
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	200001d8 	.word	0x200001d8
 8002f84:	200001da 	.word	0x200001da
 8002f88:	20000154 	.word	0x20000154
 8002f8c:	0800d034 	.word	0x0800d034
 8002f90:	0800d050 	.word	0x0800d050
 8002f94:	0800d074 	.word	0x0800d074
 8002f98:	2000016d 	.word	0x2000016d
 8002f9c:	0800d538 	.word	0x0800d538
 8002fa0:	20000010 	.word	0x20000010
 8002fa4:	0800d09c 	.word	0x0800d09c
 8002fa8:	0001e046 	.word	0x0001e046
 8002fac:	0800d0c4 	.word	0x0800d0c4
 8002fb0:	0800d0f0 	.word	0x0800d0f0
 8002fb4:	0800d120 	.word	0x0800d120

08002fb8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8002fbe:	f7ff fc35 	bl	800282c <LL_FLASH_GetUDN>
 8002fc2:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fca:	d023      	beq.n	8003014 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8002fcc:	f7ff fc46 	bl	800285c <LL_FLASH_GetSTCompanyID>
 8002fd0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8002fd2:	f7ff fc37 	bl	8002844 <LL_FLASH_GetDeviceID>
 8002fd6:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	4b16      	ldr	r3, [pc, #88]	; (8003038 <BleGetBdAddress+0x80>)
 8002fde:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	0a1b      	lsrs	r3, r3, #8
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <BleGetBdAddress+0x80>)
 8002fe8:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <BleGetBdAddress+0x80>)
 8002ff0:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <BleGetBdAddress+0x80>)
 8002ff8:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	0a1b      	lsrs	r3, r3, #8
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <BleGetBdAddress+0x80>)
 8003002:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	0c1b      	lsrs	r3, r3, #16
 8003008:	b2da      	uxtb	r2, r3
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <BleGetBdAddress+0x80>)
 800300c:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <BleGetBdAddress+0x80>)
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	e00b      	b.n	800302c <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8003014:	2000      	movs	r0, #0
 8003016:	f006 fd81 	bl	8009b1c <OTP_Read>
 800301a:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	e001      	b.n	800302c <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8003028:	4b04      	ldr	r3, [pc, #16]	; (800303c <BleGetBdAddress+0x84>)
 800302a:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 800302c:	697b      	ldr	r3, [r7, #20]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	200004a8 	.word	0x200004a8
 800303c:	0800d510 	.word	0x0800d510

08003040 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 8003046:	2001      	movs	r0, #1
 8003048:	f000 fd72 	bl	8003b30 <BSP_LED_Off>
/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800304c:	4b10      	ldr	r3, [pc, #64]	; (8003090 <Adv_Cancel+0x50>)
 800304e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003052:	2b05      	cmp	r3, #5
 8003054:	d017      	beq.n	8003086 <Adv_Cancel+0x46>

  {

    tBleStatus result = 0x00;
 8003056:	2300      	movs	r3, #0
 8003058:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800305a:	f005 f915 	bl	8008288 <aci_gap_set_non_discoverable>
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <Adv_Cancel+0x50>)
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (result == BLE_STATUS_SUCCESS)
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d106      	bne.n	800307e <Adv_Cancel+0x3e>
    {
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8003070:	4808      	ldr	r0, [pc, #32]	; (8003094 <Adv_Cancel+0x54>)
 8003072:	f008 fba1 	bl	800b7b8 <iprintf>
 8003076:	4808      	ldr	r0, [pc, #32]	; (8003098 <Adv_Cancel+0x58>)
 8003078:	f008 fb9e 	bl	800b7b8 <iprintf>
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800307c:	e003      	b.n	8003086 <Adv_Cancel+0x46>
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800307e:	4807      	ldr	r0, [pc, #28]	; (800309c <Adv_Cancel+0x5c>)
 8003080:	f008 fb9a 	bl	800b7b8 <iprintf>
  return;
 8003084:	bf00      	nop
 8003086:	bf00      	nop
}
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000154 	.word	0x20000154
 8003094:	0800d154 	.word	0x0800d154
 8003098:	0800d15c 	.word	0x0800d15c
 800309c:	0800d178 	.word	0x0800d178

080030a0 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 80030a4:	2100      	movs	r1, #0
 80030a6:	2001      	movs	r0, #1
 80030a8:	f008 fa24 	bl	800b4f4 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 80030ac:	bf00      	nop
}
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 80030b4:	2001      	movs	r0, #1
 80030b6:	f000 fd3b 	bl	8003b30 <BSP_LED_Off>
/* USER CODE END Switch_OFF_GPIO */
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <BLE_SVC_L2CAP_Conn_Update>:

#if(L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t Connection_Handle)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b089      	sub	sp, #36	; 0x24
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	4603      	mov	r3, r0
 80030c8:	80fb      	strh	r3, [r7, #6]
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */
  if(mutex == 1) {
 80030ca:	4b29      	ldr	r3, [pc, #164]	; (8003170 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d149      	bne.n	8003166 <BLE_SVC_L2CAP_Conn_Update+0xa6>
    mutex = 0;
 80030d2:	4b27      	ldr	r3, [pc, #156]	; (8003170 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 80030d8:	4b26      	ldr	r3, [pc, #152]	; (8003174 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	bfb8      	it	lt
 80030e6:	425b      	neglt	r3, r3
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	4b22      	ldr	r3, [pc, #136]	; (8003174 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 80030ec:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(tab_conn_interval[index_con_int]);
 80030ee:	4b21      	ldr	r3, [pc, #132]	; (8003174 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	4a21      	ldr	r2, [pc, #132]	; (8003178 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	ed93 7a00 	vldr	s14, [r3]
 80030fc:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8003100:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003104:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003108:	ee17 3a90 	vmov	r3, s15
 800310c:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(tab_conn_interval[index_con_int]);
 800310e:	4b19      	ldr	r3, [pc, #100]	; (8003174 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	4a19      	ldr	r2, [pc, #100]	; (8003178 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	ed93 7a00 	vldr	s14, [r3]
 800311c:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8003120:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003128:	ee17 3a90 	vmov	r3, s15
 800312c:	82bb      	strh	r3, [r7, #20]
    uint16_t slave_latency = L2CAP_SLAVE_LATENCY;
 800312e:	2300      	movs	r3, #0
 8003130:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 8003132:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003136:	823b      	strh	r3, [r7, #16]
    tBleStatus result;

    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8003138:	4b10      	ldr	r3, [pc, #64]	; (800317c <BLE_SVC_L2CAP_Conn_Update+0xbc>)
 800313a:	8ad8      	ldrh	r0, [r3, #22]
 800313c:	8a7c      	ldrh	r4, [r7, #18]
 800313e:	8aba      	ldrh	r2, [r7, #20]
 8003140:	8af9      	ldrh	r1, [r7, #22]
 8003142:	8a3b      	ldrh	r3, [r7, #16]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	4623      	mov	r3, r4
 8003148:	f006 f9dd 	bl	8009506 <aci_l2cap_connection_parameter_update_req>
 800314c:	4603      	mov	r3, r0
 800314e:	73fb      	strb	r3, [r7, #15]
                                                       interval_min, interval_max,
                                                       slave_latency, timeout_multiplier);
    if( result == BLE_STATUS_SUCCESS )
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d103      	bne.n	800315e <BLE_SVC_L2CAP_Conn_Update+0x9e>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 8003156:	480a      	ldr	r0, [pc, #40]	; (8003180 <BLE_SVC_L2CAP_Conn_Update+0xc0>)
 8003158:	f008 fb2e 	bl	800b7b8 <iprintf>
    }
  }
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */
  return;
 800315c:	e003      	b.n	8003166 <BLE_SVC_L2CAP_Conn_Update+0xa6>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 800315e:	4809      	ldr	r0, [pc, #36]	; (8003184 <BLE_SVC_L2CAP_Conn_Update+0xc4>)
 8003160:	f008 fb2a 	bl	800b7b8 <iprintf>
  return;
 8003164:	bf00      	nop
 8003166:	bf00      	nop
}
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	bd90      	pop	{r4, r7, pc}
 800316e:	bf00      	nop
 8003170:	200004b5 	.word	0x200004b5
 8003174:	200004b4 	.word	0x200004b4
 8003178:	20000008 	.word	0x20000008
 800317c:	20000154 	.word	0x20000154
 8003180:	0800d19c 	.word	0x0800d19c
 8003184:	0800d1cc 	.word	0x0800d1cc

08003188 <Connection_Interval_Update_Req>:
#endif

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
static void Connection_Interval_Update_Req( void )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 800318c:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <Connection_Interval_Update_Req+0x28>)
 800318e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003192:	2b01      	cmp	r3, #1
 8003194:	d00a      	beq.n	80031ac <Connection_Interval_Update_Req+0x24>
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <Connection_Interval_Update_Req+0x28>)
 8003198:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <Connection_Interval_Update_Req+0x28>)
 80031a2:	8adb      	ldrh	r3, [r3, #22]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff8b 	bl	80030c0 <BLE_SVC_L2CAP_Conn_Update>
  }
  return;
 80031aa:	bf00      	nop
 80031ac:	bf00      	nop
}
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20000154 	.word	0x20000154

080031b4 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80031bc:	2100      	movs	r1, #0
 80031be:	2004      	movs	r0, #4
 80031c0:	f008 f998 	bl	800b4f4 <UTIL_SEQ_SetTask>
  return;
 80031c4:	bf00      	nop
}
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80031d4:	2001      	movs	r0, #1
 80031d6:	f008 f9f9 	bl	800b5cc <UTIL_SEQ_SetEvt>
  return;
 80031da:	bf00      	nop
}
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80031ea:	2001      	movs	r0, #1
 80031ec:	f008 fa0e 	bl	800b60c <UTIL_SEQ_WaitEvt>
  return;
 80031f0:	bf00      	nop
}
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	3308      	adds	r3, #8
 800320a:	4618      	mov	r0, r3
 800320c:	f007 fd88 	bl	800ad20 <SVCCTL_UserEvtRx>
 8003210:	4603      	mov	r3, r0
 8003212:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8003214:	7afb      	ldrb	r3, [r7, #11]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2201      	movs	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8003220:	e003      	b.n	800322a <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
  return;
 8003228:	bf00      	nop
}
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <BLE_StatusNot+0x16>
 8003240:	2b01      	cmp	r3, #1
 8003242:	d006      	beq.n	8003252 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8003244:	e00b      	b.n	800325e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003246:	233f      	movs	r3, #63	; 0x3f
 8003248:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f008 f97e 	bl	800b54c <UTIL_SEQ_PauseTask>
      break;
 8003250:	e005      	b.n	800325e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003252:	233f      	movs	r3, #63	; 0x3f
 8003254:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f008 f998 	bl	800b58c <UTIL_SEQ_ResumeTask>
      break;
 800325c:	bf00      	nop
  }
  return;
 800325e:	bf00      	nop
}
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d01a      	beq.n	80032ae <P2PS_STM_App_Notification+0x46>
 8003278:	2b03      	cmp	r3, #3
 800327a:	dc6b      	bgt.n	8003354 <P2PS_STM_App_Notification+0xec>
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <P2PS_STM_App_Notification+0x1e>
 8003280:	2b01      	cmp	r3, #1
 8003282:	d00a      	beq.n	800329a <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8003284:	e066      	b.n	8003354 <P2PS_STM_App_Notification+0xec>
      P2P_Server_App_Context.Notification_Status = 1;
 8003286:	4b37      	ldr	r3, [pc, #220]	; (8003364 <P2PS_STM_App_Notification+0xfc>)
 8003288:	2201      	movs	r2, #1
 800328a:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 800328c:	4836      	ldr	r0, [pc, #216]	; (8003368 <P2PS_STM_App_Notification+0x100>)
 800328e:	f008 fb19 	bl	800b8c4 <puts>
      APP_DBG_MSG(" \n\r");
 8003292:	4836      	ldr	r0, [pc, #216]	; (800336c <P2PS_STM_App_Notification+0x104>)
 8003294:	f008 fa90 	bl	800b7b8 <iprintf>
      break;
 8003298:	e05f      	b.n	800335a <P2PS_STM_App_Notification+0xf2>
      P2P_Server_App_Context.Notification_Status = 0;
 800329a:	4b32      	ldr	r3, [pc, #200]	; (8003364 <P2PS_STM_App_Notification+0xfc>)
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 80032a0:	4833      	ldr	r0, [pc, #204]	; (8003370 <P2PS_STM_App_Notification+0x108>)
 80032a2:	f008 fb0f 	bl	800b8c4 <puts>
      APP_DBG_MSG(" \n\r");
 80032a6:	4831      	ldr	r0, [pc, #196]	; (800336c <P2PS_STM_App_Notification+0x104>)
 80032a8:	f008 fa86 	bl	800b7b8 <iprintf>
      break;
 80032ac:	e055      	b.n	800335a <P2PS_STM_App_Notification+0xf2>
      if(pNotification->DataTransfered.pPayload[0] == 0x61){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b61      	cmp	r3, #97	; 0x61
 80032b6:	d123      	bne.n	8003300 <P2PS_STM_App_Notification+0x98>
        if(pNotification->DataTransfered.pPayload[1] == 0x62)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	3301      	adds	r3, #1
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b62      	cmp	r3, #98	; 0x62
 80032c2:	d10b      	bne.n	80032dc <P2PS_STM_App_Notification+0x74>
          BSP_LED_On(LED_BLUE);
 80032c4:	2000      	movs	r0, #0
 80032c6:	f000 fc19 	bl	8003afc <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n");
 80032ca:	482a      	ldr	r0, [pc, #168]	; (8003374 <P2PS_STM_App_Notification+0x10c>)
 80032cc:	f008 fafa 	bl	800b8c4 <puts>
          APP_DBG_MSG(" \n\r");
 80032d0:	4826      	ldr	r0, [pc, #152]	; (800336c <P2PS_STM_App_Notification+0x104>)
 80032d2:	f008 fa71 	bl	800b7b8 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 80032d6:	4b23      	ldr	r3, [pc, #140]	; (8003364 <P2PS_STM_App_Notification+0xfc>)
 80032d8:	2201      	movs	r2, #1
 80032da:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x61)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	3301      	adds	r3, #1
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b61      	cmp	r3, #97	; 0x61
 80032e6:	d10b      	bne.n	8003300 <P2PS_STM_App_Notification+0x98>
          BSP_LED_Off(LED_BLUE);
 80032e8:	2000      	movs	r0, #0
 80032ea:	f000 fc21 	bl	8003b30 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n"); 
 80032ee:	4822      	ldr	r0, [pc, #136]	; (8003378 <P2PS_STM_App_Notification+0x110>)
 80032f0:	f008 fae8 	bl	800b8c4 <puts>
          APP_DBG_MSG(" \n\r");
 80032f4:	481d      	ldr	r0, [pc, #116]	; (800336c <P2PS_STM_App_Notification+0x104>)
 80032f6:	f008 fa5f 	bl	800b7b8 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 80032fa:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <P2PS_STM_App_Notification+0xfc>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x62){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b62      	cmp	r3, #98	; 0x62
 8003308:	d126      	bne.n	8003358 <P2PS_STM_App_Notification+0xf0>
        if(pNotification->DataTransfered.pPayload[1] == 0x62)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	3301      	adds	r3, #1
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b62      	cmp	r3, #98	; 0x62
 8003314:	d10b      	bne.n	800332e <P2PS_STM_App_Notification+0xc6>
          BSP_LED_On(LED_BLUE);
 8003316:	2000      	movs	r0, #0
 8003318:	f000 fbf0 	bl	8003afc <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n"); 
 800331c:	4817      	ldr	r0, [pc, #92]	; (800337c <P2PS_STM_App_Notification+0x114>)
 800331e:	f008 fad1 	bl	800b8c4 <puts>
          APP_DBG_MSG(" \n\r");
 8003322:	4812      	ldr	r0, [pc, #72]	; (800336c <P2PS_STM_App_Notification+0x104>)
 8003324:	f008 fa48 	bl	800b7b8 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <P2PS_STM_App_Notification+0xfc>)
 800332a:	2201      	movs	r2, #1
 800332c:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x61)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	3301      	adds	r3, #1
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b61      	cmp	r3, #97	; 0x61
 8003338:	d10e      	bne.n	8003358 <P2PS_STM_App_Notification+0xf0>
          BSP_LED_Off(LED_BLUE);
 800333a:	2000      	movs	r0, #0
 800333c:	f000 fbf8 	bl	8003b30 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n"); 
 8003340:	480f      	ldr	r0, [pc, #60]	; (8003380 <P2PS_STM_App_Notification+0x118>)
 8003342:	f008 fabf 	bl	800b8c4 <puts>
          APP_DBG_MSG(" \n\r");
 8003346:	4809      	ldr	r0, [pc, #36]	; (800336c <P2PS_STM_App_Notification+0x104>)
 8003348:	f008 fa36 	bl	800b7b8 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800334c:	4b05      	ldr	r3, [pc, #20]	; (8003364 <P2PS_STM_App_Notification+0xfc>)
 800334e:	2200      	movs	r2, #0
 8003350:	709a      	strb	r2, [r3, #2]
      break;
 8003352:	e001      	b.n	8003358 <P2PS_STM_App_Notification+0xf0>
      break;
 8003354:	bf00      	nop
 8003356:	e000      	b.n	800335a <P2PS_STM_App_Notification+0xf2>
      break;
 8003358:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800335a:	bf00      	nop
}
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	200001dc 	.word	0x200001dc
 8003368:	0800d1f4 	.word	0x0800d1f4
 800336c:	0800d228 	.word	0x0800d228
 8003370:	0800d22c 	.word	0x0800d22c
 8003374:	0800d260 	.word	0x0800d260
 8003378:	0800d288 	.word	0x0800d288
 800337c:	0800d2b0 	.word	0x0800d2b0
 8003380:	0800d2d8 	.word	0x0800d2d8

08003384 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <P2PS_APP_Notification+0x1c>
 8003394:	2b01      	cmp	r3, #1
 8003396:	d000      	beq.n	800339a <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8003398:	e003      	b.n	80033a2 <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 800339a:	f000 f819 	bl	80033d0 <P2PS_APP_LED_BUTTON_context_Init>
    break;
 800339e:	e000      	b.n	80033a2 <P2PS_APP_Notification+0x1e>
    break;
 80033a0:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 80033a2:	bf00      	nop
}
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 80033b0:	4a05      	ldr	r2, [pc, #20]	; (80033c8 <P2PS_APP_Init+0x1c>)
 80033b2:	2100      	movs	r1, #0
 80033b4:	2008      	movs	r0, #8
 80033b6:	f008 f87b 	bl	800b4b0 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 80033ba:	4b04      	ldr	r3, [pc, #16]	; (80033cc <P2PS_APP_Init+0x20>)
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 80033c0:	f000 f806 	bl	80033d0 <P2PS_APP_LED_BUTTON_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 80033c4:	bf00      	nop
}
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	0800340d 	.word	0x0800340d
 80033cc:	200001dc 	.word	0x200001dc

080033d0 <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  
  BSP_LED_Off(LED_BLUE);
 80033d4:	2000      	movs	r0, #0
 80033d6:	f000 fbab 	bl	8003b30 <BSP_LED_Off>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 80033da:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80033dc:	2201      	movs	r2, #1
 80033de:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 80033e6:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 80033ec:	4b02      	ldr	r3, [pc, #8]	; (80033f8 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	200001dc 	.word	0x200001dc

080033fc <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8003400:	2100      	movs	r1, #0
 8003402:	2008      	movs	r0, #8
 8003404:	f008 f876 	bl	800b4f4 <UTIL_SEQ_SetTask>

  return;
 8003408:	bf00      	nop
}
 800340a:	bd80      	pop	{r7, pc}

0800340c <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0

  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 8003410:	4b47      	ldr	r3, [pc, #284]	; (8003530 <P2PS_Send_Notification+0x124>)
 8003412:	791b      	ldrb	r3, [r3, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d103      	bne.n	8003420 <P2PS_Send_Notification+0x14>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 8003418:	4b45      	ldr	r3, [pc, #276]	; (8003530 <P2PS_Send_Notification+0x124>)
 800341a:	2201      	movs	r2, #1
 800341c:	711a      	strb	r2, [r3, #4]
 800341e:	e002      	b.n	8003426 <P2PS_Send_Notification+0x1a>
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8003420:	4b43      	ldr	r3, [pc, #268]	; (8003530 <P2PS_Send_Notification+0x124>)
 8003422:	2200      	movs	r2, #0
 8003424:	711a      	strb	r2, [r3, #4]
  }

   if(P2P_Server_App_Context.Notification_Status){
 8003426:	4b42      	ldr	r3, [pc, #264]	; (8003530 <P2PS_Send_Notification+0x124>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d07a      	beq.n	8003524 <P2PS_Send_Notification+0x118>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
 800342e:	4841      	ldr	r0, [pc, #260]	; (8003534 <P2PS_Send_Notification+0x128>)
 8003430:	f008 f9c2 	bl	800b7b8 <iprintf>
    APP_DBG_MSG(" \n\r");
 8003434:	4840      	ldr	r0, [pc, #256]	; (8003538 <P2PS_Send_Notification+0x12c>)
 8003436:	f008 f9bf 	bl	800b7b8 <iprintf>

	if (battery_var <= 0) {
 800343a:	4b40      	ldr	r3, [pc, #256]	; (800353c <P2PS_Send_Notification+0x130>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d133      	bne.n	80034aa <P2PS_Send_Notification+0x9e>
		if (data[1] == 0x30){
 8003442:	4b3f      	ldr	r3, [pc, #252]	; (8003540 <P2PS_Send_Notification+0x134>)
 8003444:	785b      	ldrb	r3, [r3, #1]
 8003446:	2b30      	cmp	r3, #48	; 0x30
 8003448:	d109      	bne.n	800345e <P2PS_Send_Notification+0x52>
			data[0] = data[0] - 0x01;
 800344a:	4b3d      	ldr	r3, [pc, #244]	; (8003540 <P2PS_Send_Notification+0x134>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	3b01      	subs	r3, #1
 8003450:	b2da      	uxtb	r2, r3
 8003452:	4b3b      	ldr	r3, [pc, #236]	; (8003540 <P2PS_Send_Notification+0x134>)
 8003454:	701a      	strb	r2, [r3, #0]
			data[1] = 0x39;
 8003456:	4b3a      	ldr	r3, [pc, #232]	; (8003540 <P2PS_Send_Notification+0x134>)
 8003458:	2239      	movs	r2, #57	; 0x39
 800345a:	705a      	strb	r2, [r3, #1]
 800345c:	e005      	b.n	800346a <P2PS_Send_Notification+0x5e>
		}
		else {
			data[1] = data[1] - 0x01;
 800345e:	4b38      	ldr	r3, [pc, #224]	; (8003540 <P2PS_Send_Notification+0x134>)
 8003460:	785b      	ldrb	r3, [r3, #1]
 8003462:	3b01      	subs	r3, #1
 8003464:	b2da      	uxtb	r2, r3
 8003466:	4b36      	ldr	r3, [pc, #216]	; (8003540 <P2PS_Send_Notification+0x134>)
 8003468:	705a      	strb	r2, [r3, #1]
		}
		if(data[0] == 0x30 && data[1] == 0x30) {
 800346a:	4b35      	ldr	r3, [pc, #212]	; (8003540 <P2PS_Send_Notification+0x134>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b30      	cmp	r3, #48	; 0x30
 8003470:	d109      	bne.n	8003486 <P2PS_Send_Notification+0x7a>
 8003472:	4b33      	ldr	r3, [pc, #204]	; (8003540 <P2PS_Send_Notification+0x134>)
 8003474:	785b      	ldrb	r3, [r3, #1]
 8003476:	2b30      	cmp	r3, #48	; 0x30
 8003478:	d105      	bne.n	8003486 <P2PS_Send_Notification+0x7a>
			data[0] = 0x39;
 800347a:	4b31      	ldr	r3, [pc, #196]	; (8003540 <P2PS_Send_Notification+0x134>)
 800347c:	2239      	movs	r2, #57	; 0x39
 800347e:	701a      	strb	r2, [r3, #0]
			data[1] = 0x3A;
 8003480:	4b2f      	ldr	r3, [pc, #188]	; (8003540 <P2PS_Send_Notification+0x134>)
 8003482:	223a      	movs	r2, #58	; 0x3a
 8003484:	705a      	strb	r2, [r3, #1]
		}
		battery_var = rand()%5+1;
 8003486:	f008 fa25 	bl	800b8d4 <rand>
 800348a:	4602      	mov	r2, r0
 800348c:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <P2PS_Send_Notification+0x138>)
 800348e:	fb83 1302 	smull	r1, r3, r3, r2
 8003492:	1059      	asrs	r1, r3, #1
 8003494:	17d3      	asrs	r3, r2, #31
 8003496:	1ac9      	subs	r1, r1, r3
 8003498:	460b      	mov	r3, r1
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	1ad1      	subs	r1, r2, r3
 80034a0:	b2cb      	uxtb	r3, r1
 80034a2:	3301      	adds	r3, #1
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	4b25      	ldr	r3, [pc, #148]	; (800353c <P2PS_Send_Notification+0x130>)
 80034a8:	701a      	strb	r2, [r3, #0]
	}
	battery_var-=1;
 80034aa:	4b24      	ldr	r3, [pc, #144]	; (800353c <P2PS_Send_Notification+0x130>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	4b22      	ldr	r3, [pc, #136]	; (800353c <P2PS_Send_Notification+0x130>)
 80034b4:	701a      	strb	r2, [r3, #0]

    if(P2P_Server_App_Context.LedControl.Led1 == 0x01) {
 80034b6:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <P2PS_Send_Notification+0x124>)
 80034b8:	789b      	ldrb	r3, [r3, #2]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d12c      	bne.n	8003518 <P2PS_Send_Notification+0x10c>
    	data[5] -= 0x02;
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <P2PS_Send_Notification+0x134>)
 80034c0:	795b      	ldrb	r3, [r3, #5]
 80034c2:	3b02      	subs	r3, #2
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <P2PS_Send_Notification+0x134>)
 80034c8:	715a      	strb	r2, [r3, #5]
    	if (data[5] <= 0x2F) {
 80034ca:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <P2PS_Send_Notification+0x134>)
 80034cc:	795b      	ldrb	r3, [r3, #5]
 80034ce:	2b2f      	cmp	r3, #47	; 0x2f
 80034d0:	d808      	bhi.n	80034e4 <P2PS_Send_Notification+0xd8>
    		data[5] = 0x39;
 80034d2:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <P2PS_Send_Notification+0x134>)
 80034d4:	2239      	movs	r2, #57	; 0x39
 80034d6:	715a      	strb	r2, [r3, #5]
    		data[4] -= 0x01;
 80034d8:	4b19      	ldr	r3, [pc, #100]	; (8003540 <P2PS_Send_Notification+0x134>)
 80034da:	791b      	ldrb	r3, [r3, #4]
 80034dc:	3b01      	subs	r3, #1
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	4b17      	ldr	r3, [pc, #92]	; (8003540 <P2PS_Send_Notification+0x134>)
 80034e2:	711a      	strb	r2, [r3, #4]
    	}
    	if (data[4] <= 0x2F) {
 80034e4:	4b16      	ldr	r3, [pc, #88]	; (8003540 <P2PS_Send_Notification+0x134>)
 80034e6:	791b      	ldrb	r3, [r3, #4]
 80034e8:	2b2f      	cmp	r3, #47	; 0x2f
 80034ea:	d808      	bhi.n	80034fe <P2PS_Send_Notification+0xf2>
    		data[4] = 0x39;
 80034ec:	4b14      	ldr	r3, [pc, #80]	; (8003540 <P2PS_Send_Notification+0x134>)
 80034ee:	2239      	movs	r2, #57	; 0x39
 80034f0:	711a      	strb	r2, [r3, #4]
    		data[3] -= 0x01;
 80034f2:	4b13      	ldr	r3, [pc, #76]	; (8003540 <P2PS_Send_Notification+0x134>)
 80034f4:	78db      	ldrb	r3, [r3, #3]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	4b11      	ldr	r3, [pc, #68]	; (8003540 <P2PS_Send_Notification+0x134>)
 80034fc:	70da      	strb	r2, [r3, #3]
    	}
    	if (data[3] <= 0x2F) {
 80034fe:	4b10      	ldr	r3, [pc, #64]	; (8003540 <P2PS_Send_Notification+0x134>)
 8003500:	78db      	ldrb	r3, [r3, #3]
 8003502:	2b2f      	cmp	r3, #47	; 0x2f
 8003504:	d808      	bhi.n	8003518 <P2PS_Send_Notification+0x10c>
    		data[3] = 0x32;
 8003506:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <P2PS_Send_Notification+0x134>)
 8003508:	2232      	movs	r2, #50	; 0x32
 800350a:	70da      	strb	r2, [r3, #3]
    		data[4] = 0x35;
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <P2PS_Send_Notification+0x134>)
 800350e:	2235      	movs	r2, #53	; 0x35
 8003510:	711a      	strb	r2, [r3, #4]
    		data[5] = 0x36;
 8003512:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <P2PS_Send_Notification+0x134>)
 8003514:	2236      	movs	r2, #54	; 0x36
 8003516:	715a      	strb	r2, [r3, #5]
    	}
    }
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)data);
 8003518:	4909      	ldr	r1, [pc, #36]	; (8003540 <P2PS_Send_Notification+0x134>)
 800351a:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800351e:	f006 fc2f 	bl	8009d80 <P2PS_STM_App_Update_Char>

   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
   }

  return;
 8003522:	e003      	b.n	800352c <P2PS_Send_Notification+0x120>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
 8003524:	4808      	ldr	r0, [pc, #32]	; (8003548 <P2PS_Send_Notification+0x13c>)
 8003526:	f008 f947 	bl	800b7b8 <iprintf>
  return;
 800352a:	bf00      	nop
}
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	200001dc 	.word	0x200001dc
 8003534:	0800d300 	.word	0x0800d300
 8003538:	0800d228 	.word	0x0800d228
 800353c:	20000026 	.word	0x20000026
 8003540:	20000020 	.word	0x20000020
 8003544:	66666667 	.word	0x66666667
 8003548:	0800d340 	.word	0x0800d340

0800354c <LL_PWR_EnableBootC2>:
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <LL_PWR_EnableBootC2+0x1c>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a04      	ldr	r2, [pc, #16]	; (8003568 <LL_PWR_EnableBootC2+0x1c>)
 8003556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800355a:	60d3      	str	r3, [r2, #12]
}
 800355c:	bf00      	nop
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	58000400 	.word	0x58000400

0800356c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003576:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800357a:	4905      	ldr	r1, [pc, #20]	; (8003590 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	58000800 	.word	0x58000800

08003594 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800359e:	6a1a      	ldr	r2, [r3, #32]
 80035a0:	4904      	ldr	r1, [pc, #16]	; (80035b4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	620b      	str	r3, [r1, #32]
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	58000800 	.word	0x58000800

080035b8 <LL_AHB3_GRP1_EnableClock>:
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80035c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80035d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4013      	ands	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035dc:	68fb      	ldr	r3, [r7, #12]
}
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b085      	sub	sp, #20
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80035f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80035fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8003606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4013      	ands	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003614:	68fb      	ldr	r3, [r7, #12]
}
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <LL_C1_IPCC_EnableIT_TXF>:
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	601a      	str	r2, [r3, #0]
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <LL_C1_IPCC_EnableIT_RXO>:
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f043 0201 	orr.w	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	601a      	str	r2, [r3, #0]
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	041b      	lsls	r3, r3, #16
 8003674:	43db      	mvns	r3, r3
 8003676:	401a      	ands	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	605a      	str	r2, [r3, #4]
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	041b      	lsls	r3, r3, #16
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	605a      	str	r2, [r3, #4]
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <LL_C1_IPCC_EnableReceiveChannel>:
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	43db      	mvns	r3, r3
 80036be:	401a      	ands	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	605a      	str	r2, [r3, #4]
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	609a      	str	r2, [r3, #8]
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <LL_C1_IPCC_SetFlag_CHx>:
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	041a      	lsls	r2, r3, #16
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	609a      	str	r2, [r3, #8]
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4013      	ands	r3, r2
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d101      	bne.n	8003726 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	4013      	ands	r3, r2
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d101      	bne.n	8003750 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
	...

08003760 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8003764:	2102      	movs	r1, #2
 8003766:	4819      	ldr	r0, [pc, #100]	; (80037cc <HW_IPCC_Rx_Handler+0x6c>)
 8003768:	f7ff ffe4 	bl	8003734 <LL_C2_IPCC_IsActiveFlag_CHx>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d009      	beq.n	8003786 <HW_IPCC_Rx_Handler+0x26>
 8003772:	4b16      	ldr	r3, [pc, #88]	; (80037cc <HW_IPCC_Rx_Handler+0x6c>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	43db      	mvns	r3, r3
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8003780:	f000 f8da 	bl	8003938 <HW_IPCC_SYS_EvtHandler>
 8003784:	e01f      	b.n	80037c6 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8003786:	2101      	movs	r1, #1
 8003788:	4810      	ldr	r0, [pc, #64]	; (80037cc <HW_IPCC_Rx_Handler+0x6c>)
 800378a:	f7ff ffd3 	bl	8003734 <LL_C2_IPCC_IsActiveFlag_CHx>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HW_IPCC_Rx_Handler+0x46>
 8003794:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <HW_IPCC_Rx_Handler+0x6c>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d102      	bne.n	80037a6 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80037a0:	f000 f88e 	bl	80038c0 <HW_IPCC_BLE_EvtHandler>
 80037a4:	e00f      	b.n	80037c6 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80037a6:	2108      	movs	r1, #8
 80037a8:	4808      	ldr	r0, [pc, #32]	; (80037cc <HW_IPCC_Rx_Handler+0x6c>)
 80037aa:	f7ff ffc3 	bl	8003734 <LL_C2_IPCC_IsActiveFlag_CHx>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d009      	beq.n	80037c8 <HW_IPCC_Rx_Handler+0x68>
 80037b4:	4b05      	ldr	r3, [pc, #20]	; (80037cc <HW_IPCC_Rx_Handler+0x6c>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80037c2:	f000 f905 	bl	80039d0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80037c6:	bf00      	nop
 80037c8:	bf00      	nop
}
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	58000c00 	.word	0x58000c00

080037d0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80037d4:	2102      	movs	r1, #2
 80037d6:	481a      	ldr	r0, [pc, #104]	; (8003840 <HW_IPCC_Tx_Handler+0x70>)
 80037d8:	f7ff ff97 	bl	800370a <LL_C1_IPCC_IsActiveFlag_CHx>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <HW_IPCC_Tx_Handler+0x26>
 80037e2:	4b17      	ldr	r3, [pc, #92]	; (8003840 <HW_IPCC_Tx_Handler+0x70>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80037f0:	f000 f896 	bl	8003920 <HW_IPCC_SYS_CmdEvtHandler>
 80037f4:	e020      	b.n	8003838 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80037f6:	2108      	movs	r1, #8
 80037f8:	4811      	ldr	r0, [pc, #68]	; (8003840 <HW_IPCC_Tx_Handler+0x70>)
 80037fa:	f7ff ff86 	bl	800370a <LL_C1_IPCC_IsActiveFlag_CHx>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d109      	bne.n	8003818 <HW_IPCC_Tx_Handler+0x48>
 8003804:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <HW_IPCC_Tx_Handler+0x70>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	43db      	mvns	r3, r3
 800380a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8003812:	f000 f8bf 	bl	8003994 <HW_IPCC_MM_FreeBufHandler>
 8003816:	e00f      	b.n	8003838 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8003818:	2120      	movs	r1, #32
 800381a:	4809      	ldr	r0, [pc, #36]	; (8003840 <HW_IPCC_Tx_Handler+0x70>)
 800381c:	f7ff ff75 	bl	800370a <LL_C1_IPCC_IsActiveFlag_CHx>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d109      	bne.n	800383a <HW_IPCC_Tx_Handler+0x6a>
 8003826:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HW_IPCC_Tx_Handler+0x70>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	43db      	mvns	r3, r3
 800382c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8003834:	f000 f850 	bl	80038d8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8003838:	bf00      	nop
 800383a:	bf00      	nop
}
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	58000c00 	.word	0x58000c00

08003844 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8003848:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800384c:	f7ff fecd 	bl	80035ea <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8003850:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003854:	f7ff fe8a 	bl	800356c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8003858:	f44f 7000 	mov.w	r0, #512	; 0x200
 800385c:	f7ff fe9a 	bl	8003594 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8003860:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8003862:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8003864:	f7ff fe72 	bl	800354c <LL_PWR_EnableBootC2>

  return;
 8003868:	bf00      	nop
}
 800386a:	bd80      	pop	{r7, pc}

0800386c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8003870:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003874:	f7ff fea0 	bl	80035b8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8003878:	4806      	ldr	r0, [pc, #24]	; (8003894 <HW_IPCC_Init+0x28>)
 800387a:	f7ff fee2 	bl	8003642 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800387e:	4805      	ldr	r0, [pc, #20]	; (8003894 <HW_IPCC_Init+0x28>)
 8003880:	f7ff fecf 	bl	8003622 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003884:	202c      	movs	r0, #44	; 0x2c
 8003886:	f000 fc46 	bl	8004116 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800388a:	202d      	movs	r0, #45	; 0x2d
 800388c:	f000 fc43 	bl	8004116 <HAL_NVIC_EnableIRQ>

  return;
 8003890:	bf00      	nop
}
 8003892:	bd80      	pop	{r7, pc}
 8003894:	58000c00 	.word	0x58000c00

08003898 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800389c:	2101      	movs	r1, #1
 800389e:	4802      	ldr	r0, [pc, #8]	; (80038a8 <HW_IPCC_BLE_Init+0x10>)
 80038a0:	f7ff ff04 	bl	80036ac <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80038a4:	bf00      	nop
}
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	58000c00 	.word	0x58000c00

080038ac <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80038b0:	2101      	movs	r1, #1
 80038b2:	4802      	ldr	r0, [pc, #8]	; (80038bc <HW_IPCC_BLE_SendCmd+0x10>)
 80038b4:	f7ff ff1a 	bl	80036ec <LL_C1_IPCC_SetFlag_CHx>

  return;
 80038b8:	bf00      	nop
}
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	58000c00 	.word	0x58000c00

080038c0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80038c4:	f007 fb10 	bl	800aee8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80038c8:	2101      	movs	r1, #1
 80038ca:	4802      	ldr	r0, [pc, #8]	; (80038d4 <HW_IPCC_BLE_EvtHandler+0x14>)
 80038cc:	f7ff ff00 	bl	80036d0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80038d0:	bf00      	nop
}
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	58000c00 	.word	0x58000c00

080038d8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80038dc:	2120      	movs	r1, #32
 80038de:	4803      	ldr	r0, [pc, #12]	; (80038ec <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80038e0:	f7ff fed2 	bl	8003688 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80038e4:	f007 fb30 	bl	800af48 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80038e8:	bf00      	nop
}
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	58000c00 	.word	0x58000c00

080038f0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80038f4:	2102      	movs	r1, #2
 80038f6:	4802      	ldr	r0, [pc, #8]	; (8003900 <HW_IPCC_SYS_Init+0x10>)
 80038f8:	f7ff fed8 	bl	80036ac <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80038fc:	bf00      	nop
}
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	58000c00 	.word	0x58000c00

08003904 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003908:	2102      	movs	r1, #2
 800390a:	4804      	ldr	r0, [pc, #16]	; (800391c <HW_IPCC_SYS_SendCmd+0x18>)
 800390c:	f7ff feee 	bl	80036ec <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003910:	2102      	movs	r1, #2
 8003912:	4802      	ldr	r0, [pc, #8]	; (800391c <HW_IPCC_SYS_SendCmd+0x18>)
 8003914:	f7ff fea5 	bl	8003662 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8003918:	bf00      	nop
}
 800391a:	bd80      	pop	{r7, pc}
 800391c:	58000c00 	.word	0x58000c00

08003920 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003924:	2102      	movs	r1, #2
 8003926:	4803      	ldr	r0, [pc, #12]	; (8003934 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8003928:	f7ff feae 	bl	8003688 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800392c:	f007 fb5c 	bl	800afe8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8003930:	bf00      	nop
}
 8003932:	bd80      	pop	{r7, pc}
 8003934:	58000c00 	.word	0x58000c00

08003938 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800393c:	f007 fb6a 	bl	800b014 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003940:	2102      	movs	r1, #2
 8003942:	4802      	ldr	r0, [pc, #8]	; (800394c <HW_IPCC_SYS_EvtHandler+0x14>)
 8003944:	f7ff fec4 	bl	80036d0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003948:	bf00      	nop
}
 800394a:	bd80      	pop	{r7, pc}
 800394c:	58000c00 	.word	0x58000c00

08003950 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8003958:	2108      	movs	r1, #8
 800395a:	480c      	ldr	r0, [pc, #48]	; (800398c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800395c:	f7ff fed5 	bl	800370a <LL_C1_IPCC_IsActiveFlag_CHx>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d007      	beq.n	8003976 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8003966:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800396c:	2108      	movs	r1, #8
 800396e:	4807      	ldr	r0, [pc, #28]	; (800398c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003970:	f7ff fe77 	bl	8003662 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8003974:	e006      	b.n	8003984 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800397a:	2108      	movs	r1, #8
 800397c:	4803      	ldr	r0, [pc, #12]	; (800398c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800397e:	f7ff feb5 	bl	80036ec <LL_C1_IPCC_SetFlag_CHx>
  return;
 8003982:	bf00      	nop
}
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	58000c00 	.word	0x58000c00
 8003990:	200004b8 	.word	0x200004b8

08003994 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003998:	2108      	movs	r1, #8
 800399a:	4806      	ldr	r0, [pc, #24]	; (80039b4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800399c:	f7ff fe74 	bl	8003688 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80039a0:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80039a6:	2108      	movs	r1, #8
 80039a8:	4802      	ldr	r0, [pc, #8]	; (80039b4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80039aa:	f7ff fe9f 	bl	80036ec <LL_C1_IPCC_SetFlag_CHx>

  return;
 80039ae:	bf00      	nop
}
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	58000c00 	.word	0x58000c00
 80039b8:	200004b8 	.word	0x200004b8

080039bc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80039c0:	2108      	movs	r1, #8
 80039c2:	4802      	ldr	r0, [pc, #8]	; (80039cc <HW_IPCC_TRACES_Init+0x10>)
 80039c4:	f7ff fe72 	bl	80036ac <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80039c8:	bf00      	nop
}
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	58000c00 	.word	0x58000c00

080039d0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80039d4:	f007 fbc6 	bl	800b164 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80039d8:	2108      	movs	r1, #8
 80039da:	4802      	ldr	r0, [pc, #8]	; (80039e4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80039dc:	f7ff fe78 	bl	80036d0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80039e0:	bf00      	nop
}
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	58000c00 	.word	0x58000c00

080039e8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80039e8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039ea:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039ec:	3304      	adds	r3, #4

080039ee <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039ee:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039f0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80039f2:	d3f9      	bcc.n	80039e8 <CopyDataInit>
  bx lr
 80039f4:	4770      	bx	lr

080039f6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80039f6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80039f8:	3004      	adds	r0, #4

080039fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80039fa:	4288      	cmp	r0, r1
  bcc FillZerobss
 80039fc:	d3fb      	bcc.n	80039f6 <FillZerobss>
  bx lr
 80039fe:	4770      	bx	lr

08003a00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a00:	480c      	ldr	r0, [pc, #48]	; (8003a34 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003a02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003a04:	480c      	ldr	r0, [pc, #48]	; (8003a38 <LoopForever+0x8>)
 8003a06:	490d      	ldr	r1, [pc, #52]	; (8003a3c <LoopForever+0xc>)
 8003a08:	4a0d      	ldr	r2, [pc, #52]	; (8003a40 <LoopForever+0x10>)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f7ff ffef 	bl	80039ee <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003a10:	480c      	ldr	r0, [pc, #48]	; (8003a44 <LoopForever+0x14>)
 8003a12:	490d      	ldr	r1, [pc, #52]	; (8003a48 <LoopForever+0x18>)
 8003a14:	2300      	movs	r3, #0
 8003a16:	f7ff fff0 	bl	80039fa <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003a1a:	480c      	ldr	r0, [pc, #48]	; (8003a4c <LoopForever+0x1c>)
 8003a1c:	490c      	ldr	r1, [pc, #48]	; (8003a50 <LoopForever+0x20>)
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f7ff ffeb 	bl	80039fa <LoopFillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a24:	f000 f90e 	bl	8003c44 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003a28:	f007 fe8c 	bl	800b744 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003a2c:	f7fe fa3a 	bl	8001ea4 <main>

08003a30 <LoopForever>:

LoopForever:
  b LoopForever
 8003a30:	e7fe      	b.n	8003a30 <LoopForever>
 8003a32:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003a34:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003a38:	20000008 	.word	0x20000008
 8003a3c:	200000b8 	.word	0x200000b8
 8003a40:	0800d784 	.word	0x0800d784
  INIT_BSS _sbss, _ebss
 8003a44:	20000220 	.word	0x20000220
 8003a48:	20001604 	.word	0x20001604
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003a4c:	200301e0 	.word	0x200301e0
 8003a50:	20030a57 	.word	0x20030a57

08003a54 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a54:	e7fe      	b.n	8003a54 <ADC1_IRQHandler>

08003a56 <LL_AHB2_GRP1_EnableClock>:
{
 8003a56:	b480      	push	{r7}
 8003a58:	b085      	sub	sp, #20
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4013      	ands	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
}
 8003a7c:	bf00      	nop
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8003a92:	f107 030c 	add.w	r3, r7, #12
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	605a      	str	r2, [r3, #4]
 8003a9c:	609a      	str	r2, [r3, #8]
 8003a9e:	60da      	str	r2, [r3, #12]
 8003aa0:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003aa2:	2002      	movs	r0, #2
 8003aa4:	f7ff ffd7 	bl	8003a56 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	4a12      	ldr	r2, [pc, #72]	; (8003af4 <BSP_LED_Init+0x6c>)
 8003aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ab0:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003aba:	2302      	movs	r3, #2
 8003abc:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	4a0d      	ldr	r2, [pc, #52]	; (8003af8 <BSP_LED_Init+0x70>)
 8003ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac6:	f107 020c 	add.w	r2, r7, #12
 8003aca:	4611      	mov	r1, r2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fed9 	bl	8004884 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	4a08      	ldr	r2, [pc, #32]	; (8003af8 <BSP_LED_Init+0x70>)
 8003ad6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	4a05      	ldr	r2, [pc, #20]	; (8003af4 <BSP_LED_Init+0x6c>)
 8003ade:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f001 f83d 	bl	8004b64 <HAL_GPIO_WritePin>
}
 8003aea:	bf00      	nop
 8003aec:	3720      	adds	r7, #32
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	0800d540 	.word	0x0800d540
 8003af8:	20000028 	.word	0x20000028

08003afc <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	4a07      	ldr	r2, [pc, #28]	; (8003b28 <BSP_LED_On+0x2c>)
 8003b0a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	4a06      	ldr	r2, [pc, #24]	; (8003b2c <BSP_LED_On+0x30>)
 8003b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b16:	2201      	movs	r2, #1
 8003b18:	4619      	mov	r1, r3
 8003b1a:	f001 f823 	bl	8004b64 <HAL_GPIO_WritePin>
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000028 	.word	0x20000028
 8003b2c:	0800d540 	.word	0x0800d540

08003b30 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	4a07      	ldr	r2, [pc, #28]	; (8003b5c <BSP_LED_Off+0x2c>)
 8003b3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	4a06      	ldr	r2, [pc, #24]	; (8003b60 <BSP_LED_Off+0x30>)
 8003b46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	f001 f809 	bl	8004b64 <HAL_GPIO_WritePin>
}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000028 	.word	0x20000028
 8003b60:	0800d540 	.word	0x0800d540

08003b64 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	460a      	mov	r2, r1
 8003b6e:	71fb      	strb	r3, [r7, #7]
 8003b70:	4613      	mov	r3, r2
 8003b72:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8003b74:	f107 030c 	add.w	r3, r7, #12
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <BSP_PB_Init+0x2e>
 8003b8a:	2004      	movs	r0, #4
 8003b8c:	f7ff ff63 	bl	8003a56 <LL_AHB2_GRP1_EnableClock>
 8003b90:	e00c      	b.n	8003bac <BSP_PB_Init+0x48>
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d103      	bne.n	8003ba0 <BSP_PB_Init+0x3c>
 8003b98:	2008      	movs	r0, #8
 8003b9a:	f7ff ff5c 	bl	8003a56 <LL_AHB2_GRP1_EnableClock>
 8003b9e:	e005      	b.n	8003bac <BSP_PB_Init+0x48>
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d102      	bne.n	8003bac <BSP_PB_Init+0x48>
 8003ba6:	2008      	movs	r0, #8
 8003ba8:	f7ff ff55 	bl	8003a56 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8003bac:	79bb      	ldrb	r3, [r7, #6]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d117      	bne.n	8003be2 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	4a20      	ldr	r2, [pc, #128]	; (8003c38 <BSP_PB_Init+0xd4>)
 8003bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bba:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	4a1c      	ldr	r2, [pc, #112]	; (8003c3c <BSP_PB_Init+0xd8>)
 8003bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd0:	f107 020c 	add.w	r2, r7, #12
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fe54 	bl	8004884 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8003bdc:	2001      	movs	r0, #1
 8003bde:	f7fd f961 	bl	8000ea4 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8003be2:	79bb      	ldrb	r3, [r7, #6]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d123      	bne.n	8003c30 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	4a13      	ldr	r2, [pc, #76]	; (8003c38 <BSP_PB_Init+0xd4>)
 8003bec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bf0:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8003bf6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003bfa:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	4a0f      	ldr	r2, [pc, #60]	; (8003c3c <BSP_PB_Init+0xd8>)
 8003c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c04:	f107 020c 	add.w	r2, r7, #12
 8003c08:	4611      	mov	r1, r2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fe3a 	bl	8004884 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003c10:	79fb      	ldrb	r3, [r7, #7]
 8003c12:	4a0b      	ldr	r2, [pc, #44]	; (8003c40 <BSP_PB_Init+0xdc>)
 8003c14:	5cd3      	ldrb	r3, [r2, r3]
 8003c16:	b25b      	sxtb	r3, r3
 8003c18:	2200      	movs	r2, #0
 8003c1a:	210f      	movs	r1, #15
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fa60 	bl	80040e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	4a06      	ldr	r2, [pc, #24]	; (8003c40 <BSP_PB_Init+0xdc>)
 8003c26:	5cd3      	ldrb	r3, [r2, r3]
 8003c28:	b25b      	sxtb	r3, r3
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fa73 	bl	8004116 <HAL_NVIC_EnableIRQ>
  }
}
 8003c30:	bf00      	nop
 8003c32:	3720      	adds	r7, #32
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	0800d548 	.word	0x0800d548
 8003c3c:	20000034 	.word	0x20000034
 8003c40:	0800d550 	.word	0x0800d550

08003c44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003c48:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <SystemInit+0xa0>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003c4e:	4b25      	ldr	r3, [pc, #148]	; (8003ce4 <SystemInit+0xa0>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c54:	4a23      	ldr	r2, [pc, #140]	; (8003ce4 <SystemInit+0xa0>)
 8003c56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c72:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003c76:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c82:	4b19      	ldr	r3, [pc, #100]	; (8003ce8 <SystemInit+0xa4>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c94:	f023 0305 	bic.w	r3, r3, #5
 8003c98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca8:	f023 0301 	bic.w	r3, r3, #1
 8003cac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb4:	4a0d      	ldr	r2, [pc, #52]	; (8003cec <SystemInit+0xa8>)
 8003cb6:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cbc:	4a0b      	ldr	r2, [pc, #44]	; (8003cec <SystemInit+0xa8>)
 8003cbe:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	619a      	str	r2, [r3, #24]
}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	e000ed00 	.word	0xe000ed00
 8003ce8:	faf6fefb 	.word	0xfaf6fefb
 8003cec:	22041000 	.word	0x22041000

08003cf0 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6053      	str	r3, [r2, #4]
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	e0042000 	.word	0xe0042000

08003d10 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003d1a:	f043 0302 	orr.w	r3, r3, #2
 8003d1e:	6053      	str	r3, [r2, #4]
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	e0042000 	.word	0xe0042000

08003d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <HAL_Init+0x3c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a0b      	ldr	r2, [pc, #44]	; (8003d6c <HAL_Init+0x3c>)
 8003d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d46:	2003      	movs	r0, #3
 8003d48:	f000 f9c0 	bl	80040cc <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	f000 f80f 	bl	8003d70 <HAL_InitTick>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	71fb      	strb	r3, [r7, #7]
 8003d5c:	e001      	b.n	8003d62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d5e:	f7fe faae 	bl	80022be <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d62:	79fb      	ldrb	r3, [r7, #7]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	58004000 	.word	0x58004000

08003d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003d7c:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <HAL_InitTick+0x6c>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d024      	beq.n	8003dce <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003d84:	f002 f896 	bl	8005eb4 <HAL_RCC_GetHCLKFreq>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	4b14      	ldr	r3, [pc, #80]	; (8003ddc <HAL_InitTick+0x6c>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	4619      	mov	r1, r3
 8003d90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d94:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 f9d6 	bl	800414e <HAL_SYSTICK_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10f      	bne.n	8003dc8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b0f      	cmp	r3, #15
 8003dac:	d809      	bhi.n	8003dc2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dae:	2200      	movs	r2, #0
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	f04f 30ff 	mov.w	r0, #4294967295
 8003db6:	f000 f994 	bl	80040e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003dba:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <HAL_InitTick+0x70>)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	e007      	b.n	8003dd2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
 8003dc6:	e004      	b.n	8003dd2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
 8003dcc:	e001      	b.n	8003dd2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20000048 	.word	0x20000048
 8003de0:	20000044 	.word	0x20000044

08003de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_IncTick+0x20>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <HAL_IncTick+0x24>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4413      	add	r3, r2
 8003df4:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <HAL_IncTick+0x24>)
 8003df6:	6013      	str	r3, [r2, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	20000048 	.word	0x20000048
 8003e08:	200004bc 	.word	0x200004bc

08003e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e10:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <HAL_GetTick+0x14>)
 8003e12:	681b      	ldr	r3, [r3, #0]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	200004bc 	.word	0x200004bc

08003e24 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <HAL_GetTickPrio+0x14>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000044 	.word	0x20000044

08003e3c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003e40:	4b03      	ldr	r3, [pc, #12]	; (8003e50 <HAL_GetTickFreq+0x14>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20000048 	.word	0x20000048

08003e54 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003e58:	f7ff ff4a 	bl	8003cf0 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003e5c:	bf00      	nop
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003e64:	f7ff ff54 	bl	8003d10 <LL_DBGMCU_EnableDBGStopMode>
}
 8003e68:	bf00      	nop
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e7c:	4b0c      	ldr	r3, [pc, #48]	; (8003eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e88:	4013      	ands	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e9e:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	60d3      	str	r3, [r2, #12]
}
 8003ea4:	bf00      	nop
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	e000ed00 	.word	0xe000ed00

08003eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <__NVIC_GetPriorityGrouping+0x18>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	0a1b      	lsrs	r3, r3, #8
 8003ebe:	f003 0307 	and.w	r3, r3, #7
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	e000ed00 	.word	0xe000ed00

08003ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	db0b      	blt.n	8003efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ee2:	79fb      	ldrb	r3, [r7, #7]
 8003ee4:	f003 021f 	and.w	r2, r3, #31
 8003ee8:	4907      	ldr	r1, [pc, #28]	; (8003f08 <__NVIC_EnableIRQ+0x38>)
 8003eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	2001      	movs	r0, #1
 8003ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	e000e100 	.word	0xe000e100

08003f0c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	4603      	mov	r3, r0
 8003f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	db12      	blt.n	8003f44 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	f003 021f 	and.w	r2, r3, #31
 8003f24:	490a      	ldr	r1, [pc, #40]	; (8003f50 <__NVIC_DisableIRQ+0x44>)
 8003f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f32:	3320      	adds	r3, #32
 8003f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f38:	f3bf 8f4f 	dsb	sy
}
 8003f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f3e:	f3bf 8f6f 	isb	sy
}
 8003f42:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	e000e100 	.word	0xe000e100

08003f54 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	db0c      	blt.n	8003f80 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f66:	79fb      	ldrb	r3, [r7, #7]
 8003f68:	f003 021f 	and.w	r2, r3, #31
 8003f6c:	4907      	ldr	r1, [pc, #28]	; (8003f8c <__NVIC_SetPendingIRQ+0x38>)
 8003f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	2001      	movs	r0, #1
 8003f76:	fa00 f202 	lsl.w	r2, r0, r2
 8003f7a:	3340      	adds	r3, #64	; 0x40
 8003f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	e000e100 	.word	0xe000e100

08003f90 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	db0c      	blt.n	8003fbc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	f003 021f 	and.w	r2, r3, #31
 8003fa8:	4907      	ldr	r1, [pc, #28]	; (8003fc8 <__NVIC_ClearPendingIRQ+0x38>)
 8003faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fb6:	3360      	adds	r3, #96	; 0x60
 8003fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	e000e100 	.word	0xe000e100

08003fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	6039      	str	r1, [r7, #0]
 8003fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	db0a      	blt.n	8003ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	490c      	ldr	r1, [pc, #48]	; (8004018 <__NVIC_SetPriority+0x4c>)
 8003fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fea:	0112      	lsls	r2, r2, #4
 8003fec:	b2d2      	uxtb	r2, r2
 8003fee:	440b      	add	r3, r1
 8003ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ff4:	e00a      	b.n	800400c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	4908      	ldr	r1, [pc, #32]	; (800401c <__NVIC_SetPriority+0x50>)
 8003ffc:	79fb      	ldrb	r3, [r7, #7]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	3b04      	subs	r3, #4
 8004004:	0112      	lsls	r2, r2, #4
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	440b      	add	r3, r1
 800400a:	761a      	strb	r2, [r3, #24]
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	e000e100 	.word	0xe000e100
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004020:	b480      	push	{r7}
 8004022:	b089      	sub	sp, #36	; 0x24
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f1c3 0307 	rsb	r3, r3, #7
 800403a:	2b04      	cmp	r3, #4
 800403c:	bf28      	it	cs
 800403e:	2304      	movcs	r3, #4
 8004040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	3304      	adds	r3, #4
 8004046:	2b06      	cmp	r3, #6
 8004048:	d902      	bls.n	8004050 <NVIC_EncodePriority+0x30>
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	3b03      	subs	r3, #3
 800404e:	e000      	b.n	8004052 <NVIC_EncodePriority+0x32>
 8004050:	2300      	movs	r3, #0
 8004052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004054:	f04f 32ff 	mov.w	r2, #4294967295
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43da      	mvns	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	401a      	ands	r2, r3
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004068:	f04f 31ff 	mov.w	r1, #4294967295
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	fa01 f303 	lsl.w	r3, r1, r3
 8004072:	43d9      	mvns	r1, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004078:	4313      	orrs	r3, r2
         );
}
 800407a:	4618      	mov	r0, r3
 800407c:	3724      	adds	r7, #36	; 0x24
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
	...

08004088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3b01      	subs	r3, #1
 8004094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004098:	d301      	bcc.n	800409e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800409a:	2301      	movs	r3, #1
 800409c:	e00f      	b.n	80040be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800409e:	4a0a      	ldr	r2, [pc, #40]	; (80040c8 <SysTick_Config+0x40>)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040a6:	210f      	movs	r1, #15
 80040a8:	f04f 30ff 	mov.w	r0, #4294967295
 80040ac:	f7ff ff8e 	bl	8003fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <SysTick_Config+0x40>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040b6:	4b04      	ldr	r3, [pc, #16]	; (80040c8 <SysTick_Config+0x40>)
 80040b8:	2207      	movs	r2, #7
 80040ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	e000e010 	.word	0xe000e010

080040cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff fec9 	bl	8003e6c <__NVIC_SetPriorityGrouping>
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b086      	sub	sp, #24
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	4603      	mov	r3, r0
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040f0:	f7ff fee0 	bl	8003eb4 <__NVIC_GetPriorityGrouping>
 80040f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	6978      	ldr	r0, [r7, #20]
 80040fc:	f7ff ff90 	bl	8004020 <NVIC_EncodePriority>
 8004100:	4602      	mov	r2, r0
 8004102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004106:	4611      	mov	r1, r2
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff ff5f 	bl	8003fcc <__NVIC_SetPriority>
}
 800410e:	bf00      	nop
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	4603      	mov	r3, r0
 800411e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff fed3 	bl	8003ed0 <__NVIC_EnableIRQ>
}
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	4603      	mov	r3, r0
 800413a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800413c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fee3 	bl	8003f0c <__NVIC_DisableIRQ>
}
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff ff96 	bl	8004088 <SysTick_Config>
 800415c:	4603      	mov	r3, r0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	4603      	mov	r3, r0
 800416e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff feed 	bl	8003f54 <__NVIC_SetPendingIRQ>
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	4603      	mov	r3, r0
 800418a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800418c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fefd 	bl	8003f90 <__NVIC_ClearPendingIRQ>
}
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e08e      	b.n	80042d0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	4b47      	ldr	r3, [pc, #284]	; (80042d8 <HAL_DMA_Init+0x138>)
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d80f      	bhi.n	80041de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	4b45      	ldr	r3, [pc, #276]	; (80042dc <HAL_DMA_Init+0x13c>)
 80041c6:	4413      	add	r3, r2
 80041c8:	4a45      	ldr	r2, [pc, #276]	; (80042e0 <HAL_DMA_Init+0x140>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	009a      	lsls	r2, r3, #2
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a42      	ldr	r2, [pc, #264]	; (80042e4 <HAL_DMA_Init+0x144>)
 80041da:	641a      	str	r2, [r3, #64]	; 0x40
 80041dc:	e00e      	b.n	80041fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	4b40      	ldr	r3, [pc, #256]	; (80042e8 <HAL_DMA_Init+0x148>)
 80041e6:	4413      	add	r3, r2
 80041e8:	4a3d      	ldr	r2, [pc, #244]	; (80042e0 <HAL_DMA_Init+0x140>)
 80041ea:	fba2 2303 	umull	r2, r3, r2, r3
 80041ee:	091b      	lsrs	r3, r3, #4
 80041f0:	009a      	lsls	r2, r3, #2
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a3c      	ldr	r2, [pc, #240]	; (80042ec <HAL_DMA_Init+0x14c>)
 80041fa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004216:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004220:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800422c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004238:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fa74 	bl	800473c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800425c:	d102      	bne.n	8004264 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004270:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800427a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d010      	beq.n	80042a6 <HAL_DMA_Init+0x106>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b04      	cmp	r3, #4
 800428a:	d80c      	bhi.n	80042a6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 fa93 	bl	80047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042a2:	605a      	str	r2, [r3, #4]
 80042a4:	e008      	b.n	80042b8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40020407 	.word	0x40020407
 80042dc:	bffdfff8 	.word	0xbffdfff8
 80042e0:	cccccccd 	.word	0xcccccccd
 80042e4:	40020000 	.word	0x40020000
 80042e8:	bffdfbf8 	.word	0xbffdfbf8
 80042ec:	40020400 	.word	0x40020400

080042f0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_DMA_Start_IT+0x20>
 800430c:	2302      	movs	r3, #2
 800430e:	e066      	b.n	80043de <HAL_DMA_Start_IT+0xee>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b01      	cmp	r3, #1
 8004322:	d155      	bne.n	80043d0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0201 	bic.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	68b9      	ldr	r1, [r7, #8]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f9b9 	bl	80046c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	2b00      	cmp	r3, #0
 8004354:	d008      	beq.n	8004368 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 020e 	orr.w	r2, r2, #14
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	e00f      	b.n	8004388 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0204 	bic.w	r2, r2, #4
 8004376:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 020a 	orr.w	r2, r2, #10
 8004386:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043bc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f042 0201 	orr.w	r2, r2, #1
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	e005      	b.n	80043dc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80043d8:	2302      	movs	r3, #2
 80043da:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80043dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e04f      	b.n	8004498 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d008      	beq.n	8004416 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2204      	movs	r2, #4
 8004408:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e040      	b.n	8004498 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 020e 	bic.w	r2, r2, #14
 8004424:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004430:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004434:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0201 	bic.w	r2, r2, #1
 8004444:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444a:	f003 021c 	and.w	r2, r3, #28
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	2101      	movs	r1, #1
 8004454:	fa01 f202 	lsl.w	r2, r1, r2
 8004458:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004462:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00c      	beq.n	8004486 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004476:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800447a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004484:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d005      	beq.n	80044c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2204      	movs	r2, #4
 80044c0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	73fb      	strb	r3, [r7, #15]
 80044c6:	e047      	b.n	8004558 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 020e 	bic.w	r2, r2, #14
 80044d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0201 	bic.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fc:	f003 021c 	and.w	r2, r3, #28
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	2101      	movs	r1, #1
 8004506:	fa01 f202 	lsl.w	r2, r1, r2
 800450a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004514:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00c      	beq.n	8004538 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800452c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004536:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	4798      	blx	r3
    }
  }
  return status;
 8004558:	7bfb      	ldrb	r3, [r7, #15]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	f003 031c 	and.w	r3, r3, #28
 8004582:	2204      	movs	r2, #4
 8004584:	409a      	lsls	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4013      	ands	r3, r2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d026      	beq.n	80045dc <HAL_DMA_IRQHandler+0x7a>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d021      	beq.n	80045dc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d107      	bne.n	80045b6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0204 	bic.w	r2, r2, #4
 80045b4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ba:	f003 021c 	and.w	r2, r3, #28
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	2104      	movs	r1, #4
 80045c4:	fa01 f202 	lsl.w	r2, r1, r2
 80045c8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d071      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80045da:	e06c      	b.n	80046b6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e0:	f003 031c 	and.w	r3, r3, #28
 80045e4:	2202      	movs	r2, #2
 80045e6:	409a      	lsls	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d02e      	beq.n	800464e <HAL_DMA_IRQHandler+0xec>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d029      	beq.n	800464e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10b      	bne.n	8004620 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 020a 	bic.w	r2, r2, #10
 8004616:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004624:	f003 021c 	and.w	r2, r3, #28
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	2102      	movs	r1, #2
 800462e:	fa01 f202 	lsl.w	r2, r1, r2
 8004632:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	2b00      	cmp	r3, #0
 8004642:	d038      	beq.n	80046b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800464c:	e033      	b.n	80046b6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	f003 031c 	and.w	r3, r3, #28
 8004656:	2208      	movs	r2, #8
 8004658:	409a      	lsls	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4013      	ands	r3, r2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d02a      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x156>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b00      	cmp	r3, #0
 800466a:	d025      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 020e 	bic.w	r2, r2, #14
 800467a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004680:	f003 021c 	and.w	r2, r3, #28
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	2101      	movs	r1, #1
 800468a:	fa01 f202 	lsl.w	r2, r1, r2
 800468e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d004      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80046b6:	bf00      	nop
 80046b8:	bf00      	nop
}
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046d6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d004      	beq.n	80046ea <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046e8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	f003 021c 	and.w	r2, r3, #28
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	2101      	movs	r1, #1
 80046f8:	fa01 f202 	lsl.w	r2, r1, r2
 80046fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b10      	cmp	r3, #16
 800470c:	d108      	bne.n	8004720 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800471e:	e007      	b.n	8004730 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	60da      	str	r2, [r3, #12]
}
 8004730:	bf00      	nop
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	4b17      	ldr	r3, [pc, #92]	; (80047a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800474c:	429a      	cmp	r2, r3
 800474e:	d80a      	bhi.n	8004766 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004754:	089b      	lsrs	r3, r3, #2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800475c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6493      	str	r3, [r2, #72]	; 0x48
 8004764:	e007      	b.n	8004776 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	089b      	lsrs	r3, r3, #2
 800476c:	009a      	lsls	r2, r3, #2
 800476e:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004770:	4413      	add	r3, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	3b08      	subs	r3, #8
 800477e:	4a0c      	ldr	r2, [pc, #48]	; (80047b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004780:	fba2 2303 	umull	r2, r3, r2, r3
 8004784:	091b      	lsrs	r3, r3, #4
 8004786:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a0a      	ldr	r2, [pc, #40]	; (80047b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800478c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	2201      	movs	r2, #1
 8004796:	409a      	lsls	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800479c:	bf00      	nop
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	40020407 	.word	0x40020407
 80047ac:	4002081c 	.word	0x4002081c
 80047b0:	cccccccd 	.word	0xcccccccd
 80047b4:	40020880 	.word	0x40020880

080047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80047ce:	4413      	add	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	461a      	mov	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a09      	ldr	r2, [pc, #36]	; (8004800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80047dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	2201      	movs	r2, #1
 80047e8:	409a      	lsls	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	1000823f 	.word	0x1000823f
 8004800:	40020940 	.word	0x40020940

08004804 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b01      	cmp	r3, #1
 8004818:	d12b      	bne.n	8004872 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_DMAEx_ConfigMuxSync+0x24>
 8004824:	2302      	movs	r3, #2
 8004826:	e025      	b.n	8004874 <HAL_DMAEx_ConfigMuxSync+0x70>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	4b12      	ldr	r3, [pc, #72]	; (8004880 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8004838:	4013      	ands	r3, r2
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	6811      	ldr	r1, [r2, #0]
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	68d2      	ldr	r2, [r2, #12]
 8004842:	3a01      	subs	r2, #1
 8004844:	04d2      	lsls	r2, r2, #19
 8004846:	4311      	orrs	r1, r2
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	6852      	ldr	r2, [r2, #4]
 800484c:	4311      	orrs	r1, r2
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	7a12      	ldrb	r2, [r2, #8]
 8004852:	0412      	lsls	r2, r2, #16
 8004854:	4311      	orrs	r1, r2
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	7a52      	ldrb	r2, [r2, #9]
 800485a:	0252      	lsls	r2, r2, #9
 800485c:	4311      	orrs	r1, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004862:	430b      	orrs	r3, r1
 8004864:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	e000      	b.n	8004874 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
  }
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	e000fdff 	.word	0xe000fdff

08004884 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004892:	e14c      	b.n	8004b2e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	2101      	movs	r1, #1
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	fa01 f303 	lsl.w	r3, r1, r3
 80048a0:	4013      	ands	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 813e 	beq.w	8004b28 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d005      	beq.n	80048c4 <HAL_GPIO_Init+0x40>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d130      	bne.n	8004926 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	2203      	movs	r2, #3
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	43db      	mvns	r3, r3
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4013      	ands	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048fa:	2201      	movs	r2, #1
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4013      	ands	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	091b      	lsrs	r3, r3, #4
 8004910:	f003 0201 	and.w	r2, r3, #1
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b03      	cmp	r3, #3
 8004930:	d017      	beq.n	8004962 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	2203      	movs	r2, #3
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43db      	mvns	r3, r3
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4013      	ands	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d123      	bne.n	80049b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	08da      	lsrs	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3208      	adds	r2, #8
 8004976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800497a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	220f      	movs	r2, #15
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	43db      	mvns	r3, r3
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4013      	ands	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	08da      	lsrs	r2, r3, #3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3208      	adds	r2, #8
 80049b0:	6939      	ldr	r1, [r7, #16]
 80049b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	2203      	movs	r2, #3
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	43db      	mvns	r3, r3
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4013      	ands	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f003 0203 	and.w	r2, r3, #3
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 8098 	beq.w	8004b28 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80049f8:	4a54      	ldr	r2, [pc, #336]	; (8004b4c <HAL_GPIO_Init+0x2c8>)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	089b      	lsrs	r3, r3, #2
 80049fe:	3302      	adds	r3, #2
 8004a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f003 0303 	and.w	r3, r3, #3
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	220f      	movs	r2, #15
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a22:	d019      	beq.n	8004a58 <HAL_GPIO_Init+0x1d4>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a4a      	ldr	r2, [pc, #296]	; (8004b50 <HAL_GPIO_Init+0x2cc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d013      	beq.n	8004a54 <HAL_GPIO_Init+0x1d0>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a49      	ldr	r2, [pc, #292]	; (8004b54 <HAL_GPIO_Init+0x2d0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00d      	beq.n	8004a50 <HAL_GPIO_Init+0x1cc>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a48      	ldr	r2, [pc, #288]	; (8004b58 <HAL_GPIO_Init+0x2d4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d007      	beq.n	8004a4c <HAL_GPIO_Init+0x1c8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a47      	ldr	r2, [pc, #284]	; (8004b5c <HAL_GPIO_Init+0x2d8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d101      	bne.n	8004a48 <HAL_GPIO_Init+0x1c4>
 8004a44:	2304      	movs	r3, #4
 8004a46:	e008      	b.n	8004a5a <HAL_GPIO_Init+0x1d6>
 8004a48:	2307      	movs	r3, #7
 8004a4a:	e006      	b.n	8004a5a <HAL_GPIO_Init+0x1d6>
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e004      	b.n	8004a5a <HAL_GPIO_Init+0x1d6>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e002      	b.n	8004a5a <HAL_GPIO_Init+0x1d6>
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <HAL_GPIO_Init+0x1d6>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	f002 0203 	and.w	r2, r2, #3
 8004a60:	0092      	lsls	r2, r2, #2
 8004a62:	4093      	lsls	r3, r2
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a6a:	4938      	ldr	r1, [pc, #224]	; (8004b4c <HAL_GPIO_Init+0x2c8>)
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	089b      	lsrs	r3, r3, #2
 8004a70:	3302      	adds	r3, #2
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a78:	4b39      	ldr	r3, [pc, #228]	; (8004b60 <HAL_GPIO_Init+0x2dc>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	43db      	mvns	r3, r3
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4013      	ands	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a9c:	4a30      	ldr	r2, [pc, #192]	; (8004b60 <HAL_GPIO_Init+0x2dc>)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004aa2:	4b2f      	ldr	r3, [pc, #188]	; (8004b60 <HAL_GPIO_Init+0x2dc>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ac6:	4a26      	ldr	r2, [pc, #152]	; (8004b60 <HAL_GPIO_Init+0x2dc>)
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004acc:	4b24      	ldr	r3, [pc, #144]	; (8004b60 <HAL_GPIO_Init+0x2dc>)
 8004ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4013      	ands	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004af2:	4a1b      	ldr	r2, [pc, #108]	; (8004b60 <HAL_GPIO_Init+0x2dc>)
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004afa:	4b19      	ldr	r3, [pc, #100]	; (8004b60 <HAL_GPIO_Init+0x2dc>)
 8004afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	43db      	mvns	r3, r3
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b20:	4a0f      	ldr	r2, [pc, #60]	; (8004b60 <HAL_GPIO_Init+0x2dc>)
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	fa22 f303 	lsr.w	r3, r2, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f47f aeab 	bne.w	8004894 <HAL_GPIO_Init+0x10>
  }
}
 8004b3e:	bf00      	nop
 8004b40:	bf00      	nop
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	40010000 	.word	0x40010000
 8004b50:	48000400 	.word	0x48000400
 8004b54:	48000800 	.word	0x48000800
 8004b58:	48000c00 	.word	0x48000c00
 8004b5c:	48001000 	.word	0x48001000
 8004b60:	58000800 	.word	0x58000800

08004b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	807b      	strh	r3, [r7, #2]
 8004b70:	4613      	mov	r3, r2
 8004b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b74:	787b      	ldrb	r3, [r7, #1]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b7a:	887a      	ldrh	r2, [r7, #2]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b80:	e002      	b.n	8004b88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b82:	887a      	ldrh	r2, [r7, #2]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b9e:	4b08      	ldr	r3, [pc, #32]	; (8004bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d006      	beq.n	8004bb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004baa:	4a05      	ldr	r2, [pc, #20]	; (8004bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bac:	88fb      	ldrh	r3, [r7, #6]
 8004bae:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bb0:	88fb      	ldrh	r3, [r7, #6]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fc f9d9 	bl	8000f6a <HAL_GPIO_EXTI_Callback>
  }
}
 8004bb8:	bf00      	nop
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	58000800 	.word	0x58000800

08004bc4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004bca:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <HAL_HSEM_IRQHandler+0x30>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004bd0:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <HAL_HSEM_IRQHandler+0x30>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	4906      	ldr	r1, [pc, #24]	; (8004bf4 <HAL_HSEM_IRQHandler+0x30>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004bde:	4a05      	ldr	r2, [pc, #20]	; (8004bf4 <HAL_HSEM_IRQHandler+0x30>)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f807 	bl	8004bf8 <HAL_HSEM_FreeCallback>
}
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	58001500 	.word	0x58001500

08004bf8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004c14:	2300      	movs	r3, #0
 8004c16:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d01e      	beq.n	8004c5c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004c1e:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <HAL_IPCC_Init+0x60>)
 8004c20:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d102      	bne.n	8004c34 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fd fb56 	bl	80022e0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004c34:	68b8      	ldr	r0, [r7, #8]
 8004c36:	f000 f85b 	bl	8004cf0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f82c 	bl	8004ca4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004c5a:	e001      	b.n	8004c60 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	58000c00 	.word	0x58000c00

08004c70 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b085      	sub	sp, #20
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	4613      	mov	r3, r2
 8004c96:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	e00f      	b.n	8004cd2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	4a0b      	ldr	r2, [pc, #44]	; (8004ce8 <IPCC_SetDefaultCallbacks+0x44>)
 8004cbc:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3306      	adds	r3, #6
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	4a08      	ldr	r2, [pc, #32]	; (8004cec <IPCC_SetDefaultCallbacks+0x48>)
 8004cca:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b05      	cmp	r3, #5
 8004cd6:	d9ec      	bls.n	8004cb2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004cd8:	bf00      	nop
 8004cda:	bf00      	nop
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	08004c71 	.word	0x08004c71
 8004cec:	08004c8b 	.word	0x08004c8b

08004cf0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004d04:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	223f      	movs	r2, #63	; 0x3f
 8004d0a:	609a      	str	r2, [r3, #8]
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d1c:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a04      	ldr	r2, [pc, #16]	; (8004d34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d26:	6013      	str	r3, [r2, #0]
}
 8004d28:	bf00      	nop
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	58000400 	.word	0x58000400

08004d38 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004d3c:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <HAL_PWREx_GetVoltageRange+0x18>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	58000400 	.word	0x58000400

08004d54 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d66:	d101      	bne.n	8004d6c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e000      	b.n	8004d6e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <LL_RCC_HSE_Enable>:
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d8a:	6013      	str	r3, [r2, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <LL_RCC_HSE_Disable>:
{
 8004d96:	b480      	push	{r7}
 8004d98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004da8:	6013      	str	r3, [r2, #0]
}
 8004daa:	bf00      	nop
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <LL_RCC_HSE_IsReady>:
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dc6:	d101      	bne.n	8004dcc <LL_RCC_HSE_IsReady+0x18>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <LL_RCC_HSE_IsReady+0x1a>
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <LL_RCC_HSI_Enable>:
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dea:	6013      	str	r3, [r2, #0]
}
 8004dec:	bf00      	nop
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <LL_RCC_HSI_Disable>:
{
 8004df6:	b480      	push	{r7}
 8004df8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e08:	6013      	str	r3, [r2, #0]
}
 8004e0a:	bf00      	nop
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <LL_RCC_HSI_IsReady>:
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e26:	d101      	bne.n	8004e2c <LL_RCC_HSI_IsReady+0x18>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <LL_RCC_HSI_IsReady+0x1a>
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	061b      	lsls	r3, r3, #24
 8004e4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e52:	4313      	orrs	r3, r2
 8004e54:	604b      	str	r3, [r1, #4]
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <LL_RCC_HSI48_Enable>:
{
 8004e62:	b480      	push	{r7}
 8004e64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e72:	f043 0301 	orr.w	r3, r3, #1
 8004e76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004e7a:	bf00      	nop
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <LL_RCC_HSI48_Disable>:
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e94:	f023 0301 	bic.w	r3, r3, #1
 8004e98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004e9c:	bf00      	nop
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <LL_RCC_HSI48_IsReady>:
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d101      	bne.n	8004ebe <LL_RCC_HSI48_IsReady+0x18>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <LL_RCC_HSI48_IsReady+0x1a>
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <LL_RCC_LSE_Enable>:
{
 8004eca:	b480      	push	{r7}
 8004ecc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ee2:	bf00      	nop
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <LL_RCC_LSE_Disable>:
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004efc:	f023 0301 	bic.w	r3, r3, #1
 8004f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f04:	bf00      	nop
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <LL_RCC_LSE_EnableBypass>:
{
 8004f0e:	b480      	push	{r7}
 8004f10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f1e:	f043 0304 	orr.w	r3, r3, #4
 8004f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f26:	bf00      	nop
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <LL_RCC_LSE_DisableBypass>:
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f40:	f023 0304 	bic.w	r3, r3, #4
 8004f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004f48:	bf00      	nop
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <LL_RCC_LSE_IsReady>:
{
 8004f52:	b480      	push	{r7}
 8004f54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d101      	bne.n	8004f6a <LL_RCC_LSE_IsReady+0x18>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <LL_RCC_LSE_IsReady+0x1a>
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <LL_RCC_LSI1_Enable>:
{
 8004f76:	b480      	push	{r7}
 8004f78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004f8e:	bf00      	nop
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <LL_RCC_LSI1_Disable>:
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fa8:	f023 0301 	bic.w	r3, r3, #1
 8004fac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004fb0:	bf00      	nop
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <LL_RCC_LSI1_IsReady>:
{
 8004fba:	b480      	push	{r7}
 8004fbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d101      	bne.n	8004fd2 <LL_RCC_LSI1_IsReady+0x18>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <LL_RCC_LSI1_IsReady+0x1a>
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <LL_RCC_LSI2_Enable>:
{
 8004fde:	b480      	push	{r7}
 8004fe0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fee:	f043 0304 	orr.w	r3, r3, #4
 8004ff2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004ff6:	bf00      	nop
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <LL_RCC_LSI2_Disable>:
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800500c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005010:	f023 0304 	bic.w	r3, r3, #4
 8005014:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005018:	bf00      	nop
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <LL_RCC_LSI2_IsReady>:
{
 8005022:	b480      	push	{r7}
 8005024:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800502a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b08      	cmp	r3, #8
 8005034:	d101      	bne.n	800503a <LL_RCC_LSI2_IsReady+0x18>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <LL_RCC_LSI2_IsReady+0x1a>
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <LL_RCC_LSI2_SetTrimming>:
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800504e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005056:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	021b      	lsls	r3, r3, #8
 800505e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <LL_RCC_MSI_Enable>:
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	6013      	str	r3, [r2, #0]
}
 8005088:	bf00      	nop
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <LL_RCC_MSI_Disable>:
{
 8005092:	b480      	push	{r7}
 8005094:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050a0:	f023 0301 	bic.w	r3, r3, #1
 80050a4:	6013      	str	r3, [r2, #0]
}
 80050a6:	bf00      	nop
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <LL_RCC_MSI_IsReady>:
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80050b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d101      	bne.n	80050c6 <LL_RCC_MSI_IsReady+0x16>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <LL_RCC_MSI_IsReady+0x18>
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <LL_RCC_MSI_SetRange>:
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80050da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	600b      	str	r3, [r1, #0]
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <LL_RCC_MSI_GetRange>:
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800510a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2bb0      	cmp	r3, #176	; 0xb0
 8005110:	d901      	bls.n	8005116 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005112:	23b0      	movs	r3, #176	; 0xb0
 8005114:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005116:	687b      	ldr	r3, [r7, #4]
}
 8005118:	4618      	mov	r0, r3
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800512c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800513e:	4313      	orrs	r3, r2
 8005140:	604b      	str	r3, [r1, #4]
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <LL_RCC_SetSysClkSource>:
{
 800514e:	b480      	push	{r7}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f023 0203 	bic.w	r2, r3, #3
 8005160:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4313      	orrs	r3, r2
 8005168:	608b      	str	r3, [r1, #8]
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <LL_RCC_GetSysClkSource>:
{
 8005176:	b480      	push	{r7}
 8005178:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800517a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f003 030c 	and.w	r3, r3, #12
}
 8005184:	4618      	mov	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <LL_RCC_SetAHBPrescaler>:
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	608b      	str	r3, [r1, #8]
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80051be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <LL_RCC_SetAHB4Prescaler>:
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80051ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051f2:	f023 020f 	bic.w	r2, r3, #15
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	091b      	lsrs	r3, r3, #4
 80051fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <LL_RCC_SetAPB1Prescaler>:
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005222:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4313      	orrs	r3, r2
 800522a:	608b      	str	r3, [r1, #8]
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <LL_RCC_SetAPB2Prescaler>:
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800524a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4313      	orrs	r3, r2
 8005252:	608b      	str	r3, [r1, #8]
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <LL_RCC_GetAHBPrescaler>:
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800526e:	4618      	mov	r0, r3
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <LL_RCC_GetAHB4Prescaler>:
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800527c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005280:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800528a:	4618      	mov	r0, r3
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <LL_RCC_GetAPB1Prescaler>:
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <LL_RCC_GetAPB2Prescaler>:
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80052b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <LL_RCC_PLL_Enable>:
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80052c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052d6:	6013      	str	r3, [r2, #0]
}
 80052d8:	bf00      	nop
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <LL_RCC_PLL_Disable>:
{
 80052e2:	b480      	push	{r7}
 80052e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80052e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052f4:	6013      	str	r3, [r2, #0]
}
 80052f6:	bf00      	nop
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <LL_RCC_PLL_IsReady>:
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005312:	d101      	bne.n	8005318 <LL_RCC_PLL_IsReady+0x18>
 8005314:	2301      	movs	r3, #1
 8005316:	e000      	b.n	800531a <LL_RCC_PLL_IsReady+0x1a>
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <LL_RCC_PLL_GetN>:
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	0a1b      	lsrs	r3, r3, #8
 8005330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005334:	4618      	mov	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <LL_RCC_PLL_GetR>:
{
 800533e:	b480      	push	{r7}
 8005340:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800534c:	4618      	mov	r0, r3
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <LL_RCC_PLL_GetDivider>:
{
 8005356:	b480      	push	{r7}
 8005358:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800535a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005364:	4618      	mov	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <LL_RCC_PLL_GetMainSource>:
{
 800536e:	b480      	push	{r7}
 8005370:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0303 	and.w	r3, r3, #3
}
 800537c:	4618      	mov	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <LL_RCC_IsActiveFlag_HPRE>:
{
 8005386:	b480      	push	{r7}
 8005388:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800538a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005398:	d101      	bne.n	800539e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80053aa:	b480      	push	{r7}
 80053ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80053ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80053b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053be:	d101      	bne.n	80053c4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e000      	b.n	80053c6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80053d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80053dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e4:	d101      	bne.n	80053ea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80053f6:	b480      	push	{r7}
 80053f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80053fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005404:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005408:	d101      	bne.n	800540e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <LL_RCC_IsActiveFlag_PPRE2>:
{
 800541a:	b480      	push	{r7}
 800541c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800541e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005428:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800542c:	d101      	bne.n	8005432 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800542e:	2301      	movs	r3, #1
 8005430:	e000      	b.n	8005434 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
	...

08005440 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005440:	b590      	push	{r4, r7, lr}
 8005442:	b08d      	sub	sp, #52	; 0x34
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e37f      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 8092 	beq.w	8005584 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005460:	f7ff fe89 	bl	8005176 <LL_RCC_GetSysClkSource>
 8005464:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005466:	f7ff ff82 	bl	800536e <LL_RCC_PLL_GetMainSource>
 800546a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800546c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546e:	2b00      	cmp	r3, #0
 8005470:	d005      	beq.n	800547e <HAL_RCC_OscConfig+0x3e>
 8005472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005474:	2b0c      	cmp	r3, #12
 8005476:	d14c      	bne.n	8005512 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	2b01      	cmp	r3, #1
 800547c:	d149      	bne.n	8005512 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800547e:	f7ff fe17 	bl	80050b0 <LL_RCC_MSI_IsReady>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <HAL_RCC_OscConfig+0x54>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e35e      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005498:	f7ff fe2f 	bl	80050fa <LL_RCC_MSI_GetRange>
 800549c:	4603      	mov	r3, r0
 800549e:	429c      	cmp	r4, r3
 80054a0:	d914      	bls.n	80054cc <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fd44 	bl	8005f34 <RCC_SetFlashLatencyFromMSIRange>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e34d      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff fe09 	bl	80050d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff fe2d 	bl	8005124 <LL_RCC_MSI_SetCalibTrimming>
 80054ca:	e013      	b.n	80054f4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff fdfe 	bl	80050d2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff fe22 	bl	8005124 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fd25 	bl	8005f34 <RCC_SetFlashLatencyFromMSIRange>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e32e      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80054f4:	f000 fcde 	bl	8005eb4 <HAL_RCC_GetHCLKFreq>
 80054f8:	4603      	mov	r3, r0
 80054fa:	4aa5      	ldr	r2, [pc, #660]	; (8005790 <HAL_RCC_OscConfig+0x350>)
 80054fc:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80054fe:	4ba5      	ldr	r3, [pc, #660]	; (8005794 <HAL_RCC_OscConfig+0x354>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f7fe fc34 	bl	8003d70 <HAL_InitTick>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d039      	beq.n	8005582 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e31f      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d01e      	beq.n	8005558 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800551a:	f7ff fdab 	bl	8005074 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800551e:	f7fe fc75 	bl	8003e0c <HAL_GetTick>
 8005522:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005526:	f7fe fc71 	bl	8003e0c <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e30c      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005538:	f7ff fdba 	bl	80050b0 <LL_RCC_MSI_IsReady>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0f1      	beq.n	8005526 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff fdc3 	bl	80050d2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff fde7 	bl	8005124 <LL_RCC_MSI_SetCalibTrimming>
 8005556:	e015      	b.n	8005584 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005558:	f7ff fd9b 	bl	8005092 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800555c:	f7fe fc56 	bl	8003e0c <HAL_GetTick>
 8005560:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005564:	f7fe fc52 	bl	8003e0c <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e2ed      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005576:	f7ff fd9b 	bl	80050b0 <LL_RCC_MSI_IsReady>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1f1      	bne.n	8005564 <HAL_RCC_OscConfig+0x124>
 8005580:	e000      	b.n	8005584 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005582:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	d04e      	beq.n	800562e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005590:	f7ff fdf1 	bl	8005176 <LL_RCC_GetSysClkSource>
 8005594:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005596:	f7ff feea 	bl	800536e <LL_RCC_PLL_GetMainSource>
 800559a:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d005      	beq.n	80055ae <HAL_RCC_OscConfig+0x16e>
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	2b0c      	cmp	r3, #12
 80055a6:	d10d      	bne.n	80055c4 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d10a      	bne.n	80055c4 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ae:	f7ff fc01 	bl	8004db4 <LL_RCC_HSE_IsReady>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d039      	beq.n	800562c <HAL_RCC_OscConfig+0x1ec>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d135      	bne.n	800562c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e2c6      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055cc:	d102      	bne.n	80055d4 <HAL_RCC_OscConfig+0x194>
 80055ce:	f7ff fbd3 	bl	8004d78 <LL_RCC_HSE_Enable>
 80055d2:	e001      	b.n	80055d8 <HAL_RCC_OscConfig+0x198>
 80055d4:	f7ff fbdf 	bl	8004d96 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d012      	beq.n	8005606 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e0:	f7fe fc14 	bl	8003e0c <HAL_GetTick>
 80055e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055e8:	f7fe fc10 	bl	8003e0c <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b64      	cmp	r3, #100	; 0x64
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e2ab      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 80055fa:	f7ff fbdb 	bl	8004db4 <LL_RCC_HSE_IsReady>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0f1      	beq.n	80055e8 <HAL_RCC_OscConfig+0x1a8>
 8005604:	e013      	b.n	800562e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005606:	f7fe fc01 	bl	8003e0c <HAL_GetTick>
 800560a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800560c:	e008      	b.n	8005620 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800560e:	f7fe fbfd 	bl	8003e0c <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b64      	cmp	r3, #100	; 0x64
 800561a:	d901      	bls.n	8005620 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e298      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005620:	f7ff fbc8 	bl	8004db4 <LL_RCC_HSE_IsReady>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f1      	bne.n	800560e <HAL_RCC_OscConfig+0x1ce>
 800562a:	e000      	b.n	800562e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800562c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d051      	beq.n	80056de <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800563a:	f7ff fd9c 	bl	8005176 <LL_RCC_GetSysClkSource>
 800563e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005640:	f7ff fe95 	bl	800536e <LL_RCC_PLL_GetMainSource>
 8005644:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	2b04      	cmp	r3, #4
 800564a:	d005      	beq.n	8005658 <HAL_RCC_OscConfig+0x218>
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	2b0c      	cmp	r3, #12
 8005650:	d113      	bne.n	800567a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d110      	bne.n	800567a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005658:	f7ff fbdc 	bl	8004e14 <LL_RCC_HSI_IsReady>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d005      	beq.n	800566e <HAL_RCC_OscConfig+0x22e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e271      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff fbe0 	bl	8004e38 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005678:	e031      	b.n	80056de <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d019      	beq.n	80056b6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005682:	f7ff fba9 	bl	8004dd8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005686:	f7fe fbc1 	bl	8003e0c <HAL_GetTick>
 800568a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800568c:	e008      	b.n	80056a0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800568e:	f7fe fbbd 	bl	8003e0c <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e258      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 80056a0:	f7ff fbb8 	bl	8004e14 <LL_RCC_HSI_IsReady>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f1      	beq.n	800568e <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff fbc2 	bl	8004e38 <LL_RCC_HSI_SetCalibTrimming>
 80056b4:	e013      	b.n	80056de <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056b6:	f7ff fb9e 	bl	8004df6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ba:	f7fe fba7 	bl	8003e0c <HAL_GetTick>
 80056be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056c2:	f7fe fba3 	bl	8003e0c <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e23e      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 80056d4:	f7ff fb9e 	bl	8004e14 <LL_RCC_HSI_IsReady>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f1      	bne.n	80056c2 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d106      	bne.n	80056f8 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 80a4 	beq.w	8005840 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d077      	beq.n	80057f0 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	2b00      	cmp	r3, #0
 800570a:	d04b      	beq.n	80057a4 <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800570c:	f7ff fc55 	bl	8004fba <LL_RCC_LSI1_IsReady>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d113      	bne.n	800573e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005716:	f7ff fc2e 	bl	8004f76 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800571a:	f7fe fb77 	bl	8003e0c <HAL_GetTick>
 800571e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005720:	e008      	b.n	8005734 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005722:	f7fe fb73 	bl	8003e0c <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e20e      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005734:	f7ff fc41 	bl	8004fba <LL_RCC_LSI1_IsReady>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0f1      	beq.n	8005722 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800573e:	f7ff fc4e 	bl	8004fde <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005742:	f7fe fb63 	bl	8003e0c <HAL_GetTick>
 8005746:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005748:	e008      	b.n	800575c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800574a:	f7fe fb5f 	bl	8003e0c <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b03      	cmp	r3, #3
 8005756:	d901      	bls.n	800575c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e1fa      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800575c:	f7ff fc61 	bl	8005022 <LL_RCC_LSI2_IsReady>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0f1      	beq.n	800574a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff fc6b 	bl	8005046 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005770:	f7ff fc12 	bl	8004f98 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005774:	f7fe fb4a 	bl	8003e0c <HAL_GetTick>
 8005778:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800577a:	e00d      	b.n	8005798 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800577c:	f7fe fb46 	bl	8003e0c <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d906      	bls.n	8005798 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e1e1      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
 800578e:	bf00      	nop
 8005790:	20000040 	.word	0x20000040
 8005794:	20000044 	.word	0x20000044
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005798:	f7ff fc0f 	bl	8004fba <LL_RCC_LSI1_IsReady>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1ec      	bne.n	800577c <HAL_RCC_OscConfig+0x33c>
 80057a2:	e04d      	b.n	8005840 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80057a4:	f7ff fbe7 	bl	8004f76 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a8:	f7fe fb30 	bl	8003e0c <HAL_GetTick>
 80057ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80057b0:	f7fe fb2c 	bl	8003e0c <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e1c7      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80057c2:	f7ff fbfa 	bl	8004fba <LL_RCC_LSI1_IsReady>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0f1      	beq.n	80057b0 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80057cc:	f7ff fc18 	bl	8005000 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80057d0:	e008      	b.n	80057e4 <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80057d2:	f7fe fb1b 	bl	8003e0c <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e1b6      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80057e4:	f7ff fc1d 	bl	8005022 <LL_RCC_LSI2_IsReady>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f1      	bne.n	80057d2 <HAL_RCC_OscConfig+0x392>
 80057ee:	e027      	b.n	8005840 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80057f0:	f7ff fc06 	bl	8005000 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f4:	f7fe fb0a 	bl	8003e0c <HAL_GetTick>
 80057f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80057fc:	f7fe fb06 	bl	8003e0c <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b03      	cmp	r3, #3
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e1a1      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800580e:	f7ff fc08 	bl	8005022 <LL_RCC_LSI2_IsReady>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1f1      	bne.n	80057fc <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005818:	f7ff fbbe 	bl	8004f98 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581c:	f7fe faf6 	bl	8003e0c <HAL_GetTick>
 8005820:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005824:	f7fe faf2 	bl	8003e0c <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e18d      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005836:	f7ff fbc0 	bl	8004fba <LL_RCC_LSI1_IsReady>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1f1      	bne.n	8005824 <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	d05b      	beq.n	8005904 <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800584c:	4ba7      	ldr	r3, [pc, #668]	; (8005aec <HAL_RCC_OscConfig+0x6ac>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005854:	2b00      	cmp	r3, #0
 8005856:	d114      	bne.n	8005882 <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005858:	f7ff fa5e 	bl	8004d18 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800585c:	f7fe fad6 	bl	8003e0c <HAL_GetTick>
 8005860:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005864:	f7fe fad2 	bl	8003e0c <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e16d      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005876:	4b9d      	ldr	r3, [pc, #628]	; (8005aec <HAL_RCC_OscConfig+0x6ac>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0f0      	beq.n	8005864 <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d102      	bne.n	8005890 <HAL_RCC_OscConfig+0x450>
 800588a:	f7ff fb1e 	bl	8004eca <LL_RCC_LSE_Enable>
 800588e:	e00c      	b.n	80058aa <HAL_RCC_OscConfig+0x46a>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2b05      	cmp	r3, #5
 8005896:	d104      	bne.n	80058a2 <HAL_RCC_OscConfig+0x462>
 8005898:	f7ff fb39 	bl	8004f0e <LL_RCC_LSE_EnableBypass>
 800589c:	f7ff fb15 	bl	8004eca <LL_RCC_LSE_Enable>
 80058a0:	e003      	b.n	80058aa <HAL_RCC_OscConfig+0x46a>
 80058a2:	f7ff fb23 	bl	8004eec <LL_RCC_LSE_Disable>
 80058a6:	f7ff fb43 	bl	8004f30 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d014      	beq.n	80058dc <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b2:	f7fe faab 	bl	8003e0c <HAL_GetTick>
 80058b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80058b8:	e00a      	b.n	80058d0 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ba:	f7fe faa7 	bl	8003e0c <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e140      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 80058d0:	f7ff fb3f 	bl	8004f52 <LL_RCC_LSE_IsReady>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0ef      	beq.n	80058ba <HAL_RCC_OscConfig+0x47a>
 80058da:	e013      	b.n	8005904 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058dc:	f7fe fa96 	bl	8003e0c <HAL_GetTick>
 80058e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80058e2:	e00a      	b.n	80058fa <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e4:	f7fe fa92 	bl	8003e0c <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e12b      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 80058fa:	f7ff fb2a 	bl	8004f52 <LL_RCC_LSE_IsReady>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1ef      	bne.n	80058e4 <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d02c      	beq.n	800596a <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005914:	2b00      	cmp	r3, #0
 8005916:	d014      	beq.n	8005942 <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005918:	f7ff faa3 	bl	8004e62 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800591c:	f7fe fa76 	bl	8003e0c <HAL_GetTick>
 8005920:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005924:	f7fe fa72 	bl	8003e0c <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e10d      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005936:	f7ff fab6 	bl	8004ea6 <LL_RCC_HSI48_IsReady>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0f1      	beq.n	8005924 <HAL_RCC_OscConfig+0x4e4>
 8005940:	e013      	b.n	800596a <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005942:	f7ff fa9f 	bl	8004e84 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005946:	f7fe fa61 	bl	8003e0c <HAL_GetTick>
 800594a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800594c:	e008      	b.n	8005960 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800594e:	f7fe fa5d 	bl	8003e0c <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d901      	bls.n	8005960 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e0f8      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005960:	f7ff faa1 	bl	8004ea6 <LL_RCC_HSI48_IsReady>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f1      	bne.n	800594e <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 80ee 	beq.w	8005b50 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005974:	f7ff fbff 	bl	8005176 <LL_RCC_GetSysClkSource>
 8005978:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800597a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	2b02      	cmp	r3, #2
 8005988:	f040 80b4 	bne.w	8005af4 <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f003 0203 	and.w	r2, r3, #3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005996:	429a      	cmp	r2, r3
 8005998:	d123      	bne.n	80059e2 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d11c      	bne.n	80059e2 <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	0a1b      	lsrs	r3, r3, #8
 80059ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d114      	bne.n	80059e2 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d10d      	bne.n	80059e2 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d106      	bne.n	80059e2 <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80059de:	429a      	cmp	r2, r3
 80059e0:	d05d      	beq.n	8005a9e <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b0c      	cmp	r3, #12
 80059e6:	d058      	beq.n	8005a9a <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80059e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e0ab      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80059fa:	f7ff fc72 	bl	80052e2 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059fe:	f7fe fa05 	bl	8003e0c <HAL_GetTick>
 8005a02:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a06:	f7fe fa01 	bl	8003e0c <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e09c      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1ef      	bne.n	8005a06 <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	4b30      	ldr	r3, [pc, #192]	; (8005af0 <HAL_RCC_OscConfig+0x6b0>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a38:	4311      	orrs	r1, r2
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a3e:	0212      	lsls	r2, r2, #8
 8005a40:	4311      	orrs	r1, r2
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a46:	4311      	orrs	r1, r2
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a4c:	4311      	orrs	r1, r2
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005a52:	430a      	orrs	r2, r1
 8005a54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a5c:	f7ff fc32 	bl	80052c4 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a6e:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a70:	f7fe f9cc 	bl	8003e0c <HAL_GetTick>
 8005a74:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a78:	f7fe f9c8 	bl	8003e0c <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e063      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0ef      	beq.n	8005a78 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a98:	e05a      	b.n	8005b50 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e059      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d151      	bne.n	8005b50 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005aac:	f7ff fc0a 	bl	80052c4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005abe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ac0:	f7fe f9a4 	bl	8003e0c <HAL_GetTick>
 8005ac4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac8:	f7fe f9a0 	bl	8003e0c <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e03b      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0ef      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x688>
 8005ae8:	e032      	b.n	8005b50 <HAL_RCC_OscConfig+0x710>
 8005aea:	bf00      	nop
 8005aec:	58000400 	.word	0x58000400
 8005af0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	2b0c      	cmp	r3, #12
 8005af8:	d028      	beq.n	8005b4c <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005afa:	f7ff fbf2 	bl	80052e2 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b08:	f023 0303 	bic.w	r3, r3, #3
 8005b0c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8005b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b18:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b20:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b22:	f7fe f973 	bl	8003e0c <HAL_GetTick>
 8005b26:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b2a:	f7fe f96f 	bl	8003e0c <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e00a      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1ef      	bne.n	8005b2a <HAL_RCC_OscConfig+0x6ea>
 8005b4a:	e001      	b.n	8005b50 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e000      	b.n	8005b52 <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3734      	adds	r7, #52	; 0x34
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd90      	pop	{r4, r7, pc}
 8005b5a:	bf00      	nop

08005b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e12d      	b.n	8005dcc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b70:	4b98      	ldr	r3, [pc, #608]	; (8005dd4 <HAL_RCC_ClockConfig+0x278>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d91b      	bls.n	8005bb6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b7e:	4b95      	ldr	r3, [pc, #596]	; (8005dd4 <HAL_RCC_ClockConfig+0x278>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f023 0207 	bic.w	r2, r3, #7
 8005b86:	4993      	ldr	r1, [pc, #588]	; (8005dd4 <HAL_RCC_ClockConfig+0x278>)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b8e:	f7fe f93d 	bl	8003e0c <HAL_GetTick>
 8005b92:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b94:	e008      	b.n	8005ba8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b96:	f7fe f939 	bl	8003e0c <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e111      	b.n	8005dcc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba8:	4b8a      	ldr	r3, [pc, #552]	; (8005dd4 <HAL_RCC_ClockConfig+0x278>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d1ef      	bne.n	8005b96 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d016      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7ff fae1 	bl	800518e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005bcc:	f7fe f91e 	bl	8003e0c <HAL_GetTick>
 8005bd0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bd4:	f7fe f91a 	bl	8003e0c <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e0f2      	b.n	8005dcc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005be6:	f7ff fbce 	bl	8005386 <LL_RCC_IsActiveFlag_HPRE>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0f1      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d016      	beq.n	8005c2a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff fad8 	bl	80051b6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c06:	f7fe f901 	bl	8003e0c <HAL_GetTick>
 8005c0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005c0c:	e008      	b.n	8005c20 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c0e:	f7fe f8fd 	bl	8003e0c <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e0d5      	b.n	8005dcc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005c20:	f7ff fbc3 	bl	80053aa <LL_RCC_IsActiveFlag_C2HPRE>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0f1      	beq.n	8005c0e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d016      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff fad1 	bl	80051e2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c40:	f7fe f8e4 	bl	8003e0c <HAL_GetTick>
 8005c44:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005c46:	e008      	b.n	8005c5a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c48:	f7fe f8e0 	bl	8003e0c <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e0b8      	b.n	8005dcc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005c5a:	f7ff fbb9 	bl	80053d0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0f1      	beq.n	8005c48 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d016      	beq.n	8005c9e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff facb 	bl	8005210 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c7a:	f7fe f8c7 	bl	8003e0c <HAL_GetTick>
 8005c7e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c80:	e008      	b.n	8005c94 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c82:	f7fe f8c3 	bl	8003e0c <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e09b      	b.n	8005dcc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c94:	f7ff fbaf 	bl	80053f6 <LL_RCC_IsActiveFlag_PPRE1>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0f1      	beq.n	8005c82 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d017      	beq.n	8005cda <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff fac1 	bl	8005238 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005cb6:	f7fe f8a9 	bl	8003e0c <HAL_GetTick>
 8005cba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005cbc:	e008      	b.n	8005cd0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005cbe:	f7fe f8a5 	bl	8003e0c <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d901      	bls.n	8005cd0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e07d      	b.n	8005dcc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005cd0:	f7ff fba3 	bl	800541a <LL_RCC_IsActiveFlag_PPRE2>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d0f1      	beq.n	8005cbe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d043      	beq.n	8005d6e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d106      	bne.n	8005cfc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005cee:	f7ff f861 	bl	8004db4 <LL_RCC_HSE_IsReady>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d11e      	bne.n	8005d36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e067      	b.n	8005dcc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d106      	bne.n	8005d12 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005d04:	f7ff fafc 	bl	8005300 <LL_RCC_PLL_IsReady>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d113      	bne.n	8005d36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e05c      	b.n	8005dcc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005d1a:	f7ff f9c9 	bl	80050b0 <LL_RCC_MSI_IsReady>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d108      	bne.n	8005d36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e051      	b.n	8005dcc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005d28:	f7ff f874 	bl	8004e14 <LL_RCC_HSI_IsReady>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e04a      	b.n	8005dcc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7ff fa07 	bl	800514e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d40:	f7fe f864 	bl	8003e0c <HAL_GetTick>
 8005d44:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d46:	e00a      	b.n	8005d5e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d48:	f7fe f860 	bl	8003e0c <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e036      	b.n	8005dcc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5e:	f7ff fa0a 	bl	8005176 <LL_RCC_GetSysClkSource>
 8005d62:	4602      	mov	r2, r0
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d1ec      	bne.n	8005d48 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d6e:	4b19      	ldr	r3, [pc, #100]	; (8005dd4 <HAL_RCC_ClockConfig+0x278>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d21b      	bcs.n	8005db4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d7c:	4b15      	ldr	r3, [pc, #84]	; (8005dd4 <HAL_RCC_ClockConfig+0x278>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f023 0207 	bic.w	r2, r3, #7
 8005d84:	4913      	ldr	r1, [pc, #76]	; (8005dd4 <HAL_RCC_ClockConfig+0x278>)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d8c:	f7fe f83e 	bl	8003e0c <HAL_GetTick>
 8005d90:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d94:	f7fe f83a 	bl	8003e0c <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e012      	b.n	8005dcc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da6:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <HAL_RCC_ClockConfig+0x278>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d1ef      	bne.n	8005d94 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005db4:	f000 f87e 	bl	8005eb4 <HAL_RCC_GetHCLKFreq>
 8005db8:	4603      	mov	r3, r0
 8005dba:	4a07      	ldr	r2, [pc, #28]	; (8005dd8 <HAL_RCC_ClockConfig+0x27c>)
 8005dbc:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005dbe:	f7fe f831 	bl	8003e24 <HAL_GetTickPrio>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fd ffd3 	bl	8003d70 <HAL_InitTick>
 8005dca:	4603      	mov	r3, r0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	58004000 	.word	0x58004000
 8005dd8:	20000040 	.word	0x20000040

08005ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ddc:	b590      	push	{r4, r7, lr}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005de2:	f7ff f9c8 	bl	8005176 <LL_RCC_GetSysClkSource>
 8005de6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005dee:	f7ff f984 	bl	80050fa <LL_RCC_MSI_GetRange>
 8005df2:	4603      	mov	r3, r0
 8005df4:	091b      	lsrs	r3, r3, #4
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	4a2b      	ldr	r2, [pc, #172]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	e04b      	b.n	8005e9c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d102      	bne.n	8005e10 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e0a:	4b28      	ldr	r3, [pc, #160]	; (8005eac <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	e045      	b.n	8005e9c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d10a      	bne.n	8005e2c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e16:	f7fe ff9d 	bl	8004d54 <LL_RCC_HSE_IsEnabledDiv2>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d102      	bne.n	8005e26 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005e20:	4b22      	ldr	r3, [pc, #136]	; (8005eac <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	e03a      	b.n	8005e9c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005e26:	4b22      	ldr	r3, [pc, #136]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	e037      	b.n	8005e9c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005e2c:	f7ff fa9f 	bl	800536e <LL_RCC_PLL_GetMainSource>
 8005e30:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d003      	beq.n	8005e40 <HAL_RCC_GetSysClockFreq+0x64>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b03      	cmp	r3, #3
 8005e3c:	d003      	beq.n	8005e46 <HAL_RCC_GetSysClockFreq+0x6a>
 8005e3e:	e00d      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005e40:	4b1a      	ldr	r3, [pc, #104]	; (8005eac <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e42:	60bb      	str	r3, [r7, #8]
        break;
 8005e44:	e015      	b.n	8005e72 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e46:	f7fe ff85 	bl	8004d54 <LL_RCC_HSE_IsEnabledDiv2>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d102      	bne.n	8005e56 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005e50:	4b16      	ldr	r3, [pc, #88]	; (8005eac <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e52:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005e54:	e00d      	b.n	8005e72 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005e56:	4b16      	ldr	r3, [pc, #88]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005e58:	60bb      	str	r3, [r7, #8]
        break;
 8005e5a:	e00a      	b.n	8005e72 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005e5c:	f7ff f94d 	bl	80050fa <LL_RCC_MSI_GetRange>
 8005e60:	4603      	mov	r3, r0
 8005e62:	091b      	lsrs	r3, r3, #4
 8005e64:	f003 030f 	and.w	r3, r3, #15
 8005e68:	4a0f      	ldr	r2, [pc, #60]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e6e:	60bb      	str	r3, [r7, #8]
        break;
 8005e70:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005e72:	f7ff fa57 	bl	8005324 <LL_RCC_PLL_GetN>
 8005e76:	4602      	mov	r2, r0
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	fb03 f402 	mul.w	r4, r3, r2
 8005e7e:	f7ff fa6a 	bl	8005356 <LL_RCC_PLL_GetDivider>
 8005e82:	4603      	mov	r3, r0
 8005e84:	091b      	lsrs	r3, r3, #4
 8005e86:	3301      	adds	r3, #1
 8005e88:	fbb4 f4f3 	udiv	r4, r4, r3
 8005e8c:	f7ff fa57 	bl	800533e <LL_RCC_PLL_GetR>
 8005e90:	4603      	mov	r3, r0
 8005e92:	0f5b      	lsrs	r3, r3, #29
 8005e94:	3301      	adds	r3, #1
 8005e96:	fbb4 f3f3 	udiv	r3, r4, r3
 8005e9a:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd90      	pop	{r4, r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	0800d5b4 	.word	0x0800d5b4
 8005eac:	00f42400 	.word	0x00f42400
 8005eb0:	01e84800 	.word	0x01e84800

08005eb4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eb4:	b598      	push	{r3, r4, r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005eb8:	f7ff ff90 	bl	8005ddc <HAL_RCC_GetSysClockFreq>
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	f7ff f9cf 	bl	8005260 <LL_RCC_GetAHBPrescaler>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	091b      	lsrs	r3, r3, #4
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	4a03      	ldr	r2, [pc, #12]	; (8005ed8 <HAL_RCC_GetHCLKFreq+0x24>)
 8005ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ed0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	bd98      	pop	{r3, r4, r7, pc}
 8005ed8:	0800d554 	.word	0x0800d554

08005edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005edc:	b598      	push	{r3, r4, r7, lr}
 8005ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005ee0:	f7ff ffe8 	bl	8005eb4 <HAL_RCC_GetHCLKFreq>
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	f7ff f9d5 	bl	8005294 <LL_RCC_GetAPB1Prescaler>
 8005eea:	4603      	mov	r3, r0
 8005eec:	0a1b      	lsrs	r3, r3, #8
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	4a04      	ldr	r2, [pc, #16]	; (8005f04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef8:	f003 031f 	and.w	r3, r3, #31
 8005efc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	bd98      	pop	{r3, r4, r7, pc}
 8005f04:	0800d594 	.word	0x0800d594

08005f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f08:	b598      	push	{r3, r4, r7, lr}
 8005f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005f0c:	f7ff ffd2 	bl	8005eb4 <HAL_RCC_GetHCLKFreq>
 8005f10:	4604      	mov	r4, r0
 8005f12:	f7ff f9cb 	bl	80052ac <LL_RCC_GetAPB2Prescaler>
 8005f16:	4603      	mov	r3, r0
 8005f18:	0adb      	lsrs	r3, r3, #11
 8005f1a:	f003 0307 	and.w	r3, r3, #7
 8005f1e:	4a04      	ldr	r2, [pc, #16]	; (8005f30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f24:	f003 031f 	and.w	r3, r3, #31
 8005f28:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	bd98      	pop	{r3, r4, r7, pc}
 8005f30:	0800d594 	.word	0x0800d594

08005f34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005f34:	b590      	push	{r4, r7, lr}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2bb0      	cmp	r3, #176	; 0xb0
 8005f40:	d903      	bls.n	8005f4a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005f42:	4b15      	ldr	r3, [pc, #84]	; (8005f98 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f46:	60fb      	str	r3, [r7, #12]
 8005f48:	e007      	b.n	8005f5a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	091b      	lsrs	r3, r3, #4
 8005f4e:	f003 030f 	and.w	r3, r3, #15
 8005f52:	4a11      	ldr	r2, [pc, #68]	; (8005f98 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f58:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005f5a:	f7ff f98d 	bl	8005278 <LL_RCC_GetAHB4Prescaler>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	091b      	lsrs	r3, r3, #4
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	4a0d      	ldr	r2, [pc, #52]	; (8005f9c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f72:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4a0a      	ldr	r2, [pc, #40]	; (8005fa0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005f78:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7c:	0c9c      	lsrs	r4, r3, #18
 8005f7e:	f7fe fedb 	bl	8004d38 <HAL_PWREx_GetVoltageRange>
 8005f82:	4603      	mov	r3, r0
 8005f84:	4619      	mov	r1, r3
 8005f86:	4620      	mov	r0, r4
 8005f88:	f000 f80c 	bl	8005fa4 <RCC_SetFlashLatency>
 8005f8c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd90      	pop	{r4, r7, pc}
 8005f96:	bf00      	nop
 8005f98:	0800d5b4 	.word	0x0800d5b4
 8005f9c:	0800d554 	.word	0x0800d554
 8005fa0:	431bde83 	.word	0x431bde83

08005fa4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005fa4:	b590      	push	{r4, r7, lr}
 8005fa6:	b093      	sub	sp, #76	; 0x4c
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005fae:	4b37      	ldr	r3, [pc, #220]	; (800608c <RCC_SetFlashLatency+0xe8>)
 8005fb0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005fb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005fb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005fba:	4a35      	ldr	r2, [pc, #212]	; (8006090 <RCC_SetFlashLatency+0xec>)
 8005fbc:	f107 031c 	add.w	r3, r7, #28
 8005fc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005fc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005fc6:	4b33      	ldr	r3, [pc, #204]	; (8006094 <RCC_SetFlashLatency+0xf0>)
 8005fc8:	f107 040c 	add.w	r4, r7, #12
 8005fcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005fce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fdc:	d11a      	bne.n	8006014 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005fde:	2300      	movs	r3, #0
 8005fe0:	643b      	str	r3, [r7, #64]	; 0x40
 8005fe2:	e013      	b.n	800600c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	3348      	adds	r3, #72	; 0x48
 8005fea:	443b      	add	r3, r7
 8005fec:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d807      	bhi.n	8006006 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	3348      	adds	r3, #72	; 0x48
 8005ffc:	443b      	add	r3, r7
 8005ffe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006002:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006004:	e020      	b.n	8006048 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006008:	3301      	adds	r3, #1
 800600a:	643b      	str	r3, [r7, #64]	; 0x40
 800600c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800600e:	2b03      	cmp	r3, #3
 8006010:	d9e8      	bls.n	8005fe4 <RCC_SetFlashLatency+0x40>
 8006012:	e019      	b.n	8006048 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006014:	2300      	movs	r3, #0
 8006016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006018:	e013      	b.n	8006042 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800601a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	3348      	adds	r3, #72	; 0x48
 8006020:	443b      	add	r3, r7
 8006022:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	429a      	cmp	r2, r3
 800602a:	d807      	bhi.n	800603c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800602c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	3348      	adds	r3, #72	; 0x48
 8006032:	443b      	add	r3, r7
 8006034:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006038:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800603a:	e005      	b.n	8006048 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800603c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800603e:	3301      	adds	r3, #1
 8006040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006044:	2b02      	cmp	r3, #2
 8006046:	d9e8      	bls.n	800601a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8006048:	4b13      	ldr	r3, [pc, #76]	; (8006098 <RCC_SetFlashLatency+0xf4>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f023 0207 	bic.w	r2, r3, #7
 8006050:	4911      	ldr	r1, [pc, #68]	; (8006098 <RCC_SetFlashLatency+0xf4>)
 8006052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006054:	4313      	orrs	r3, r2
 8006056:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006058:	f7fd fed8 	bl	8003e0c <HAL_GetTick>
 800605c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800605e:	e008      	b.n	8006072 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006060:	f7fd fed4 	bl	8003e0c <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d901      	bls.n	8006072 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e007      	b.n	8006082 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006072:	4b09      	ldr	r3, [pc, #36]	; (8006098 <RCC_SetFlashLatency+0xf4>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800607c:	429a      	cmp	r2, r3
 800607e:	d1ef      	bne.n	8006060 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	374c      	adds	r7, #76	; 0x4c
 8006086:	46bd      	mov	sp, r7
 8006088:	bd90      	pop	{r4, r7, pc}
 800608a:	bf00      	nop
 800608c:	0800d38c 	.word	0x0800d38c
 8006090:	0800d39c 	.word	0x0800d39c
 8006094:	0800d3a8 	.word	0x0800d3a8
 8006098:	58004000 	.word	0x58004000

0800609c <LL_RCC_LSE_IsEnabled>:
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80060a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d101      	bne.n	80060b4 <LL_RCC_LSE_IsEnabled+0x18>
 80060b0:	2301      	movs	r3, #1
 80060b2:	e000      	b.n	80060b6 <LL_RCC_LSE_IsEnabled+0x1a>
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <LL_RCC_LSE_IsReady>:
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80060c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d101      	bne.n	80060d8 <LL_RCC_LSE_IsReady+0x18>
 80060d4:	2301      	movs	r3, #1
 80060d6:	e000      	b.n	80060da <LL_RCC_LSE_IsReady+0x1a>
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <LL_RCC_SetRFWKPClockSource>:
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80060ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4313      	orrs	r3, r2
 8006100:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <LL_RCC_SetSMPSClockSource>:
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	f023 0203 	bic.w	r2, r3, #3
 8006122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4313      	orrs	r3, r2
 800612a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <LL_RCC_SetSMPSPrescaler>:
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800614a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4313      	orrs	r3, r2
 8006152:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <LL_RCC_SetUSARTClockSource>:
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800616c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006170:	f023 0203 	bic.w	r2, r3, #3
 8006174:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4313      	orrs	r3, r2
 800617c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <LL_RCC_SetLPUARTClockSource>:
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <LL_RCC_SetI2CClockSource>:
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80061c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	091b      	lsrs	r3, r3, #4
 80061cc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80061d0:	43db      	mvns	r3, r3
 80061d2:	401a      	ands	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	011b      	lsls	r3, r3, #4
 80061d8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80061dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061e6:	bf00      	nop
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <LL_RCC_SetLPTIMClockSource>:
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80061fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	0c1b      	lsrs	r3, r3, #16
 8006206:	041b      	lsls	r3, r3, #16
 8006208:	43db      	mvns	r3, r3
 800620a:	401a      	ands	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	041b      	lsls	r3, r3, #16
 8006210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006214:	4313      	orrs	r3, r2
 8006216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800621a:	bf00      	nop
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <LL_RCC_SetSAIClockSource>:
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800622e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006236:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800623a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4313      	orrs	r3, r2
 8006242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <LL_RCC_SetRNGClockSource>:
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800625a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800625e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006262:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <LL_RCC_SetCLK48ClockSource>:
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800628a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006292:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4313      	orrs	r3, r2
 800629a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <LL_RCC_SetUSBClockSource>:
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b082      	sub	sp, #8
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff ffe3 	bl	800627e <LL_RCC_SetCLK48ClockSource>
}
 80062b8:	bf00      	nop
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <LL_RCC_SetADCClockSource>:
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80062c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4313      	orrs	r3, r2
 80062dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <LL_RCC_SetRTCClockSource>:
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80062f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006300:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4313      	orrs	r3, r2
 8006308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <LL_RCC_GetRTCClockSource>:
{
 8006318:	b480      	push	{r7}
 800631a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800631c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006324:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006328:	4618      	mov	r0, r3
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <LL_RCC_ForceBackupDomainReset>:
{
 8006332:	b480      	push	{r7}
 8006334:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800633a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800634a:	bf00      	nop
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800635c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006360:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800636c:	bf00      	nop
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <LL_RCC_PLLSAI1_Enable>:
{
 8006376:	b480      	push	{r7}
 8006378:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800637a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006384:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006388:	6013      	str	r3, [r2, #0]
}
 800638a:	bf00      	nop
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <LL_RCC_PLLSAI1_Disable>:
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063a6:	6013      	str	r3, [r2, #0]
}
 80063a8:	bf00      	nop
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <LL_RCC_PLLSAI1_IsReady>:
{
 80063b2:	b480      	push	{r7}
 80063b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80063b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063c4:	d101      	bne.n	80063ca <LL_RCC_PLLSAI1_IsReady+0x18>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e000      	b.n	80063cc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b088      	sub	sp, #32
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80063de:	2300      	movs	r3, #0
 80063e0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80063e2:	2300      	movs	r3, #0
 80063e4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d034      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80063fa:	d021      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80063fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006400:	d81b      	bhi.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006402:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006406:	d01d      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006408:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800640c:	d815      	bhi.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00b      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006416:	d110      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006426:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006428:	e00d      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	3304      	adds	r3, #4
 800642e:	4618      	mov	r0, r3
 8006430:	f000 f947 	bl	80066c2 <RCCEx_PLLSAI1_ConfigNP>
 8006434:	4603      	mov	r3, r0
 8006436:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006438:	e005      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	77fb      	strb	r3, [r7, #31]
        break;
 800643e:	e002      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006440:	bf00      	nop
 8006442:	e000      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006446:	7ffb      	ldrb	r3, [r7, #31]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d105      	bne.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff fee8 	bl	8006226 <LL_RCC_SetSAIClockSource>
 8006456:	e001      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006458:	7ffb      	ldrb	r3, [r7, #31]
 800645a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006464:	2b00      	cmp	r3, #0
 8006466:	d046      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006468:	f7ff ff56 	bl	8006318 <LL_RCC_GetRTCClockSource>
 800646c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	429a      	cmp	r2, r3
 8006476:	d03c      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006478:	f7fe fc4e 	bl	8004d18 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d105      	bne.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff ff30 	bl	80062ec <LL_RCC_SetRTCClockSource>
 800648c:	e02e      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800648e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006496:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006498:	f7ff ff4b 	bl	8006332 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800649c:	f7ff ff5a 	bl	8006354 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064aa:	4313      	orrs	r3, r2
 80064ac:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80064ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80064b8:	f7ff fdf0 	bl	800609c <LL_RCC_LSE_IsEnabled>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d114      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064c2:	f7fd fca3 	bl	8003e0c <HAL_GetTick>
 80064c6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80064c8:	e00b      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ca:	f7fd fc9f 	bl	8003e0c <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d8:	4293      	cmp	r3, r2
 80064da:	d902      	bls.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	77fb      	strb	r3, [r7, #31]
              break;
 80064e0:	e004      	b.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80064e2:	f7ff fded 	bl	80060c0 <LL_RCC_LSE_IsReady>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d1ee      	bne.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80064ec:	7ffb      	ldrb	r3, [r7, #31]
 80064ee:	77bb      	strb	r3, [r7, #30]
 80064f0:	e001      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f2:	7ffb      	ldrb	r3, [r7, #31]
 80064f4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d004      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff fe2a 	bl	8006160 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d004      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff fe35 	bl	800618c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0310 	and.w	r3, r3, #16
 800652a:	2b00      	cmp	r3, #0
 800652c:	d004      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff fe5d 	bl	80061f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b00      	cmp	r3, #0
 8006542:	d004      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	4618      	mov	r0, r3
 800654a:	f7ff fe52 	bl	80061f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	2b00      	cmp	r3, #0
 8006558:	d004      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff fe2a 	bl	80061b8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0308 	and.w	r3, r3, #8
 800656c:	2b00      	cmp	r3, #0
 800656e:	d004      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	4618      	mov	r0, r3
 8006576:	f7ff fe1f 	bl	80061b8 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006582:	2b00      	cmp	r3, #0
 8006584:	d022      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658a:	4618      	mov	r0, r3
 800658c:	f7ff fe8d 	bl	80062aa <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006594:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006598:	d107      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800659a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065a8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065b2:	d10b      	bne.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3304      	adds	r3, #4
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 f8dd 	bl	8006778 <RCCEx_PLLSAI1_ConfigNQ>
 80065be:	4603      	mov	r3, r0
 80065c0:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80065c2:	7ffb      	ldrb	r3, [r7, #31]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80065c8:	7ffb      	ldrb	r3, [r7, #31]
 80065ca:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d02b      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e0:	d008      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065ea:	d003      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff fe2a 	bl	8006252 <LL_RCC_SetRNGClockSource>
 80065fe:	e00a      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	2000      	movs	r0, #0
 800660c:	f7ff fe21 	bl	8006252 <LL_RCC_SetRNGClockSource>
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f7ff fe34 	bl	800627e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800661e:	d107      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800662a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800662e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006638:	2b00      	cmp	r3, #0
 800663a:	d022      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff fe3d 	bl	80062c0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800664e:	d107      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800665a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800665e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006664:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006668:	d10b      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3304      	adds	r3, #4
 800666e:	4618      	mov	r0, r3
 8006670:	f000 f8dd 	bl	800682e <RCCEx_PLLSAI1_ConfigNR>
 8006674:	4603      	mov	r3, r0
 8006676:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8006678:	7ffb      	ldrb	r3, [r7, #31]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800667e:	7ffb      	ldrb	r3, [r7, #31]
 8006680:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d004      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff fd26 	bl	80060e4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d009      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff fd45 	bl	8006138 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7ff fd2c 	bl	8006110 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80066b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3720      	adds	r7, #32
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b084      	sub	sp, #16
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80066ce:	f7ff fe61 	bl	8006394 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80066d2:	f7fd fb9b 	bl	8003e0c <HAL_GetTick>
 80066d6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066d8:	e009      	b.n	80066ee <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066da:	f7fd fb97 	bl	8003e0c <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d902      	bls.n	80066ee <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	73fb      	strb	r3, [r7, #15]
      break;
 80066ec:	e004      	b.n	80066f8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066ee:	f7ff fe60 	bl	80063b2 <LL_RCC_PLLSAI1_IsReady>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1f0      	bne.n	80066da <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d137      	bne.n	800676e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80066fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006712:	4313      	orrs	r3, r2
 8006714:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006728:	4313      	orrs	r3, r2
 800672a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800672c:	f7ff fe23 	bl	8006376 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006730:	f7fd fb6c 	bl	8003e0c <HAL_GetTick>
 8006734:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006736:	e009      	b.n	800674c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006738:	f7fd fb68 	bl	8003e0c <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b02      	cmp	r3, #2
 8006744:	d902      	bls.n	800674c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	73fb      	strb	r3, [r7, #15]
        break;
 800674a:	e004      	b.n	8006756 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800674c:	f7ff fe31 	bl	80063b2 <LL_RCC_PLLSAI1_IsReady>
 8006750:	4603      	mov	r3, r0
 8006752:	2b01      	cmp	r3, #1
 8006754:	d1f0      	bne.n	8006738 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006756:	7bfb      	ldrb	r3, [r7, #15]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d108      	bne.n	800676e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800675c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006760:	691a      	ldr	r2, [r3, #16]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800676a:	4313      	orrs	r3, r2
 800676c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800676e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006780:	2300      	movs	r3, #0
 8006782:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006784:	f7ff fe06 	bl	8006394 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006788:	f7fd fb40 	bl	8003e0c <HAL_GetTick>
 800678c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800678e:	e009      	b.n	80067a4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006790:	f7fd fb3c 	bl	8003e0c <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b02      	cmp	r3, #2
 800679c:	d902      	bls.n	80067a4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	73fb      	strb	r3, [r7, #15]
      break;
 80067a2:	e004      	b.n	80067ae <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80067a4:	f7ff fe05 	bl	80063b2 <LL_RCC_PLLSAI1_IsReady>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1f0      	bne.n	8006790 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d137      	bne.n	8006824 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80067b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067c8:	4313      	orrs	r3, r2
 80067ca:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80067cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067de:	4313      	orrs	r3, r2
 80067e0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80067e2:	f7ff fdc8 	bl	8006376 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067e6:	f7fd fb11 	bl	8003e0c <HAL_GetTick>
 80067ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067ec:	e009      	b.n	8006802 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067ee:	f7fd fb0d 	bl	8003e0c <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d902      	bls.n	8006802 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	73fb      	strb	r3, [r7, #15]
        break;
 8006800:	e004      	b.n	800680c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006802:	f7ff fdd6 	bl	80063b2 <LL_RCC_PLLSAI1_IsReady>
 8006806:	4603      	mov	r3, r0
 8006808:	2b01      	cmp	r3, #1
 800680a:	d1f0      	bne.n	80067ee <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800680c:	7bfb      	ldrb	r3, [r7, #15]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d108      	bne.n	8006824 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006820:	4313      	orrs	r3, r2
 8006822:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006824:	7bfb      	ldrb	r3, [r7, #15]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800683a:	f7ff fdab 	bl	8006394 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800683e:	f7fd fae5 	bl	8003e0c <HAL_GetTick>
 8006842:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006844:	e009      	b.n	800685a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006846:	f7fd fae1 	bl	8003e0c <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b02      	cmp	r3, #2
 8006852:	d902      	bls.n	800685a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	73fb      	strb	r3, [r7, #15]
      break;
 8006858:	e004      	b.n	8006864 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800685a:	f7ff fdaa 	bl	80063b2 <LL_RCC_PLLSAI1_IsReady>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1f0      	bne.n	8006846 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d137      	bne.n	80068da <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800686a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	021b      	lsls	r3, r3, #8
 800687a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800687e:	4313      	orrs	r3, r2
 8006880:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006894:	4313      	orrs	r3, r2
 8006896:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006898:	f7ff fd6d 	bl	8006376 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800689c:	f7fd fab6 	bl	8003e0c <HAL_GetTick>
 80068a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80068a2:	e009      	b.n	80068b8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068a4:	f7fd fab2 	bl	8003e0c <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d902      	bls.n	80068b8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	73fb      	strb	r3, [r7, #15]
        break;
 80068b6:	e004      	b.n	80068c2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80068b8:	f7ff fd7b 	bl	80063b2 <LL_RCC_PLLSAI1_IsReady>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d1f0      	bne.n	80068a4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d108      	bne.n	80068da <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80068c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068cc:	691a      	ldr	r2, [r3, #16]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068d6:	4313      	orrs	r3, r2
 80068d8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80068da:	7bfb      	ldrb	r3, [r7, #15]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e027      	b.n	8006946 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	7a5b      	ldrb	r3, [r3, #9]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d105      	bne.n	800690c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fb fe02 	bl	8002510 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f023 0120 	bic.w	r1, r3, #32
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0204 	orr.w	r2, r2, #4
 8006936:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e090      	b.n	8006a82 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d106      	bne.n	800697a <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7fb fdf5 	bl	8002564 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2202      	movs	r2, #2
 800697e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	22ca      	movs	r2, #202	; 0xca
 8006988:	625a      	str	r2, [r3, #36]	; 0x24
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2253      	movs	r2, #83	; 0x53
 8006990:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f89f 	bl	8006ad6 <RTC_EnterInitMode>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d009      	beq.n	80069b2 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	22ff      	movs	r2, #255	; 0xff
 80069a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2204      	movs	r2, #4
 80069aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e067      	b.n	8006a82 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6812      	ldr	r2, [r2, #0]
 80069bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80069c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069c4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6899      	ldr	r1, [r3, #8]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	431a      	orrs	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	68d2      	ldr	r2, [r2, #12]
 80069ec:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6919      	ldr	r1, [r3, #16]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	041a      	lsls	r2, r3, #16
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68da      	ldr	r2, [r3, #12]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a10:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0203 	bic.w	r2, r2, #3
 8006a20:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	69da      	ldr	r2, [r3, #28]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f003 0320 	and.w	r3, r3, #32
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d113      	bne.n	8006a70 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f81e 	bl	8006a8a <HAL_RTC_WaitForSynchro>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00d      	beq.n	8006a70 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	22ff      	movs	r2, #255	; 0xff
 8006a5a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2204      	movs	r2, #4
 8006a60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e008      	b.n	8006a82 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	22ff      	movs	r2, #255	; 0xff
 8006a76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006a80:	2300      	movs	r3, #0
  }
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006aa0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006aa2:	f7fd f9b3 	bl	8003e0c <HAL_GetTick>
 8006aa6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006aa8:	e009      	b.n	8006abe <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006aaa:	f7fd f9af 	bl	8003e0c <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ab8:	d901      	bls.n	8006abe <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e007      	b.n	8006ace <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	f003 0320 	and.w	r3, r3, #32
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d0ee      	beq.n	8006aaa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d119      	bne.n	8006b20 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f04f 32ff 	mov.w	r2, #4294967295
 8006af4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006af6:	f7fd f989 	bl	8003e0c <HAL_GetTick>
 8006afa:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006afc:	e009      	b.n	8006b12 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006afe:	f7fd f985 	bl	8003e0c <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b0c:	d901      	bls.n	8006b12 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e007      	b.n	8006b22 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0ee      	beq.n	8006afe <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
	...

08006b2c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d101      	bne.n	8006b46 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006b42:	2302      	movs	r3, #2
 8006b44:	e0a8      	b.n	8006c98 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2202      	movs	r2, #2
 8006b52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	22ca      	movs	r2, #202	; 0xca
 8006b5c:	625a      	str	r2, [r3, #36]	; 0x24
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2253      	movs	r2, #83	; 0x53
 8006b64:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d020      	beq.n	8006bb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006b74:	f7fd f94a 	bl	8003e0c <HAL_GetTick>
 8006b78:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006b7a:	e015      	b.n	8006ba8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b7c:	f7fd f946 	bl	8003e0c <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b8a:	d90d      	bls.n	8006ba8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	22ff      	movs	r2, #255	; 0xff
 8006b92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2203      	movs	r2, #3
 8006b98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e077      	b.n	8006c98 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	f003 0304 	and.w	r3, r3, #4
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e2      	bne.n	8006b7c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bc4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006bd6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006bd8:	f7fd f918 	bl	8003e0c <HAL_GetTick>
 8006bdc:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006bde:	e015      	b.n	8006c0c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006be0:	f7fd f914 	bl	8003e0c <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bee:	d90d      	bls.n	8006c0c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	22ff      	movs	r2, #255	; 0xff
 8006bf6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2203      	movs	r2, #3
 8006bfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e045      	b.n	8006c98 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d0e2      	beq.n	8006be0 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0207 	bic.w	r2, r2, #7
 8006c30:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6899      	ldr	r1, [r3, #8]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006c42:	4b17      	ldr	r3, [pc, #92]	; (8006ca0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c48:	4a15      	ldr	r2, [pc, #84]	; (8006ca0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006c4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c4e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006c52:	4b13      	ldr	r3, [pc, #76]	; (8006ca0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a12      	ldr	r2, [pc, #72]	; (8006ca0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006c58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c5c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c6c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689a      	ldr	r2, [r3, #8]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c7c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	22ff      	movs	r2, #255	; 0xff
 8006c84:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3718      	adds	r7, #24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	58000800 	.word	0x58000800

08006ca4 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d101      	bne.n	8006cba <HAL_RTCEx_EnableBypassShadow+0x16>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e024      	b.n	8006d04 <HAL_RTCEx_EnableBypassShadow+0x60>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	22ca      	movs	r2, #202	; 0xca
 8006cd0:	625a      	str	r2, [r3, #36]	; 0x24
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2253      	movs	r2, #83	; 0x53
 8006cd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f042 0220 	orr.w	r2, r2, #32
 8006ce8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	22ff      	movs	r2, #255	; 0xff
 8006cf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <LL_RCC_GetUSARTClockSource>:
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4013      	ands	r3, r2
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <LL_RCC_GetLPUARTClockSource>:
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4013      	ands	r3, r2
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e042      	b.n	8006de8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d106      	bne.n	8006d7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7fb fad7 	bl	8002328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2224      	movs	r2, #36	; 0x24
 8006d7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0201 	bic.w	r2, r2, #1
 8006d90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fbf6 	bl	8007584 <UART_SetConfig>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d101      	bne.n	8006da2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e022      	b.n	8006de8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fe12 	bl	80079d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006dbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689a      	ldr	r2, [r3, #8]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f042 0201 	orr.w	r2, r2, #1
 8006dde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fe99 	bl	8007b18 <UART_CheckIdleState>
 8006de6:	4603      	mov	r3, r0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b08a      	sub	sp, #40	; 0x28
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d17a      	bne.n	8006efe <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <HAL_UART_Transmit_DMA+0x24>
 8006e0e:	88fb      	ldrh	r3, [r7, #6]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e073      	b.n	8006f00 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d101      	bne.n	8006e26 <HAL_UART_Transmit_DMA+0x36>
 8006e22:	2302      	movs	r3, #2
 8006e24:	e06c      	b.n	8006f00 <HAL_UART_Transmit_DMA+0x110>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	88fa      	ldrh	r2, [r7, #6]
 8006e38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	88fa      	ldrh	r2, [r7, #6]
 8006e40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2221      	movs	r2, #33	; 0x21
 8006e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d02c      	beq.n	8006eb6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e60:	4a29      	ldr	r2, [pc, #164]	; (8006f08 <HAL_UART_Transmit_DMA+0x118>)
 8006e62:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e68:	4a28      	ldr	r2, [pc, #160]	; (8006f0c <HAL_UART_Transmit_DMA+0x11c>)
 8006e6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e70:	4a27      	ldr	r2, [pc, #156]	; (8006f10 <HAL_UART_Transmit_DMA+0x120>)
 8006e72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e78:	2200      	movs	r2, #0
 8006e7a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e84:	4619      	mov	r1, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3328      	adds	r3, #40	; 0x28
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	88fb      	ldrh	r3, [r7, #6]
 8006e90:	f7fd fa2e 	bl	80042f0 <HAL_DMA_Start_IT>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00d      	beq.n	8006eb6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2210      	movs	r2, #16
 8006e9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e024      	b.n	8006f00 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2240      	movs	r2, #64	; 0x40
 8006ebc:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3308      	adds	r3, #8
 8006ecc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	e853 3f00 	ldrex	r3, [r3]
 8006ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006edc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee6:	623a      	str	r2, [r7, #32]
 8006ee8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eea:	69f9      	ldr	r1, [r7, #28]
 8006eec:	6a3a      	ldr	r2, [r7, #32]
 8006eee:	e841 2300 	strex	r3, r2, [r1]
 8006ef2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1e5      	bne.n	8006ec6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	e000      	b.n	8006f00 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8006efe:	2302      	movs	r3, #2
  }
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3728      	adds	r7, #40	; 0x28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	08007e8d 	.word	0x08007e8d
 8006f0c:	08007f27 	.word	0x08007f27
 8006f10:	08007f43 	.word	0x08007f43

08006f14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b0ba      	sub	sp, #232	; 0xe8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006f3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006f42:	4013      	ands	r3, r2
 8006f44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006f48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d11b      	bne.n	8006f88 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f54:	f003 0320 	and.w	r3, r3, #32
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d015      	beq.n	8006f88 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f60:	f003 0320 	and.w	r3, r3, #32
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d105      	bne.n	8006f74 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d009      	beq.n	8006f88 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 82d6 	beq.w	800752a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	4798      	blx	r3
      }
      return;
 8006f86:	e2d0      	b.n	800752a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 811f 	beq.w	80071d0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006f92:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006f96:	4b8b      	ldr	r3, [pc, #556]	; (80071c4 <HAL_UART_IRQHandler+0x2b0>)
 8006f98:	4013      	ands	r3, r2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d106      	bne.n	8006fac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006f9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006fa2:	4b89      	ldr	r3, [pc, #548]	; (80071c8 <HAL_UART_IRQHandler+0x2b4>)
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 8112 	beq.w	80071d0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d011      	beq.n	8006fdc <HAL_UART_IRQHandler+0xc8>
 8006fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00b      	beq.n	8006fdc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd2:	f043 0201 	orr.w	r2, r3, #1
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d011      	beq.n	800700c <HAL_UART_IRQHandler+0xf8>
 8006fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00b      	beq.n	800700c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007002:	f043 0204 	orr.w	r2, r3, #4
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800700c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	d011      	beq.n	800703c <HAL_UART_IRQHandler+0x128>
 8007018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00b      	beq.n	800703c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2204      	movs	r2, #4
 800702a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007032:	f043 0202 	orr.w	r2, r3, #2
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800703c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007040:	f003 0308 	and.w	r3, r3, #8
 8007044:	2b00      	cmp	r3, #0
 8007046:	d017      	beq.n	8007078 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	d105      	bne.n	8007060 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007054:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007058:	4b5a      	ldr	r3, [pc, #360]	; (80071c4 <HAL_UART_IRQHandler+0x2b0>)
 800705a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00b      	beq.n	8007078 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2208      	movs	r2, #8
 8007066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800706e:	f043 0208 	orr.w	r2, r3, #8
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007080:	2b00      	cmp	r3, #0
 8007082:	d012      	beq.n	80070aa <HAL_UART_IRQHandler+0x196>
 8007084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007088:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00c      	beq.n	80070aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007098:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070a0:	f043 0220 	orr.w	r2, r3, #32
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 823c 	beq.w	800752e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80070b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d013      	beq.n	80070ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80070c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d105      	bne.n	80070da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80070ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d007      	beq.n	80070ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fe:	2b40      	cmp	r3, #64	; 0x40
 8007100:	d005      	beq.n	800710e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007106:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800710a:	2b00      	cmp	r3, #0
 800710c:	d04f      	beq.n	80071ae <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fe56 	bl	8007dc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711e:	2b40      	cmp	r3, #64	; 0x40
 8007120:	d141      	bne.n	80071a6 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3308      	adds	r3, #8
 8007128:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007138:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800713c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007140:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3308      	adds	r3, #8
 800714a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800714e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007152:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800715a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007166:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1d9      	bne.n	8007122 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d013      	beq.n	800719e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800717a:	4a14      	ldr	r2, [pc, #80]	; (80071cc <HAL_UART_IRQHandler+0x2b8>)
 800717c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007182:	4618      	mov	r0, r3
 8007184:	f7fd f98e 	bl	80044a4 <HAL_DMA_Abort_IT>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d017      	beq.n	80071be <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007198:	4610      	mov	r0, r2
 800719a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800719c:	e00f      	b.n	80071be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f9da 	bl	8007558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071a4:	e00b      	b.n	80071be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f9d6 	bl	8007558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ac:	e007      	b.n	80071be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f9d2 	bl	8007558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80071bc:	e1b7      	b.n	800752e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071be:	bf00      	nop
    return;
 80071c0:	e1b5      	b.n	800752e <HAL_UART_IRQHandler+0x61a>
 80071c2:	bf00      	nop
 80071c4:	10000001 	.word	0x10000001
 80071c8:	04000120 	.word	0x04000120
 80071cc:	08007fc3 	.word	0x08007fc3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	f040 814a 	bne.w	800746e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80071da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071de:	f003 0310 	and.w	r3, r3, #16
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 8143 	beq.w	800746e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80071e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ec:	f003 0310 	and.w	r3, r3, #16
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 813c 	beq.w	800746e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2210      	movs	r2, #16
 80071fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007208:	2b40      	cmp	r3, #64	; 0x40
 800720a:	f040 80b5 	bne.w	8007378 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800721a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 8187 	beq.w	8007532 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800722a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800722e:	429a      	cmp	r2, r3
 8007230:	f080 817f 	bcs.w	8007532 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800723a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	2b00      	cmp	r3, #0
 800724c:	f040 8086 	bne.w	800735c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007258:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800725c:	e853 3f00 	ldrex	r3, [r3]
 8007260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007264:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800726c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	461a      	mov	r2, r3
 8007276:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800727a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800727e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007282:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007286:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007292:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1da      	bne.n	8007250 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3308      	adds	r3, #8
 80072a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80072aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072ac:	f023 0301 	bic.w	r3, r3, #1
 80072b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3308      	adds	r3, #8
 80072ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072ca:	e841 2300 	strex	r3, r2, [r1]
 80072ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80072d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1e1      	bne.n	800729a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3308      	adds	r3, #8
 80072dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072e0:	e853 3f00 	ldrex	r3, [r3]
 80072e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80072e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3308      	adds	r3, #8
 80072f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80072fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80072fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007300:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007302:	e841 2300 	strex	r3, r2, [r1]
 8007306:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1e3      	bne.n	80072d6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2220      	movs	r2, #32
 8007312:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800732a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800732c:	f023 0310 	bic.w	r3, r3, #16
 8007330:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	461a      	mov	r2, r3
 800733a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800733e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007340:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007344:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007346:	e841 2300 	strex	r3, r2, [r1]
 800734a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800734c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e4      	bne.n	800731c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007356:	4618      	mov	r0, r3
 8007358:	f7fd f845 	bl	80043e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007368:	b29b      	uxth	r3, r3
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	b29b      	uxth	r3, r3
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f8fb 	bl	800756c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007376:	e0dc      	b.n	8007532 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007384:	b29b      	uxth	r3, r3
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007392:	b29b      	uxth	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 80ce 	beq.w	8007536 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800739a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 80c9 	beq.w	8007536 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	461a      	mov	r2, r3
 80073c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073c6:	647b      	str	r3, [r7, #68]	; 0x44
 80073c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e4      	bne.n	80073a4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3308      	adds	r3, #8
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	623b      	str	r3, [r7, #32]
   return(result);
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073f0:	f023 0301 	bic.w	r3, r3, #1
 80073f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3308      	adds	r3, #8
 80073fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007402:	633a      	str	r2, [r7, #48]	; 0x30
 8007404:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1e1      	bne.n	80073da <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2220      	movs	r2, #32
 800741a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	e853 3f00 	ldrex	r3, [r3]
 8007436:	60fb      	str	r3, [r7, #12]
   return(result);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f023 0310 	bic.w	r3, r3, #16
 800743e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800744c:	61fb      	str	r3, [r7, #28]
 800744e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007450:	69b9      	ldr	r1, [r7, #24]
 8007452:	69fa      	ldr	r2, [r7, #28]
 8007454:	e841 2300 	strex	r3, r2, [r1]
 8007458:	617b      	str	r3, [r7, #20]
   return(result);
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1e4      	bne.n	800742a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007460:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f880 	bl	800756c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800746c:	e063      	b.n	8007536 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800746e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00e      	beq.n	8007498 <HAL_UART_IRQHandler+0x584>
 800747a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800747e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d008      	beq.n	8007498 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800748e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fdd7 	bl	8008044 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007496:	e051      	b.n	800753c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800749c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d014      	beq.n	80074ce <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80074a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d105      	bne.n	80074bc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80074b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d008      	beq.n	80074ce <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d03a      	beq.n	800753a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	4798      	blx	r3
    }
    return;
 80074cc:	e035      	b.n	800753a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80074ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d009      	beq.n	80074ee <HAL_UART_IRQHandler+0x5da>
 80074da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fd81 	bl	8007fee <UART_EndTransmit_IT>
    return;
 80074ec:	e026      	b.n	800753c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80074ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d009      	beq.n	800750e <HAL_UART_IRQHandler+0x5fa>
 80074fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fdb0 	bl	800806c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800750c:	e016      	b.n	800753c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800750e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d010      	beq.n	800753c <HAL_UART_IRQHandler+0x628>
 800751a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800751e:	2b00      	cmp	r3, #0
 8007520:	da0c      	bge.n	800753c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fd98 	bl	8008058 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007528:	e008      	b.n	800753c <HAL_UART_IRQHandler+0x628>
      return;
 800752a:	bf00      	nop
 800752c:	e006      	b.n	800753c <HAL_UART_IRQHandler+0x628>
    return;
 800752e:	bf00      	nop
 8007530:	e004      	b.n	800753c <HAL_UART_IRQHandler+0x628>
      return;
 8007532:	bf00      	nop
 8007534:	e002      	b.n	800753c <HAL_UART_IRQHandler+0x628>
      return;
 8007536:	bf00      	nop
 8007538:	e000      	b.n	800753c <HAL_UART_IRQHandler+0x628>
    return;
 800753a:	bf00      	nop
  }
}
 800753c:	37e8      	adds	r7, #232	; 0xe8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop

08007544 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007588:	b08c      	sub	sp, #48	; 0x30
 800758a:	af00      	add	r7, sp, #0
 800758c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	431a      	orrs	r2, r3
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	431a      	orrs	r2, r3
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	4baf      	ldr	r3, [pc, #700]	; (8007870 <UART_SetConfig+0x2ec>)
 80075b4:	4013      	ands	r3, r2
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	6812      	ldr	r2, [r2, #0]
 80075ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075bc:	430b      	orrs	r3, r1
 80075be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	68da      	ldr	r2, [r3, #12]
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4aa4      	ldr	r2, [pc, #656]	; (8007874 <UART_SetConfig+0x2f0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d004      	beq.n	80075f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ec:	4313      	orrs	r3, r2
 80075ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80075fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	6812      	ldr	r2, [r2, #0]
 8007602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007604:	430b      	orrs	r3, r1
 8007606:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760e:	f023 010f 	bic.w	r1, r3, #15
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a95      	ldr	r2, [pc, #596]	; (8007878 <UART_SetConfig+0x2f4>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d125      	bne.n	8007674 <UART_SetConfig+0xf0>
 8007628:	2003      	movs	r0, #3
 800762a:	f7ff fb71 	bl	8006d10 <LL_RCC_GetUSARTClockSource>
 800762e:	4603      	mov	r3, r0
 8007630:	2b03      	cmp	r3, #3
 8007632:	d81b      	bhi.n	800766c <UART_SetConfig+0xe8>
 8007634:	a201      	add	r2, pc, #4	; (adr r2, 800763c <UART_SetConfig+0xb8>)
 8007636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763a:	bf00      	nop
 800763c:	0800764d 	.word	0x0800764d
 8007640:	0800765d 	.word	0x0800765d
 8007644:	08007655 	.word	0x08007655
 8007648:	08007665 	.word	0x08007665
 800764c:	2301      	movs	r3, #1
 800764e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007652:	e042      	b.n	80076da <UART_SetConfig+0x156>
 8007654:	2302      	movs	r3, #2
 8007656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800765a:	e03e      	b.n	80076da <UART_SetConfig+0x156>
 800765c:	2304      	movs	r3, #4
 800765e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007662:	e03a      	b.n	80076da <UART_SetConfig+0x156>
 8007664:	2308      	movs	r3, #8
 8007666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800766a:	e036      	b.n	80076da <UART_SetConfig+0x156>
 800766c:	2310      	movs	r3, #16
 800766e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007672:	e032      	b.n	80076da <UART_SetConfig+0x156>
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a7e      	ldr	r2, [pc, #504]	; (8007874 <UART_SetConfig+0x2f0>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d12a      	bne.n	80076d4 <UART_SetConfig+0x150>
 800767e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007682:	f7ff fb55 	bl	8006d30 <LL_RCC_GetLPUARTClockSource>
 8007686:	4603      	mov	r3, r0
 8007688:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800768c:	d01a      	beq.n	80076c4 <UART_SetConfig+0x140>
 800768e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007692:	d81b      	bhi.n	80076cc <UART_SetConfig+0x148>
 8007694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007698:	d00c      	beq.n	80076b4 <UART_SetConfig+0x130>
 800769a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800769e:	d815      	bhi.n	80076cc <UART_SetConfig+0x148>
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d003      	beq.n	80076ac <UART_SetConfig+0x128>
 80076a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a8:	d008      	beq.n	80076bc <UART_SetConfig+0x138>
 80076aa:	e00f      	b.n	80076cc <UART_SetConfig+0x148>
 80076ac:	2300      	movs	r3, #0
 80076ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076b2:	e012      	b.n	80076da <UART_SetConfig+0x156>
 80076b4:	2302      	movs	r3, #2
 80076b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076ba:	e00e      	b.n	80076da <UART_SetConfig+0x156>
 80076bc:	2304      	movs	r3, #4
 80076be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076c2:	e00a      	b.n	80076da <UART_SetConfig+0x156>
 80076c4:	2308      	movs	r3, #8
 80076c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076ca:	e006      	b.n	80076da <UART_SetConfig+0x156>
 80076cc:	2310      	movs	r3, #16
 80076ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076d2:	e002      	b.n	80076da <UART_SetConfig+0x156>
 80076d4:	2310      	movs	r3, #16
 80076d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a65      	ldr	r2, [pc, #404]	; (8007874 <UART_SetConfig+0x2f0>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	f040 8097 	bne.w	8007814 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076ea:	2b08      	cmp	r3, #8
 80076ec:	d823      	bhi.n	8007736 <UART_SetConfig+0x1b2>
 80076ee:	a201      	add	r2, pc, #4	; (adr r2, 80076f4 <UART_SetConfig+0x170>)
 80076f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f4:	08007719 	.word	0x08007719
 80076f8:	08007737 	.word	0x08007737
 80076fc:	08007721 	.word	0x08007721
 8007700:	08007737 	.word	0x08007737
 8007704:	08007727 	.word	0x08007727
 8007708:	08007737 	.word	0x08007737
 800770c:	08007737 	.word	0x08007737
 8007710:	08007737 	.word	0x08007737
 8007714:	0800772f 	.word	0x0800772f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007718:	f7fe fbe0 	bl	8005edc <HAL_RCC_GetPCLK1Freq>
 800771c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800771e:	e010      	b.n	8007742 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007720:	4b56      	ldr	r3, [pc, #344]	; (800787c <UART_SetConfig+0x2f8>)
 8007722:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007724:	e00d      	b.n	8007742 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007726:	f7fe fb59 	bl	8005ddc <HAL_RCC_GetSysClockFreq>
 800772a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800772c:	e009      	b.n	8007742 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800772e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007732:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007734:	e005      	b.n	8007742 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007740:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 812b 	beq.w	80079a0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774e:	4a4c      	ldr	r2, [pc, #304]	; (8007880 <UART_SetConfig+0x2fc>)
 8007750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007754:	461a      	mov	r2, r3
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	fbb3 f3f2 	udiv	r3, r3, r2
 800775c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	685a      	ldr	r2, [r3, #4]
 8007762:	4613      	mov	r3, r2
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	4413      	add	r3, r2
 8007768:	69ba      	ldr	r2, [r7, #24]
 800776a:	429a      	cmp	r2, r3
 800776c:	d305      	bcc.n	800777a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	429a      	cmp	r2, r3
 8007778:	d903      	bls.n	8007782 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007780:	e10e      	b.n	80079a0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	2200      	movs	r2, #0
 8007786:	60bb      	str	r3, [r7, #8]
 8007788:	60fa      	str	r2, [r7, #12]
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778e:	4a3c      	ldr	r2, [pc, #240]	; (8007880 <UART_SetConfig+0x2fc>)
 8007790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007794:	b29b      	uxth	r3, r3
 8007796:	2200      	movs	r2, #0
 8007798:	603b      	str	r3, [r7, #0]
 800779a:	607a      	str	r2, [r7, #4]
 800779c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077a4:	f7f8 fd44 	bl	8000230 <__aeabi_uldivmod>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	4610      	mov	r0, r2
 80077ae:	4619      	mov	r1, r3
 80077b0:	f04f 0200 	mov.w	r2, #0
 80077b4:	f04f 0300 	mov.w	r3, #0
 80077b8:	020b      	lsls	r3, r1, #8
 80077ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077be:	0202      	lsls	r2, r0, #8
 80077c0:	6979      	ldr	r1, [r7, #20]
 80077c2:	6849      	ldr	r1, [r1, #4]
 80077c4:	0849      	lsrs	r1, r1, #1
 80077c6:	2000      	movs	r0, #0
 80077c8:	460c      	mov	r4, r1
 80077ca:	4605      	mov	r5, r0
 80077cc:	eb12 0804 	adds.w	r8, r2, r4
 80077d0:	eb43 0905 	adc.w	r9, r3, r5
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	469a      	mov	sl, r3
 80077dc:	4693      	mov	fp, r2
 80077de:	4652      	mov	r2, sl
 80077e0:	465b      	mov	r3, fp
 80077e2:	4640      	mov	r0, r8
 80077e4:	4649      	mov	r1, r9
 80077e6:	f7f8 fd23 	bl	8000230 <__aeabi_uldivmod>
 80077ea:	4602      	mov	r2, r0
 80077ec:	460b      	mov	r3, r1
 80077ee:	4613      	mov	r3, r2
 80077f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077f8:	d308      	bcc.n	800780c <UART_SetConfig+0x288>
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007800:	d204      	bcs.n	800780c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6a3a      	ldr	r2, [r7, #32]
 8007808:	60da      	str	r2, [r3, #12]
 800780a:	e0c9      	b.n	80079a0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007812:	e0c5      	b.n	80079a0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800781c:	d16e      	bne.n	80078fc <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800781e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007822:	3b01      	subs	r3, #1
 8007824:	2b07      	cmp	r3, #7
 8007826:	d82d      	bhi.n	8007884 <UART_SetConfig+0x300>
 8007828:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <UART_SetConfig+0x2ac>)
 800782a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782e:	bf00      	nop
 8007830:	08007851 	.word	0x08007851
 8007834:	08007859 	.word	0x08007859
 8007838:	08007885 	.word	0x08007885
 800783c:	0800785f 	.word	0x0800785f
 8007840:	08007885 	.word	0x08007885
 8007844:	08007885 	.word	0x08007885
 8007848:	08007885 	.word	0x08007885
 800784c:	08007867 	.word	0x08007867
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007850:	f7fe fb5a 	bl	8005f08 <HAL_RCC_GetPCLK2Freq>
 8007854:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007856:	e01b      	b.n	8007890 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007858:	4b08      	ldr	r3, [pc, #32]	; (800787c <UART_SetConfig+0x2f8>)
 800785a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800785c:	e018      	b.n	8007890 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800785e:	f7fe fabd 	bl	8005ddc <HAL_RCC_GetSysClockFreq>
 8007862:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007864:	e014      	b.n	8007890 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800786a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800786c:	e010      	b.n	8007890 <UART_SetConfig+0x30c>
 800786e:	bf00      	nop
 8007870:	cfff69f3 	.word	0xcfff69f3
 8007874:	40008000 	.word	0x40008000
 8007878:	40013800 	.word	0x40013800
 800787c:	00f42400 	.word	0x00f42400
 8007880:	0800d5f4 	.word	0x0800d5f4
      default:
        pclk = 0U;
 8007884:	2300      	movs	r3, #0
 8007886:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800788e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 8084 	beq.w	80079a0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	4a4b      	ldr	r2, [pc, #300]	; (80079cc <UART_SetConfig+0x448>)
 800789e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078a2:	461a      	mov	r2, r3
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80078aa:	005a      	lsls	r2, r3, #1
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	085b      	lsrs	r3, r3, #1
 80078b2:	441a      	add	r2, r3
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078bc:	b29b      	uxth	r3, r3
 80078be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	2b0f      	cmp	r3, #15
 80078c4:	d916      	bls.n	80078f4 <UART_SetConfig+0x370>
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078cc:	d212      	bcs.n	80078f4 <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	f023 030f 	bic.w	r3, r3, #15
 80078d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	085b      	lsrs	r3, r3, #1
 80078dc:	b29b      	uxth	r3, r3
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	8bfb      	ldrh	r3, [r7, #30]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	8bfa      	ldrh	r2, [r7, #30]
 80078f0:	60da      	str	r2, [r3, #12]
 80078f2:	e055      	b.n	80079a0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80078fa:	e051      	b.n	80079a0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007900:	3b01      	subs	r3, #1
 8007902:	2b07      	cmp	r3, #7
 8007904:	d821      	bhi.n	800794a <UART_SetConfig+0x3c6>
 8007906:	a201      	add	r2, pc, #4	; (adr r2, 800790c <UART_SetConfig+0x388>)
 8007908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790c:	0800792d 	.word	0x0800792d
 8007910:	08007935 	.word	0x08007935
 8007914:	0800794b 	.word	0x0800794b
 8007918:	0800793b 	.word	0x0800793b
 800791c:	0800794b 	.word	0x0800794b
 8007920:	0800794b 	.word	0x0800794b
 8007924:	0800794b 	.word	0x0800794b
 8007928:	08007943 	.word	0x08007943
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800792c:	f7fe faec 	bl	8005f08 <HAL_RCC_GetPCLK2Freq>
 8007930:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007932:	e010      	b.n	8007956 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007934:	4b26      	ldr	r3, [pc, #152]	; (80079d0 <UART_SetConfig+0x44c>)
 8007936:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007938:	e00d      	b.n	8007956 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800793a:	f7fe fa4f 	bl	8005ddc <HAL_RCC_GetSysClockFreq>
 800793e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007940:	e009      	b.n	8007956 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007946:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007948:	e005      	b.n	8007956 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800794a:	2300      	movs	r3, #0
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007954:	bf00      	nop
    }

    if (pclk != 0U)
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	2b00      	cmp	r3, #0
 800795a:	d021      	beq.n	80079a0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	4a1a      	ldr	r2, [pc, #104]	; (80079cc <UART_SetConfig+0x448>)
 8007962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007966:	461a      	mov	r2, r3
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	fbb3 f2f2 	udiv	r2, r3, r2
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	085b      	lsrs	r3, r3, #1
 8007974:	441a      	add	r2, r3
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	fbb2 f3f3 	udiv	r3, r2, r3
 800797e:	b29b      	uxth	r3, r3
 8007980:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007982:	6a3b      	ldr	r3, [r7, #32]
 8007984:	2b0f      	cmp	r3, #15
 8007986:	d908      	bls.n	800799a <UART_SetConfig+0x416>
 8007988:	6a3b      	ldr	r3, [r7, #32]
 800798a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800798e:	d204      	bcs.n	800799a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6a3a      	ldr	r2, [r7, #32]
 8007996:	60da      	str	r2, [r3, #12]
 8007998:	e002      	b.n	80079a0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	2200      	movs	r2, #0
 80079b4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2200      	movs	r2, #0
 80079ba:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80079bc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3730      	adds	r7, #48	; 0x30
 80079c4:	46bd      	mov	sp, r7
 80079c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079ca:	bf00      	nop
 80079cc:	0800d5f4 	.word	0x0800d5f4
 80079d0:	00f42400 	.word	0x00f42400

080079d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00a      	beq.n	80079fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00a      	beq.n	8007a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	f003 0304 	and.w	r3, r3, #4
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00a      	beq.n	8007a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a46:	f003 0308 	and.w	r3, r3, #8
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00a      	beq.n	8007a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	430a      	orrs	r2, r1
 8007a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a68:	f003 0310 	and.w	r3, r3, #16
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00a      	beq.n	8007a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00a      	beq.n	8007aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d01a      	beq.n	8007aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ad2:	d10a      	bne.n	8007aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00a      	beq.n	8007b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	605a      	str	r2, [r3, #4]
  }
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af02      	add	r7, sp, #8
 8007b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b28:	f7fc f970 	bl	8003e0c <HAL_GetTick>
 8007b2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0308 	and.w	r3, r3, #8
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d10e      	bne.n	8007b5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f82f 	bl	8007bae <UART_WaitOnFlagUntilTimeout>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b56:	2303      	movs	r3, #3
 8007b58:	e025      	b.n	8007ba6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	d10e      	bne.n	8007b86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f819 	bl	8007bae <UART_WaitOnFlagUntilTimeout>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e00f      	b.n	8007ba6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2220      	movs	r2, #32
 8007b92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b09c      	sub	sp, #112	; 0x70
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	60f8      	str	r0, [r7, #12]
 8007bb6:	60b9      	str	r1, [r7, #8]
 8007bb8:	603b      	str	r3, [r7, #0]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bbe:	e0a9      	b.n	8007d14 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc6:	f000 80a5 	beq.w	8007d14 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bca:	f7fc f91f 	bl	8003e0c <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d302      	bcc.n	8007be0 <UART_WaitOnFlagUntilTimeout+0x32>
 8007bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d140      	bne.n	8007c62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bf4:	667b      	str	r3, [r7, #100]	; 0x64
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e6      	bne.n	8007be0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3308      	adds	r3, #8
 8007c18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1c:	e853 3f00 	ldrex	r3, [r3]
 8007c20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c24:	f023 0301 	bic.w	r3, r3, #1
 8007c28:	663b      	str	r3, [r7, #96]	; 0x60
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3308      	adds	r3, #8
 8007c30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c32:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e5      	bne.n	8007c12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e069      	b.n	8007d36 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0304 	and.w	r3, r3, #4
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d051      	beq.n	8007d14 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c7e:	d149      	bne.n	8007d14 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8007caa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e6      	bne.n	8007c8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3308      	adds	r3, #8
 8007cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	613b      	str	r3, [r7, #16]
   return(result);
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	f023 0301 	bic.w	r3, r3, #1
 8007cd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3308      	adds	r3, #8
 8007cda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007cdc:	623a      	str	r2, [r7, #32]
 8007cde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce0:	69f9      	ldr	r1, [r7, #28]
 8007ce2:	6a3a      	ldr	r2, [r7, #32]
 8007ce4:	e841 2300 	strex	r3, r2, [r1]
 8007ce8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1e5      	bne.n	8007cbc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2220      	movs	r2, #32
 8007d04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e010      	b.n	8007d36 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	69da      	ldr	r2, [r3, #28]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	bf0c      	ite	eq
 8007d24:	2301      	moveq	r3, #1
 8007d26:	2300      	movne	r3, #0
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	79fb      	ldrb	r3, [r7, #7]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	f43f af46 	beq.w	8007bc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3770      	adds	r7, #112	; 0x70
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b08f      	sub	sp, #60	; 0x3c
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	e853 3f00 	ldrex	r3, [r3]
 8007d52:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	461a      	mov	r2, r3
 8007d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d66:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d6c:	e841 2300 	strex	r3, r2, [r1]
 8007d70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1e6      	bne.n	8007d46 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3308      	adds	r3, #8
 8007d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3308      	adds	r3, #8
 8007d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d98:	61ba      	str	r2, [r7, #24]
 8007d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9c:	6979      	ldr	r1, [r7, #20]
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	e841 2300 	strex	r3, r2, [r1]
 8007da4:	613b      	str	r3, [r7, #16]
   return(result);
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1e5      	bne.n	8007d78 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2220      	movs	r2, #32
 8007db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007db4:	bf00      	nop
 8007db6:	373c      	adds	r7, #60	; 0x3c
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b095      	sub	sp, #84	; 0x54
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007de6:	643b      	str	r3, [r7, #64]	; 0x40
 8007de8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dee:	e841 2300 	strex	r3, r2, [r1]
 8007df2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1e6      	bne.n	8007dc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3308      	adds	r3, #8
 8007e00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	e853 3f00 	ldrex	r3, [r3]
 8007e08:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e10:	f023 0301 	bic.w	r3, r3, #1
 8007e14:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3308      	adds	r3, #8
 8007e1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e3      	bne.n	8007dfa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d118      	bne.n	8007e6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	e853 3f00 	ldrex	r3, [r3]
 8007e46:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f023 0310 	bic.w	r3, r3, #16
 8007e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	461a      	mov	r2, r3
 8007e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e58:	61bb      	str	r3, [r7, #24]
 8007e5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	6979      	ldr	r1, [r7, #20]
 8007e5e:	69ba      	ldr	r2, [r7, #24]
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	613b      	str	r3, [r7, #16]
   return(result);
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e6      	bne.n	8007e3a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007e80:	bf00      	nop
 8007e82:	3754      	adds	r7, #84	; 0x54
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b090      	sub	sp, #64	; 0x40
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e98:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0320 	and.w	r3, r3, #32
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d137      	bne.n	8007f18 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	e853 3f00 	ldrex	r3, [r3]
 8007ebe:	623b      	str	r3, [r7, #32]
   return(result);
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3308      	adds	r3, #8
 8007ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ed0:	633a      	str	r2, [r7, #48]	; 0x30
 8007ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ed8:	e841 2300 	strex	r3, r2, [r1]
 8007edc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1e5      	bne.n	8007eb0 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8007efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f02:	61fb      	str	r3, [r7, #28]
 8007f04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f06:	69b9      	ldr	r1, [r7, #24]
 8007f08:	69fa      	ldr	r2, [r7, #28]
 8007f0a:	e841 2300 	strex	r3, r2, [r1]
 8007f0e:	617b      	str	r3, [r7, #20]
   return(result);
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1e6      	bne.n	8007ee4 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f16:	e002      	b.n	8007f1e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007f18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007f1a:	f7f9 ff4d 	bl	8001db8 <HAL_UART_TxCpltCallback>
}
 8007f1e:	bf00      	nop
 8007f20:	3740      	adds	r7, #64	; 0x40
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f32:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f7ff fb05 	bl	8007544 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f3a:	bf00      	nop
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b086      	sub	sp, #24
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f56:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f6a:	2b80      	cmp	r3, #128	; 0x80
 8007f6c:	d109      	bne.n	8007f82 <UART_DMAError+0x40>
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	2b21      	cmp	r3, #33	; 0x21
 8007f72:	d106      	bne.n	8007f82 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007f7c:	6978      	ldr	r0, [r7, #20]
 8007f7e:	f7ff fede 	bl	8007d3e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f8c:	2b40      	cmp	r3, #64	; 0x40
 8007f8e:	d109      	bne.n	8007fa4 <UART_DMAError+0x62>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b22      	cmp	r3, #34	; 0x22
 8007f94:	d106      	bne.n	8007fa4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007f9e:	6978      	ldr	r0, [r7, #20]
 8007fa0:	f7ff ff0e 	bl	8007dc0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007faa:	f043 0210 	orr.w	r2, r3, #16
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fb4:	6978      	ldr	r0, [r7, #20]
 8007fb6:	f7ff facf 	bl	8007558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fba:	bf00      	nop
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f7ff fab9 	bl	8007558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fe6:	bf00      	nop
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b088      	sub	sp, #32
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	60bb      	str	r3, [r7, #8]
   return(result);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800800a:	61fb      	str	r3, [r7, #28]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	461a      	mov	r2, r3
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	61bb      	str	r3, [r7, #24]
 8008016:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	6979      	ldr	r1, [r7, #20]
 800801a:	69ba      	ldr	r2, [r7, #24]
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	613b      	str	r3, [r7, #16]
   return(result);
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e6      	bne.n	8007ff6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2220      	movs	r2, #32
 800802c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7f9 febe 	bl	8001db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800803c:	bf00      	nop
 800803e:	3720      	adds	r7, #32
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800808e:	2b01      	cmp	r3, #1
 8008090:	d101      	bne.n	8008096 <HAL_UARTEx_DisableFifoMode+0x16>
 8008092:	2302      	movs	r3, #2
 8008094:	e027      	b.n	80080e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2224      	movs	r2, #36	; 0x24
 80080a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 0201 	bic.w	r2, r2, #1
 80080bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80080c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2220      	movs	r2, #32
 80080d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008102:	2b01      	cmp	r3, #1
 8008104:	d101      	bne.n	800810a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008106:	2302      	movs	r3, #2
 8008108:	e02d      	b.n	8008166 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2224      	movs	r2, #36	; 0x24
 8008116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 0201 	bic.w	r2, r2, #1
 8008130:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f850 	bl	80081ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2220      	movs	r2, #32
 8008158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800817e:	2b01      	cmp	r3, #1
 8008180:	d101      	bne.n	8008186 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008182:	2302      	movs	r3, #2
 8008184:	e02d      	b.n	80081e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2224      	movs	r2, #36	; 0x24
 8008192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 0201 	bic.w	r2, r2, #1
 80081ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f812 	bl	80081ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2220      	movs	r2, #32
 80081d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d108      	bne.n	800820e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800820c:	e031      	b.n	8008272 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800820e:	2308      	movs	r3, #8
 8008210:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008212:	2308      	movs	r3, #8
 8008214:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	0e5b      	lsrs	r3, r3, #25
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f003 0307 	and.w	r3, r3, #7
 8008224:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	0f5b      	lsrs	r3, r3, #29
 800822e:	b2db      	uxtb	r3, r3
 8008230:	f003 0307 	and.w	r3, r3, #7
 8008234:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008236:	7bbb      	ldrb	r3, [r7, #14]
 8008238:	7b3a      	ldrb	r2, [r7, #12]
 800823a:	4911      	ldr	r1, [pc, #68]	; (8008280 <UARTEx_SetNbDataToProcess+0x94>)
 800823c:	5c8a      	ldrb	r2, [r1, r2]
 800823e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008242:	7b3a      	ldrb	r2, [r7, #12]
 8008244:	490f      	ldr	r1, [pc, #60]	; (8008284 <UARTEx_SetNbDataToProcess+0x98>)
 8008246:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008248:	fb93 f3f2 	sdiv	r3, r3, r2
 800824c:	b29a      	uxth	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008254:	7bfb      	ldrb	r3, [r7, #15]
 8008256:	7b7a      	ldrb	r2, [r7, #13]
 8008258:	4909      	ldr	r1, [pc, #36]	; (8008280 <UARTEx_SetNbDataToProcess+0x94>)
 800825a:	5c8a      	ldrb	r2, [r1, r2]
 800825c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008260:	7b7a      	ldrb	r2, [r7, #13]
 8008262:	4908      	ldr	r1, [pc, #32]	; (8008284 <UARTEx_SetNbDataToProcess+0x98>)
 8008264:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008266:	fb93 f3f2 	sdiv	r3, r3, r2
 800826a:	b29a      	uxth	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008272:	bf00      	nop
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	0800d60c 	.word	0x0800d60c
 8008284:	0800d614 	.word	0x0800d614

08008288 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b088      	sub	sp, #32
 800828c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800828e:	2300      	movs	r3, #0
 8008290:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008292:	f107 0308 	add.w	r3, r7, #8
 8008296:	2218      	movs	r2, #24
 8008298:	2100      	movs	r1, #0
 800829a:	4618      	mov	r0, r3
 800829c:	f001 fc2e 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x3f;
 80082a0:	233f      	movs	r3, #63	; 0x3f
 80082a2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80082a4:	2381      	movs	r3, #129	; 0x81
 80082a6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80082a8:	1dfb      	adds	r3, r7, #7
 80082aa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80082ac:	2301      	movs	r3, #1
 80082ae:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80082b0:	f107 0308 	add.w	r3, r7, #8
 80082b4:	2100      	movs	r1, #0
 80082b6:	4618      	mov	r0, r3
 80082b8:	f001 fae4 	bl	8009884 <hci_send_req>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	da01      	bge.n	80082c6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80082c2:	23ff      	movs	r3, #255	; 0xff
 80082c4:	e000      	b.n	80082c8 <aci_gap_set_non_discoverable+0x40>
  return status;
 80082c6:	79fb      	ldrb	r3, [r7, #7]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3720      	adds	r7, #32
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80082d0:	b5b0      	push	{r4, r5, r7, lr}
 80082d2:	b0ce      	sub	sp, #312	; 0x138
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4605      	mov	r5, r0
 80082d8:	460c      	mov	r4, r1
 80082da:	4610      	mov	r0, r2
 80082dc:	4619      	mov	r1, r3
 80082de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80082e2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80082e6:	462a      	mov	r2, r5
 80082e8:	701a      	strb	r2, [r3, #0]
 80082ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80082ee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80082f2:	4622      	mov	r2, r4
 80082f4:	801a      	strh	r2, [r3, #0]
 80082f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80082fa:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80082fe:	4602      	mov	r2, r0
 8008300:	801a      	strh	r2, [r3, #0]
 8008302:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008306:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800830a:	460a      	mov	r2, r1
 800830c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800830e:	f107 0310 	add.w	r3, r7, #16
 8008312:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008316:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800831a:	3308      	adds	r3, #8
 800831c:	f107 0210 	add.w	r2, r7, #16
 8008320:	4413      	add	r3, r2
 8008322:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008326:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800832a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800832e:	4413      	add	r3, r2
 8008330:	3309      	adds	r3, #9
 8008332:	f107 0210 	add.w	r2, r7, #16
 8008336:	4413      	add	r3, r2
 8008338:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800833c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008340:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008344:	2200      	movs	r2, #0
 8008346:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800834e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008352:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008356:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800835a:	7812      	ldrb	r2, [r2, #0]
 800835c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800835e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008362:	3301      	adds	r3, #1
 8008364:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8008368:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800836c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008370:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008374:	8812      	ldrh	r2, [r2, #0]
 8008376:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800837a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800837e:	3302      	adds	r3, #2
 8008380:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8008384:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008388:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800838c:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8008390:	8812      	ldrh	r2, [r2, #0]
 8008392:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008396:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800839a:	3302      	adds	r3, #2
 800839c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80083a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80083a4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80083a8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80083ac:	7812      	ldrb	r2, [r2, #0]
 80083ae:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80083b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083b4:	3301      	adds	r3, #1
 80083b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80083ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80083be:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80083c2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80083c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083c8:	3301      	adds	r3, #1
 80083ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80083ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80083d2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80083d6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80083d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083dc:	3301      	adds	r3, #1
 80083de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80083e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80083e6:	3308      	adds	r3, #8
 80083e8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80083ec:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80083f0:	4618      	mov	r0, r3
 80083f2:	f001 fb73 	bl	8009adc <Osal_MemCpy>
    index_input += Local_Name_Length;
 80083f6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80083fa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80083fe:	4413      	add	r3, r2
 8008400:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8008404:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008408:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800840c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800840e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008412:	3301      	adds	r3, #1
 8008414:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008418:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800841c:	3301      	adds	r3, #1
 800841e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008422:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008426:	4618      	mov	r0, r3
 8008428:	f001 fb58 	bl	8009adc <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800842c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008430:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008434:	4413      	add	r3, r2
 8008436:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800843a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800843e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008442:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008444:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008448:	3302      	adds	r3, #2
 800844a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800844e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008452:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008456:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008458:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800845c:	3302      	adds	r3, #2
 800845e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008462:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008466:	2218      	movs	r2, #24
 8008468:	2100      	movs	r1, #0
 800846a:	4618      	mov	r0, r3
 800846c:	f001 fb46 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8008470:	233f      	movs	r3, #63	; 0x3f
 8008472:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008476:	2383      	movs	r3, #131	; 0x83
 8008478:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800847c:	f107 0310 	add.w	r3, r7, #16
 8008480:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008484:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008488:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800848c:	f107 030f 	add.w	r3, r7, #15
 8008490:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008494:	2301      	movs	r3, #1
 8008496:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800849a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800849e:	2100      	movs	r1, #0
 80084a0:	4618      	mov	r0, r3
 80084a2:	f001 f9ef 	bl	8009884 <hci_send_req>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	da01      	bge.n	80084b0 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80084ac:	23ff      	movs	r3, #255	; 0xff
 80084ae:	e004      	b.n	80084ba <aci_gap_set_discoverable+0x1ea>
  return status;
 80084b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80084b4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80084b8:	781b      	ldrb	r3, [r3, #0]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bdb0      	pop	{r4, r5, r7, pc}

080084c4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b0cc      	sub	sp, #304	; 0x130
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	4602      	mov	r2, r0
 80084cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80084d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80084d6:	f107 0310 	add.w	r3, r7, #16
 80084da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80084de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80084e6:	2200      	movs	r2, #0
 80084e8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80084ea:	2300      	movs	r3, #0
 80084ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80084f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084f8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80084fc:	7812      	ldrb	r2, [r2, #0]
 80084fe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008500:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008504:	3301      	adds	r3, #1
 8008506:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800850a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800850e:	2218      	movs	r2, #24
 8008510:	2100      	movs	r1, #0
 8008512:	4618      	mov	r0, r3
 8008514:	f001 faf2 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8008518:	233f      	movs	r3, #63	; 0x3f
 800851a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800851e:	2385      	movs	r3, #133	; 0x85
 8008520:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008524:	f107 0310 	add.w	r3, r7, #16
 8008528:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800852c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008530:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008534:	f107 030f 	add.w	r3, r7, #15
 8008538:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800853c:	2301      	movs	r3, #1
 800853e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008542:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008546:	2100      	movs	r1, #0
 8008548:	4618      	mov	r0, r3
 800854a:	f001 f99b 	bl	8009884 <hci_send_req>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	da01      	bge.n	8008558 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008554:	23ff      	movs	r3, #255	; 0xff
 8008556:	e004      	b.n	8008562 <aci_gap_set_io_capability+0x9e>
  return status;
 8008558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800855c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008560:	781b      	ldrb	r3, [r3, #0]
}
 8008562:	4618      	mov	r0, r3
 8008564:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800856c:	b5b0      	push	{r4, r5, r7, lr}
 800856e:	b0cc      	sub	sp, #304	; 0x130
 8008570:	af00      	add	r7, sp, #0
 8008572:	4605      	mov	r5, r0
 8008574:	460c      	mov	r4, r1
 8008576:	4610      	mov	r0, r2
 8008578:	4619      	mov	r1, r3
 800857a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800857e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008582:	462a      	mov	r2, r5
 8008584:	701a      	strb	r2, [r3, #0]
 8008586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800858a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800858e:	4622      	mov	r2, r4
 8008590:	701a      	strb	r2, [r3, #0]
 8008592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008596:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800859a:	4602      	mov	r2, r0
 800859c:	701a      	strb	r2, [r3, #0]
 800859e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085a6:	460a      	mov	r2, r1
 80085a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80085aa:	f107 0310 	add.w	r3, r7, #16
 80085ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80085b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80085ba:	2200      	movs	r2, #0
 80085bc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80085be:	2300      	movs	r3, #0
 80085c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80085c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80085cc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80085d0:	7812      	ldrb	r2, [r2, #0]
 80085d2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80085d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085d8:	3301      	adds	r3, #1
 80085da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80085de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80085e6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80085ea:	7812      	ldrb	r2, [r2, #0]
 80085ec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80085ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085f2:	3301      	adds	r3, #1
 80085f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80085f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008600:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008604:	7812      	ldrb	r2, [r2, #0]
 8008606:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008608:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800860c:	3301      	adds	r3, #1
 800860e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008612:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008616:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800861a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800861e:	7812      	ldrb	r2, [r2, #0]
 8008620:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008622:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008626:	3301      	adds	r3, #1
 8008628:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800862c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008630:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008634:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008636:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800863a:	3301      	adds	r3, #1
 800863c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8008640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008644:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008648:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800864a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800864e:	3301      	adds	r3, #1
 8008650:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008658:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800865c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800865e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008662:	3301      	adds	r3, #1
 8008664:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800866c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008670:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008674:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008678:	3304      	adds	r3, #4
 800867a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800867e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008682:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008686:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008688:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800868c:	3301      	adds	r3, #1
 800868e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008692:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008696:	2218      	movs	r2, #24
 8008698:	2100      	movs	r1, #0
 800869a:	4618      	mov	r0, r3
 800869c:	f001 fa2e 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x3f;
 80086a0:	233f      	movs	r3, #63	; 0x3f
 80086a2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80086a6:	2386      	movs	r3, #134	; 0x86
 80086a8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80086ac:	f107 0310 	add.w	r3, r7, #16
 80086b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80086b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80086bc:	f107 030f 	add.w	r3, r7, #15
 80086c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80086c4:	2301      	movs	r3, #1
 80086c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80086ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80086ce:	2100      	movs	r1, #0
 80086d0:	4618      	mov	r0, r3
 80086d2:	f001 f8d7 	bl	8009884 <hci_send_req>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	da01      	bge.n	80086e0 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80086dc:	23ff      	movs	r3, #255	; 0xff
 80086de:	e004      	b.n	80086ea <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80086e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80086e8:	781b      	ldrb	r3, [r3, #0]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bdb0      	pop	{r4, r5, r7, pc}

080086f4 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80086f4:	b590      	push	{r4, r7, lr}
 80086f6:	b0cd      	sub	sp, #308	; 0x134
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	4604      	mov	r4, r0
 80086fc:	4608      	mov	r0, r1
 80086fe:	4611      	mov	r1, r2
 8008700:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008704:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008708:	6013      	str	r3, [r2, #0]
 800870a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800870e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008712:	4622      	mov	r2, r4
 8008714:	701a      	strb	r2, [r3, #0]
 8008716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800871a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800871e:	4602      	mov	r2, r0
 8008720:	701a      	strb	r2, [r3, #0]
 8008722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008726:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800872a:	460a      	mov	r2, r1
 800872c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800872e:	f107 0310 	add.w	r3, r7, #16
 8008732:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008736:	f107 0308 	add.w	r3, r7, #8
 800873a:	2207      	movs	r2, #7
 800873c:	2100      	movs	r1, #0
 800873e:	4618      	mov	r0, r3
 8008740:	f001 f9dc 	bl	8009afc <Osal_MemSet>
  int index_input = 0;
 8008744:	2300      	movs	r3, #0
 8008746:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800874a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800874e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008752:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008756:	7812      	ldrb	r2, [r2, #0]
 8008758:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800875a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800875e:	3301      	adds	r3, #1
 8008760:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008768:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800876c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008770:	7812      	ldrb	r2, [r2, #0]
 8008772:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008774:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008778:	3301      	adds	r3, #1
 800877a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800877e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008782:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008786:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800878a:	7812      	ldrb	r2, [r2, #0]
 800878c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800878e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008792:	3301      	adds	r3, #1
 8008794:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008798:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800879c:	2218      	movs	r2, #24
 800879e:	2100      	movs	r1, #0
 80087a0:	4618      	mov	r0, r3
 80087a2:	f001 f9ab 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x3f;
 80087a6:	233f      	movs	r3, #63	; 0x3f
 80087a8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80087ac:	238a      	movs	r3, #138	; 0x8a
 80087ae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80087b2:	f107 0310 	add.w	r3, r7, #16
 80087b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80087ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80087c2:	f107 0308 	add.w	r3, r7, #8
 80087c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80087ca:	2307      	movs	r3, #7
 80087cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80087d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087d4:	2100      	movs	r1, #0
 80087d6:	4618      	mov	r0, r3
 80087d8:	f001 f854 	bl	8009884 <hci_send_req>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	da01      	bge.n	80087e6 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80087e2:	23ff      	movs	r3, #255	; 0xff
 80087e4:	e02e      	b.n	8008844 <aci_gap_init+0x150>
  if ( resp.Status )
 80087e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d005      	beq.n	8008800 <aci_gap_init+0x10c>
    return resp.Status;
 80087f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	e021      	b.n	8008844 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008804:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008808:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800880c:	b29a      	uxth	r2, r3
 800880e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800881a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800881e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008822:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008826:	b29a      	uxth	r2, r3
 8008828:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800882c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800882e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008832:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008836:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800883a:	b29a      	uxth	r2, r3
 800883c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008840:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800884a:	46bd      	mov	sp, r7
 800884c:	bd90      	pop	{r4, r7, pc}

0800884e <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b0cc      	sub	sp, #304	; 0x130
 8008852:	af00      	add	r7, sp, #0
 8008854:	4602      	mov	r2, r0
 8008856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800885a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800885e:	6019      	str	r1, [r3, #0]
 8008860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008864:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008868:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800886a:	f107 0310 	add.w	r3, r7, #16
 800886e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008876:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800887a:	2200      	movs	r2, #0
 800887c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800887e:	2300      	movs	r3, #0
 8008880:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008888:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800888c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008890:	7812      	ldrb	r2, [r2, #0]
 8008892:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008894:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008898:	3301      	adds	r3, #1
 800889a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800889e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088a2:	1c58      	adds	r0, r3, #1
 80088a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088a8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80088ac:	781a      	ldrb	r2, [r3, #0]
 80088ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088b6:	6819      	ldr	r1, [r3, #0]
 80088b8:	f001 f910 	bl	8009adc <Osal_MemCpy>
  index_input += AdvDataLen;
 80088bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088c0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80088ca:	4413      	add	r3, r2
 80088cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088d4:	2218      	movs	r2, #24
 80088d6:	2100      	movs	r1, #0
 80088d8:	4618      	mov	r0, r3
 80088da:	f001 f90f 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x3f;
 80088de:	233f      	movs	r3, #63	; 0x3f
 80088e0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80088e4:	238e      	movs	r3, #142	; 0x8e
 80088e6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80088ea:	f107 0310 	add.w	r3, r7, #16
 80088ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80088f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80088fa:	f107 030f 	add.w	r3, r7, #15
 80088fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008902:	2301      	movs	r3, #1
 8008904:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008908:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800890c:	2100      	movs	r1, #0
 800890e:	4618      	mov	r0, r3
 8008910:	f000 ffb8 	bl	8009884 <hci_send_req>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	da01      	bge.n	800891e <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800891a:	23ff      	movs	r3, #255	; 0xff
 800891c:	e004      	b.n	8008928 <aci_gap_update_adv_data+0xda>
  return status;
 800891e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008922:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008926:	781b      	ldrb	r3, [r3, #0]
}
 8008928:	4618      	mov	r0, r3
 800892a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b088      	sub	sp, #32
 8008936:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008938:	2300      	movs	r3, #0
 800893a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800893c:	f107 0308 	add.w	r3, r7, #8
 8008940:	2218      	movs	r2, #24
 8008942:	2100      	movs	r1, #0
 8008944:	4618      	mov	r0, r3
 8008946:	f001 f8d9 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x3f;
 800894a:	233f      	movs	r3, #63	; 0x3f
 800894c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800894e:	2392      	movs	r3, #146	; 0x92
 8008950:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008952:	1dfb      	adds	r3, r7, #7
 8008954:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008956:	2301      	movs	r3, #1
 8008958:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800895a:	f107 0308 	add.w	r3, r7, #8
 800895e:	2100      	movs	r1, #0
 8008960:	4618      	mov	r0, r3
 8008962:	f000 ff8f 	bl	8009884 <hci_send_req>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	da01      	bge.n	8008970 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800896c:	23ff      	movs	r3, #255	; 0xff
 800896e:	e000      	b.n	8008972 <aci_gap_configure_whitelist+0x40>
  return status;
 8008970:	79fb      	ldrb	r3, [r7, #7]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3720      	adds	r7, #32
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b0cc      	sub	sp, #304	; 0x130
 800897e:	af00      	add	r7, sp, #0
 8008980:	4602      	mov	r2, r0
 8008982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008986:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800898a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 800898c:	f107 0310 	add.w	r3, r7, #16
 8008990:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008998:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800899c:	2200      	movs	r2, #0
 800899e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80089a0:	2300      	movs	r3, #0
 80089a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80089a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089ae:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80089b2:	8812      	ldrh	r2, [r2, #0]
 80089b4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80089b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089ba:	3302      	adds	r3, #2
 80089bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089c4:	2218      	movs	r2, #24
 80089c6:	2100      	movs	r1, #0
 80089c8:	4618      	mov	r0, r3
 80089ca:	f001 f897 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x3f;
 80089ce:	233f      	movs	r3, #63	; 0x3f
 80089d0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 80089d4:	2395      	movs	r3, #149	; 0x95
 80089d6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80089da:	f107 0310 	add.w	r3, r7, #16
 80089de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80089e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80089ea:	f107 030f 	add.w	r3, r7, #15
 80089ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80089f2:	2301      	movs	r3, #1
 80089f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80089f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089fc:	2100      	movs	r1, #0
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 ff40 	bl	8009884 <hci_send_req>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	da01      	bge.n	8008a0e <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 8008a0a:	23ff      	movs	r3, #255	; 0xff
 8008a0c:	e004      	b.n	8008a18 <aci_gap_allow_rebond+0x9e>
  return status;
 8008a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a12:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008a16:	781b      	ldrb	r3, [r3, #0]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b0cc      	sub	sp, #304	; 0x130
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	4602      	mov	r2, r0
 8008a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a2e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008a32:	801a      	strh	r2, [r3, #0]
 8008a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a38:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008a3c:	460a      	mov	r2, r1
 8008a3e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8008a40:	f107 0310 	add.w	r3, r7, #16
 8008a44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a4c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008a50:	2200      	movs	r2, #0
 8008a52:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008a54:	2300      	movs	r3, #0
 8008a56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a62:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008a66:	8812      	ldrh	r2, [r2, #0]
 8008a68:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008a6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a6e:	3302      	adds	r3, #2
 8008a70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8008a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a78:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a7c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008a80:	7812      	ldrb	r2, [r2, #0]
 8008a82:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008a84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a88:	3301      	adds	r3, #1
 8008a8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a92:	2218      	movs	r2, #24
 8008a94:	2100      	movs	r1, #0
 8008a96:	4618      	mov	r0, r3
 8008a98:	f001 f830 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a9c:	233f      	movs	r3, #63	; 0x3f
 8008a9e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8008aa2:	23a5      	movs	r3, #165	; 0xa5
 8008aa4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008aa8:	f107 0310 	add.w	r3, r7, #16
 8008aac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008ab0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ab4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008ab8:	f107 030f 	add.w	r3, r7, #15
 8008abc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ac6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008aca:	2100      	movs	r1, #0
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 fed9 	bl	8009884 <hci_send_req>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	da01      	bge.n	8008adc <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8008ad8:	23ff      	movs	r3, #255	; 0xff
 8008ada:	e004      	b.n	8008ae6 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8008adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ae0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008ae4:	781b      	ldrb	r3, [r3, #0]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b088      	sub	sp, #32
 8008af4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008af6:	2300      	movs	r3, #0
 8008af8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008afa:	f107 0308 	add.w	r3, r7, #8
 8008afe:	2218      	movs	r2, #24
 8008b00:	2100      	movs	r1, #0
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 fffa 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b08:	233f      	movs	r3, #63	; 0x3f
 8008b0a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008b0c:	f240 1301 	movw	r3, #257	; 0x101
 8008b10:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008b12:	1dfb      	adds	r3, r7, #7
 8008b14:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008b16:	2301      	movs	r3, #1
 8008b18:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b1a:	f107 0308 	add.w	r3, r7, #8
 8008b1e:	2100      	movs	r1, #0
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 feaf 	bl	8009884 <hci_send_req>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	da01      	bge.n	8008b30 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008b2c:	23ff      	movs	r3, #255	; 0xff
 8008b2e:	e000      	b.n	8008b32 <aci_gatt_init+0x42>
  return status;
 8008b30:	79fb      	ldrb	r3, [r7, #7]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3720      	adds	r7, #32
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008b3a:	b590      	push	{r4, r7, lr}
 8008b3c:	b0cf      	sub	sp, #316	; 0x13c
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	4604      	mov	r4, r0
 8008b42:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8008b46:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8008b4a:	6001      	str	r1, [r0, #0]
 8008b4c:	4610      	mov	r0, r2
 8008b4e:	4619      	mov	r1, r3
 8008b50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b54:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008b58:	4622      	mov	r2, r4
 8008b5a:	701a      	strb	r2, [r3, #0]
 8008b5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b60:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008b64:	4602      	mov	r2, r0
 8008b66:	701a      	strb	r2, [r3, #0]
 8008b68:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b6c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008b70:	460a      	mov	r2, r1
 8008b72:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008b74:	f107 0310 	add.w	r3, r7, #16
 8008b78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008b7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b80:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d00a      	beq.n	8008ba0 <aci_gatt_add_service+0x66>
 8008b8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b8e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d101      	bne.n	8008b9c <aci_gatt_add_service+0x62>
 8008b98:	2311      	movs	r3, #17
 8008b9a:	e002      	b.n	8008ba2 <aci_gatt_add_service+0x68>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e000      	b.n	8008ba2 <aci_gatt_add_service+0x68>
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	f107 0210 	add.w	r2, r7, #16
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008bac:	f107 030c 	add.w	r3, r7, #12
 8008bb0:	2203      	movs	r2, #3
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f000 ffa1 	bl	8009afc <Osal_MemSet>
  int index_input = 0;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8008bc0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008bc4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008bc8:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008bcc:	7812      	ldrb	r2, [r2, #0]
 8008bce:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008bd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008bda:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008bde:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d002      	beq.n	8008bee <aci_gatt_add_service+0xb4>
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d004      	beq.n	8008bf6 <aci_gatt_add_service+0xbc>
 8008bec:	e007      	b.n	8008bfe <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8008bee:	2302      	movs	r3, #2
 8008bf0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008bf4:	e005      	b.n	8008c02 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008bf6:	2310      	movs	r3, #16
 8008bf8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008bfc:	e001      	b.n	8008c02 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8008bfe:	2397      	movs	r3, #151	; 0x97
 8008c00:	e06c      	b.n	8008cdc <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8008c02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008c06:	1c58      	adds	r0, r3, #1
 8008c08:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8008c0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008c10:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008c14:	6819      	ldr	r1, [r3, #0]
 8008c16:	f000 ff61 	bl	8009adc <Osal_MemCpy>
    index_input += size;
 8008c1a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008c1e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008c22:	4413      	add	r3, r2
 8008c24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8008c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c2c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008c30:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008c34:	7812      	ldrb	r2, [r2, #0]
 8008c36:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008c38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c46:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008c4a:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008c4e:	7812      	ldrb	r2, [r2, #0]
 8008c50:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008c52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c56:	3301      	adds	r3, #1
 8008c58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c60:	2218      	movs	r2, #24
 8008c62:	2100      	movs	r1, #0
 8008c64:	4618      	mov	r0, r3
 8008c66:	f000 ff49 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c6a:	233f      	movs	r3, #63	; 0x3f
 8008c6c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8008c70:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008c74:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008c78:	f107 0310 	add.w	r3, r7, #16
 8008c7c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008c80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008c88:	f107 030c 	add.w	r3, r7, #12
 8008c8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008c90:	2303      	movs	r3, #3
 8008c92:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 fdf1 	bl	8009884 <hci_send_req>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	da01      	bge.n	8008cac <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8008ca8:	23ff      	movs	r3, #255	; 0xff
 8008caa:	e017      	b.n	8008cdc <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8008cac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d005      	beq.n	8008cc6 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8008cba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	e00a      	b.n	8008cdc <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8008cc6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cce:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008cd8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd90      	pop	{r4, r7, pc}

08008ce6 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8008ce6:	b590      	push	{r4, r7, lr}
 8008ce8:	b0d1      	sub	sp, #324	; 0x144
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	4604      	mov	r4, r0
 8008cee:	4608      	mov	r0, r1
 8008cf0:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8008cf4:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8008cf8:	600a      	str	r2, [r1, #0]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008d00:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008d04:	4622      	mov	r2, r4
 8008d06:	801a      	strh	r2, [r3, #0]
 8008d08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008d0c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008d10:	4602      	mov	r2, r0
 8008d12:	701a      	strb	r2, [r3, #0]
 8008d14:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008d18:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8008d1c:	460a      	mov	r2, r1
 8008d1e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8008d20:	f107 0318 	add.w	r3, r7, #24
 8008d24:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008d28:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008d2c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d00a      	beq.n	8008d4c <aci_gatt_add_char+0x66>
 8008d36:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008d3a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d101      	bne.n	8008d48 <aci_gatt_add_char+0x62>
 8008d44:	2313      	movs	r3, #19
 8008d46:	e002      	b.n	8008d4e <aci_gatt_add_char+0x68>
 8008d48:	2303      	movs	r3, #3
 8008d4a:	e000      	b.n	8008d4e <aci_gatt_add_char+0x68>
 8008d4c:	2305      	movs	r3, #5
 8008d4e:	f107 0218 	add.w	r2, r7, #24
 8008d52:	4413      	add	r3, r2
 8008d54:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008d58:	f107 0314 	add.w	r3, r7, #20
 8008d5c:	2203      	movs	r2, #3
 8008d5e:	2100      	movs	r1, #0
 8008d60:	4618      	mov	r0, r3
 8008d62:	f000 fecb 	bl	8009afc <Osal_MemSet>
  int index_input = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8008d6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008d70:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008d74:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008d78:	8812      	ldrh	r2, [r2, #0]
 8008d7a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008d7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008d80:	3302      	adds	r3, #2
 8008d82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008d86:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008d8a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008d8e:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008d92:	7812      	ldrb	r2, [r2, #0]
 8008d94:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008d96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8008da0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008da4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d002      	beq.n	8008db4 <aci_gatt_add_char+0xce>
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d004      	beq.n	8008dbc <aci_gatt_add_char+0xd6>
 8008db2:	e007      	b.n	8008dc4 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8008db4:	2302      	movs	r3, #2
 8008db6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008dba:	e005      	b.n	8008dc8 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8008dbc:	2310      	movs	r3, #16
 8008dbe:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008dc2:	e001      	b.n	8008dc8 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8008dc4:	2397      	movs	r3, #151	; 0x97
 8008dc6:	e091      	b.n	8008eec <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8008dc8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008dcc:	1cd8      	adds	r0, r3, #3
 8008dce:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8008dd2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008dd6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008dda:	6819      	ldr	r1, [r3, #0]
 8008ddc:	f000 fe7e 	bl	8009adc <Osal_MemCpy>
    index_input += size;
 8008de0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8008de4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008de8:	4413      	add	r3, r2
 8008dea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8008dee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008df2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008df6:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8008dfa:	8812      	ldrh	r2, [r2, #0]
 8008dfc:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008dfe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e02:	3302      	adds	r3, #2
 8008e04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8008e08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e0c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008e10:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8008e12:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e16:	3301      	adds	r3, #1
 8008e18:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8008e1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e20:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008e24:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8008e26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8008e30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e34:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8008e38:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008e3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e3e:	3301      	adds	r3, #1
 8008e40:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8008e44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e48:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8008e4c:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8008e4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e52:	3301      	adds	r3, #1
 8008e54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8008e58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e5c:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8008e60:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008e62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e66:	3301      	adds	r3, #1
 8008e68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e6c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008e70:	2218      	movs	r2, #24
 8008e72:	2100      	movs	r1, #0
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 fe41 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e7a:	233f      	movs	r3, #63	; 0x3f
 8008e7c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8008e80:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008e84:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008e88:	f107 0318 	add.w	r3, r7, #24
 8008e8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008e90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008e98:	f107 0314 	add.w	r3, r7, #20
 8008e9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ea6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008eaa:	2100      	movs	r1, #0
 8008eac:	4618      	mov	r0, r3
 8008eae:	f000 fce9 	bl	8009884 <hci_send_req>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	da01      	bge.n	8008ebc <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8008eb8:	23ff      	movs	r3, #255	; 0xff
 8008eba:	e017      	b.n	8008eec <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8008ebc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008ec0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d005      	beq.n	8008ed6 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8008eca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008ece:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	e00a      	b.n	8008eec <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8008ed6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008eda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ede:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008ee8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd90      	pop	{r4, r7, pc}

08008ef6 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008ef6:	b5b0      	push	{r4, r5, r7, lr}
 8008ef8:	b0cc      	sub	sp, #304	; 0x130
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	4605      	mov	r5, r0
 8008efe:	460c      	mov	r4, r1
 8008f00:	4610      	mov	r0, r2
 8008f02:	4619      	mov	r1, r3
 8008f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f08:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008f0c:	462a      	mov	r2, r5
 8008f0e:	801a      	strh	r2, [r3, #0]
 8008f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f18:	4622      	mov	r2, r4
 8008f1a:	801a      	strh	r2, [r3, #0]
 8008f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f20:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008f24:	4602      	mov	r2, r0
 8008f26:	701a      	strb	r2, [r3, #0]
 8008f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f2c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008f30:	460a      	mov	r2, r1
 8008f32:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008f34:	f107 0310 	add.w	r3, r7, #16
 8008f38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f40:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008f44:	2200      	movs	r2, #0
 8008f46:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8008f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f52:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f56:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008f5a:	8812      	ldrh	r2, [r2, #0]
 8008f5c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008f5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f62:	3302      	adds	r3, #2
 8008f64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8008f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f70:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008f74:	8812      	ldrh	r2, [r2, #0]
 8008f76:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008f78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f7c:	3302      	adds	r3, #2
 8008f7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8008f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f8a:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8008f8e:	7812      	ldrb	r2, [r2, #0]
 8008f90:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008f92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f96:	3301      	adds	r3, #1
 8008f98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8008f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fa4:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8008fa8:	7812      	ldrb	r2, [r2, #0]
 8008faa:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008fac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008fb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fba:	1d98      	adds	r0, r3, #6
 8008fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fc0:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008fcc:	f000 fd86 	bl	8009adc <Osal_MemCpy>
  index_input += Char_Value_Length;
 8008fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fd4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008fde:	4413      	add	r3, r2
 8008fe0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008fe4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008fe8:	2218      	movs	r2, #24
 8008fea:	2100      	movs	r1, #0
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 fd85 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8008ff2:	233f      	movs	r3, #63	; 0x3f
 8008ff4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8008ff8:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008ffc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009000:	f107 0310 	add.w	r3, r7, #16
 8009004:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009008:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800900c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009010:	f107 030f 	add.w	r3, r7, #15
 8009014:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009018:	2301      	movs	r3, #1
 800901a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800901e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009022:	2100      	movs	r1, #0
 8009024:	4618      	mov	r0, r3
 8009026:	f000 fc2d 	bl	8009884 <hci_send_req>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	da01      	bge.n	8009034 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009030:	23ff      	movs	r3, #255	; 0xff
 8009032:	e004      	b.n	800903e <aci_gatt_update_char_value+0x148>
  return status;
 8009034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009038:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800903c:	781b      	ldrb	r3, [r3, #0]
}
 800903e:	4618      	mov	r0, r3
 8009040:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009044:	46bd      	mov	sp, r7
 8009046:	bdb0      	pop	{r4, r5, r7, pc}

08009048 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b0cc      	sub	sp, #304	; 0x130
 800904c:	af00      	add	r7, sp, #0
 800904e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009056:	601a      	str	r2, [r3, #0]
 8009058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800905c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009060:	4602      	mov	r2, r0
 8009062:	701a      	strb	r2, [r3, #0]
 8009064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009068:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800906c:	460a      	mov	r2, r1
 800906e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009070:	f107 0310 	add.w	r3, r7, #16
 8009074:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800907c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009080:	2200      	movs	r2, #0
 8009082:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800908a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800908e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009092:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009096:	7812      	ldrb	r2, [r2, #0]
 8009098:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800909a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800909e:	3301      	adds	r3, #1
 80090a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80090a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80090ac:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80090b0:	7812      	ldrb	r2, [r2, #0]
 80090b2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80090b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090b8:	3301      	adds	r3, #1
 80090ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80090be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090c2:	1c98      	adds	r0, r3, #2
 80090c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090c8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80090cc:	781a      	ldrb	r2, [r3, #0]
 80090ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090d6:	6819      	ldr	r1, [r3, #0]
 80090d8:	f000 fd00 	bl	8009adc <Osal_MemCpy>
  index_input += Length;
 80090dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090e0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80090ea:	4413      	add	r3, r2
 80090ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80090f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090f4:	2218      	movs	r2, #24
 80090f6:	2100      	movs	r1, #0
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 fcff 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x3f;
 80090fe:	233f      	movs	r3, #63	; 0x3f
 8009100:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009104:	230c      	movs	r3, #12
 8009106:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800910a:	f107 0310 	add.w	r3, r7, #16
 800910e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009112:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009116:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800911a:	f107 030f 	add.w	r3, r7, #15
 800911e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009122:	2301      	movs	r3, #1
 8009124:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009128:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800912c:	2100      	movs	r1, #0
 800912e:	4618      	mov	r0, r3
 8009130:	f000 fba8 	bl	8009884 <hci_send_req>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	da01      	bge.n	800913e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800913a:	23ff      	movs	r3, #255	; 0xff
 800913c:	e004      	b.n	8009148 <aci_hal_write_config_data+0x100>
  return status;
 800913e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009142:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009146:	781b      	ldrb	r3, [r3, #0]
}
 8009148:	4618      	mov	r0, r3
 800914a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b0cc      	sub	sp, #304	; 0x130
 8009156:	af00      	add	r7, sp, #0
 8009158:	4602      	mov	r2, r0
 800915a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800915e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009162:	701a      	strb	r2, [r3, #0]
 8009164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009168:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800916c:	460a      	mov	r2, r1
 800916e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009170:	f107 0310 	add.w	r3, r7, #16
 8009174:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800917c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009180:	2200      	movs	r2, #0
 8009182:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009184:	2300      	movs	r3, #0
 8009186:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800918a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800918e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009192:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009196:	7812      	ldrb	r2, [r2, #0]
 8009198:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800919a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800919e:	3301      	adds	r3, #1
 80091a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80091a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80091ac:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80091b0:	7812      	ldrb	r2, [r2, #0]
 80091b2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80091b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091b8:	3301      	adds	r3, #1
 80091ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80091be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80091c2:	2218      	movs	r2, #24
 80091c4:	2100      	movs	r1, #0
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 fc98 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x3f;
 80091cc:	233f      	movs	r3, #63	; 0x3f
 80091ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80091d2:	230f      	movs	r3, #15
 80091d4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80091d8:	f107 0310 	add.w	r3, r7, #16
 80091dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80091e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80091e8:	f107 030f 	add.w	r3, r7, #15
 80091ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80091f0:	2301      	movs	r3, #1
 80091f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80091f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80091fa:	2100      	movs	r1, #0
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 fb41 	bl	8009884 <hci_send_req>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	da01      	bge.n	800920c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8009208:	23ff      	movs	r3, #255	; 0xff
 800920a:	e004      	b.n	8009216 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800920c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009210:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009214:	781b      	ldrb	r3, [r3, #0]
}
 8009216:	4618      	mov	r0, r3
 8009218:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b0cc      	sub	sp, #304	; 0x130
 8009224:	af00      	add	r7, sp, #0
 8009226:	4602      	mov	r2, r0
 8009228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800922c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009230:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009232:	f107 0310 	add.w	r3, r7, #16
 8009236:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800923a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800923e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009242:	2200      	movs	r2, #0
 8009244:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800924c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009250:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009254:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009258:	8812      	ldrh	r2, [r2, #0]
 800925a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800925c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009260:	3302      	adds	r3, #2
 8009262:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009266:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800926a:	2218      	movs	r2, #24
 800926c:	2100      	movs	r1, #0
 800926e:	4618      	mov	r0, r3
 8009270:	f000 fc44 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009274:	233f      	movs	r3, #63	; 0x3f
 8009276:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800927a:	2318      	movs	r3, #24
 800927c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009280:	f107 0310 	add.w	r3, r7, #16
 8009284:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009288:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800928c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009290:	f107 030f 	add.w	r3, r7, #15
 8009294:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009298:	2301      	movs	r3, #1
 800929a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800929e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092a2:	2100      	movs	r1, #0
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 faed 	bl	8009884 <hci_send_req>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	da01      	bge.n	80092b4 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80092b0:	23ff      	movs	r3, #255	; 0xff
 80092b2:	e004      	b.n	80092be <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80092b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092b8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80092bc:	781b      	ldrb	r3, [r3, #0]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b088      	sub	sp, #32
 80092cc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80092ce:	2300      	movs	r3, #0
 80092d0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80092d2:	f107 0308 	add.w	r3, r7, #8
 80092d6:	2218      	movs	r2, #24
 80092d8:	2100      	movs	r1, #0
 80092da:	4618      	mov	r0, r3
 80092dc:	f000 fc0e 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x03;
 80092e0:	2303      	movs	r3, #3
 80092e2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80092e4:	2303      	movs	r3, #3
 80092e6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80092e8:	1dfb      	adds	r3, r7, #7
 80092ea:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80092ec:	2301      	movs	r3, #1
 80092ee:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80092f0:	f107 0308 	add.w	r3, r7, #8
 80092f4:	2100      	movs	r1, #0
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 fac4 	bl	8009884 <hci_send_req>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	da01      	bge.n	8009306 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009302:	23ff      	movs	r3, #255	; 0xff
 8009304:	e000      	b.n	8009308 <hci_reset+0x40>
  return status;
 8009306:	79fb      	ldrb	r3, [r7, #7]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3720      	adds	r7, #32
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b0ce      	sub	sp, #312	; 0x138
 8009314:	af00      	add	r7, sp, #0
 8009316:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800931a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800931e:	6019      	str	r1, [r3, #0]
 8009320:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009324:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800932e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009332:	4602      	mov	r2, r0
 8009334:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8009336:	f107 0318 	add.w	r3, r7, #24
 800933a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800933e:	f107 0310 	add.w	r3, r7, #16
 8009342:	2205      	movs	r2, #5
 8009344:	2100      	movs	r1, #0
 8009346:	4618      	mov	r0, r3
 8009348:	f000 fbd8 	bl	8009afc <Osal_MemSet>
  int index_input = 0;
 800934c:	2300      	movs	r3, #0
 800934e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8009352:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009356:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800935a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800935e:	8812      	ldrh	r2, [r2, #0]
 8009360:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009362:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009366:	3302      	adds	r3, #2
 8009368:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800936c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009370:	2218      	movs	r2, #24
 8009372:	2100      	movs	r1, #0
 8009374:	4618      	mov	r0, r3
 8009376:	f000 fbc1 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x08;
 800937a:	2308      	movs	r3, #8
 800937c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8009380:	2330      	movs	r3, #48	; 0x30
 8009382:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009386:	f107 0318 	add.w	r3, r7, #24
 800938a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800938e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009392:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009396:	f107 0310 	add.w	r3, r7, #16
 800939a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800939e:	2305      	movs	r3, #5
 80093a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80093a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80093a8:	2100      	movs	r1, #0
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 fa6a 	bl	8009884 <hci_send_req>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	da01      	bge.n	80093ba <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 80093b6:	23ff      	movs	r3, #255	; 0xff
 80093b8:	e023      	b.n	8009402 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 80093ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80093be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d005      	beq.n	80093d4 <hci_le_read_phy+0xc4>
    return resp.Status;
 80093c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80093cc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	e016      	b.n	8009402 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 80093d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80093d8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80093dc:	78da      	ldrb	r2, [r3, #3]
 80093de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80093e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 80093ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80093ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80093f2:	791a      	ldrb	r2, [r3, #4]
 80093f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80093f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800940c:	b590      	push	{r4, r7, lr}
 800940e:	b0cd      	sub	sp, #308	; 0x134
 8009410:	af00      	add	r7, sp, #0
 8009412:	4604      	mov	r4, r0
 8009414:	4608      	mov	r0, r1
 8009416:	4611      	mov	r1, r2
 8009418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800941c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009420:	4622      	mov	r2, r4
 8009422:	701a      	strb	r2, [r3, #0]
 8009424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009428:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800942c:	4602      	mov	r2, r0
 800942e:	701a      	strb	r2, [r3, #0]
 8009430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009434:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009438:	460a      	mov	r2, r1
 800943a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800943c:	f107 0310 	add.w	r3, r7, #16
 8009440:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009448:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800944c:	2200      	movs	r2, #0
 800944e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009450:	2300      	movs	r3, #0
 8009452:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8009456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800945a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800945e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009462:	7812      	ldrb	r2, [r2, #0]
 8009464:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009466:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800946a:	3301      	adds	r3, #1
 800946c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8009470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009474:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009478:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800947c:	7812      	ldrb	r2, [r2, #0]
 800947e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009480:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009484:	3301      	adds	r3, #1
 8009486:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800948a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800948e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009492:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009496:	7812      	ldrb	r2, [r2, #0]
 8009498:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800949a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800949e:	3301      	adds	r3, #1
 80094a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80094a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094a8:	2218      	movs	r2, #24
 80094aa:	2100      	movs	r1, #0
 80094ac:	4618      	mov	r0, r3
 80094ae:	f000 fb25 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x08;
 80094b2:	2308      	movs	r3, #8
 80094b4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80094b8:	2331      	movs	r3, #49	; 0x31
 80094ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80094be:	f107 0310 	add.w	r3, r7, #16
 80094c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80094c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80094ce:	f107 030f 	add.w	r3, r7, #15
 80094d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80094d6:	2301      	movs	r3, #1
 80094d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80094dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094e0:	2100      	movs	r1, #0
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 f9ce 	bl	8009884 <hci_send_req>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	da01      	bge.n	80094f2 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80094ee:	23ff      	movs	r3, #255	; 0xff
 80094f0:	e004      	b.n	80094fc <hci_le_set_default_phy+0xf0>
  return status;
 80094f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80094fa:	781b      	ldrb	r3, [r3, #0]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009502:	46bd      	mov	sp, r7
 8009504:	bd90      	pop	{r4, r7, pc}

08009506 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Slave_latency,
                                                      uint16_t Timeout_Multiplier )
{
 8009506:	b5b0      	push	{r4, r5, r7, lr}
 8009508:	b0cc      	sub	sp, #304	; 0x130
 800950a:	af00      	add	r7, sp, #0
 800950c:	4605      	mov	r5, r0
 800950e:	460c      	mov	r4, r1
 8009510:	4610      	mov	r0, r2
 8009512:	4619      	mov	r1, r3
 8009514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009518:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800951c:	462a      	mov	r2, r5
 800951e:	801a      	strh	r2, [r3, #0]
 8009520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009528:	4622      	mov	r2, r4
 800952a:	801a      	strh	r2, [r3, #0]
 800952c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009530:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009534:	4602      	mov	r2, r0
 8009536:	801a      	strh	r2, [r3, #0]
 8009538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800953c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009540:	460a      	mov	r2, r1
 8009542:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 8009544:	f107 0310 	add.w	r3, r7, #16
 8009548:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800954c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009550:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009554:	2200      	movs	r2, #0
 8009556:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009558:	2300      	movs	r3, #0
 800955a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800955e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009562:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009566:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800956a:	8812      	ldrh	r2, [r2, #0]
 800956c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800956e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009572:	3302      	adds	r3, #2
 8009574:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8009578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800957c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009580:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009584:	8812      	ldrh	r2, [r2, #0]
 8009586:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009588:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800958c:	3302      	adds	r3, #2
 800958e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8009592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009596:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800959a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800959e:	8812      	ldrh	r2, [r2, #0]
 80095a0:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80095a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095a6:	3302      	adds	r3, #2
 80095a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 80095ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80095b4:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80095b8:	8812      	ldrh	r2, [r2, #0]
 80095ba:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 80095bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095c0:	3302      	adds	r3, #2
 80095c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 80095c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095ca:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 80095ce:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 80095d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095d4:	3302      	adds	r3, #2
 80095d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80095da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095de:	2218      	movs	r2, #24
 80095e0:	2100      	movs	r1, #0
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fa8a 	bl	8009afc <Osal_MemSet>
  rq.ogf = 0x3f;
 80095e8:	233f      	movs	r3, #63	; 0x3f
 80095ea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 80095ee:	f240 1381 	movw	r3, #385	; 0x181
 80095f2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80095f6:	230f      	movs	r3, #15
 80095f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80095fc:	f107 0310 	add.w	r3, r7, #16
 8009600:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009604:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009608:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800960c:	f107 030f 	add.w	r3, r7, #15
 8009610:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009614:	2301      	movs	r3, #1
 8009616:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800961a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800961e:	2100      	movs	r1, #0
 8009620:	4618      	mov	r0, r3
 8009622:	f000 f92f 	bl	8009884 <hci_send_req>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	da01      	bge.n	8009630 <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 800962c:	23ff      	movs	r3, #255	; 0xff
 800962e:	e004      	b.n	800963a <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 8009630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009634:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009638:	781b      	ldrb	r3, [r3, #0]
}
 800963a:	4618      	mov	r0, r3
 800963c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009640:	46bd      	mov	sp, r7
 8009642:	bdb0      	pop	{r4, r5, r7, pc}

08009644 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800964a:	f3ef 8310 	mrs	r3, PRIMASK
 800964e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009650:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8009652:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009654:	b672      	cpsid	i
}
 8009656:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8009658:	1cbb      	adds	r3, r7, #2
 800965a:	4619      	mov	r1, r3
 800965c:	4812      	ldr	r0, [pc, #72]	; (80096a8 <DbgTrace_TxCpltCallback+0x64>)
 800965e:	f001 f8ee 	bl	800a83e <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8009662:	1cbb      	adds	r3, r7, #2
 8009664:	4619      	mov	r1, r3
 8009666:	4810      	ldr	r0, [pc, #64]	; (80096a8 <DbgTrace_TxCpltCallback+0x64>)
 8009668:	f001 f9da 	bl	800aa20 <CircularQueue_Sense>
 800966c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00c      	beq.n	800968e <DbgTrace_TxCpltCallback+0x4a>
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	f383 8810 	msr	PRIMASK, r3
}
 800967e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8009680:	887b      	ldrh	r3, [r7, #2]
 8009682:	4a0a      	ldr	r2, [pc, #40]	; (80096ac <DbgTrace_TxCpltCallback+0x68>)
 8009684:	4619      	mov	r1, r3
 8009686:	6938      	ldr	r0, [r7, #16]
 8009688:	f7f7 f87d 	bl	8000786 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800968c:	e008      	b.n	80096a0 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800968e:	4b08      	ldr	r3, [pc, #32]	; (80096b0 <DbgTrace_TxCpltCallback+0x6c>)
 8009690:	2201      	movs	r2, #1
 8009692:	701a      	strb	r2, [r3, #0]
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f383 8810 	msr	PRIMASK, r3
}
 800969e:	bf00      	nop
}
 80096a0:	bf00      	nop
 80096a2:	3718      	adds	r7, #24
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	200004c0 	.word	0x200004c0
 80096ac:	08009645 	.word	0x08009645
 80096b0:	20000049 	.word	0x20000049

080096b4 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 80096ba:	f7f7 f85e 	bl	800077a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 80096be:	2302      	movs	r3, #2
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	2300      	movs	r3, #0
 80096c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80096c8:	4903      	ldr	r1, [pc, #12]	; (80096d8 <DbgTraceInit+0x24>)
 80096ca:	4804      	ldr	r0, [pc, #16]	; (80096dc <DbgTraceInit+0x28>)
 80096cc:	f000 fe5e 	bl	800a38c <CircularQueue_Init>
#endif 
#endif
  return;
 80096d0:	bf00      	nop
}
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	200004e0 	.word	0x200004e0
 80096dc:	200004c0 	.word	0x200004c0

080096e0 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	68b9      	ldr	r1, [r7, #8]
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f000 f805 	bl	8009700 <DbgTraceWrite>
 80096f6:	4603      	mov	r3, r0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b08a      	sub	sp, #40	; 0x28
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009710:	f3ef 8310 	mrs	r3, PRIMASK
 8009714:	61bb      	str	r3, [r7, #24]
  return(result);
 8009716:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8009718:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009720:	d102      	bne.n	8009728 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8009722:	2300      	movs	r3, #0
 8009724:	627b      	str	r3, [r7, #36]	; 0x24
 8009726:	e037      	b.n	8009798 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2b01      	cmp	r3, #1
 800972c:	d006      	beq.n	800973c <DbgTraceWrite+0x3c>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2b02      	cmp	r3, #2
 8009732:	d003      	beq.n	800973c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8009734:	f04f 33ff 	mov.w	r3, #4294967295
 8009738:	627b      	str	r3, [r7, #36]	; 0x24
 800973a:	e02d      	b.n	8009798 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d02a      	beq.n	8009798 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8009746:	b672      	cpsid	i
}
 8009748:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	b29a      	uxth	r2, r3
 800974e:	2301      	movs	r3, #1
 8009750:	68b9      	ldr	r1, [r7, #8]
 8009752:	4814      	ldr	r0, [pc, #80]	; (80097a4 <DbgTraceWrite+0xa4>)
 8009754:	f000 fe4c 	bl	800a3f0 <CircularQueue_Add>
 8009758:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d015      	beq.n	800978c <DbgTraceWrite+0x8c>
 8009760:	4b11      	ldr	r3, [pc, #68]	; (80097a8 <DbgTraceWrite+0xa8>)
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b00      	cmp	r3, #0
 8009768:	d010      	beq.n	800978c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800976a:	4b0f      	ldr	r3, [pc, #60]	; (80097a8 <DbgTraceWrite+0xa8>)
 800976c:	2200      	movs	r2, #0
 800976e:	701a      	strb	r2, [r3, #0]
 8009770:	6a3b      	ldr	r3, [r7, #32]
 8009772:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	f383 8810 	msr	PRIMASK, r3
}
 800977a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	b29b      	uxth	r3, r3
 8009780:	4a0a      	ldr	r2, [pc, #40]	; (80097ac <DbgTraceWrite+0xac>)
 8009782:	4619      	mov	r1, r3
 8009784:	69f8      	ldr	r0, [r7, #28]
 8009786:	f7f6 fffe 	bl	8000786 <DbgOutputTraces>
 800978a:	e005      	b.n	8009798 <DbgTraceWrite+0x98>
 800978c:	6a3b      	ldr	r3, [r7, #32]
 800978e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	f383 8810 	msr	PRIMASK, r3
}
 8009796:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8009798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800979a:	4618      	mov	r0, r3
 800979c:	3728      	adds	r7, #40	; 0x28
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	200004c0 	.word	0x200004c0
 80097a8:	20000049 	.word	0x20000049
 80097ac:	08009645 	.word	0x08009645

080097b0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	4a08      	ldr	r2, [pc, #32]	; (80097e0 <hci_init+0x30>)
 80097c0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80097c2:	4a08      	ldr	r2, [pc, #32]	; (80097e4 <hci_init+0x34>)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80097c8:	4806      	ldr	r0, [pc, #24]	; (80097e4 <hci_init+0x34>)
 80097ca:	f000 f973 	bl	8009ab4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 f8d4 	bl	8009980 <TlInit>

  return;
 80097d8:	bf00      	nop
}
 80097da:	3708      	adds	r7, #8
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	20001508 	.word	0x20001508
 80097e4:	200014e0 	.word	0x200014e0

080097e8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80097ee:	4822      	ldr	r0, [pc, #136]	; (8009878 <hci_user_evt_proc+0x90>)
 80097f0:	f000 fd1e 	bl	800a230 <LST_is_empty>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d12b      	bne.n	8009852 <hci_user_evt_proc+0x6a>
 80097fa:	4b20      	ldr	r3, [pc, #128]	; (800987c <hci_user_evt_proc+0x94>)
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d027      	beq.n	8009852 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009802:	f107 030c 	add.w	r3, r7, #12
 8009806:	4619      	mov	r1, r3
 8009808:	481b      	ldr	r0, [pc, #108]	; (8009878 <hci_user_evt_proc+0x90>)
 800980a:	f000 fda0 	bl	800a34e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800980e:	4b1c      	ldr	r3, [pc, #112]	; (8009880 <hci_user_evt_proc+0x98>)
 8009810:	69db      	ldr	r3, [r3, #28]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00c      	beq.n	8009830 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800981a:	2301      	movs	r3, #1
 800981c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800981e:	4b18      	ldr	r3, [pc, #96]	; (8009880 <hci_user_evt_proc+0x98>)
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	1d3a      	adds	r2, r7, #4
 8009824:	4610      	mov	r0, r2
 8009826:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009828:	793a      	ldrb	r2, [r7, #4]
 800982a:	4b14      	ldr	r3, [pc, #80]	; (800987c <hci_user_evt_proc+0x94>)
 800982c:	701a      	strb	r2, [r3, #0]
 800982e:	e002      	b.n	8009836 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009830:	4b12      	ldr	r3, [pc, #72]	; (800987c <hci_user_evt_proc+0x94>)
 8009832:	2201      	movs	r2, #1
 8009834:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8009836:	4b11      	ldr	r3, [pc, #68]	; (800987c <hci_user_evt_proc+0x94>)
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d004      	beq.n	8009848 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	4618      	mov	r0, r3
 8009842:	f001 fc45 	bl	800b0d0 <TL_MM_EvtDone>
 8009846:	e004      	b.n	8009852 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	4619      	mov	r1, r3
 800984c:	480a      	ldr	r0, [pc, #40]	; (8009878 <hci_user_evt_proc+0x90>)
 800984e:	f000 fd11 	bl	800a274 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009852:	4809      	ldr	r0, [pc, #36]	; (8009878 <hci_user_evt_proc+0x90>)
 8009854:	f000 fcec 	bl	800a230 <LST_is_empty>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d107      	bne.n	800986e <hci_user_evt_proc+0x86>
 800985e:	4b07      	ldr	r3, [pc, #28]	; (800987c <hci_user_evt_proc+0x94>)
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d003      	beq.n	800986e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8009866:	4804      	ldr	r0, [pc, #16]	; (8009878 <hci_user_evt_proc+0x90>)
 8009868:	f7f9 fca4 	bl	80031b4 <hci_notify_asynch_evt>
  }


  return;
 800986c:	bf00      	nop
 800986e:	bf00      	nop
}
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	200001e8 	.word	0x200001e8
 800987c:	200001f4 	.word	0x200001f4
 8009880:	200014e0 	.word	0x200014e0

08009884 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b088      	sub	sp, #32
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	460b      	mov	r3, r1
 800988e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009890:	2000      	movs	r0, #0
 8009892:	f000 f8cb 	bl	8009a2c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8009896:	2300      	movs	r3, #0
 8009898:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	885b      	ldrh	r3, [r3, #2]
 800989e:	b21b      	sxth	r3, r3
 80098a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098a4:	b21a      	sxth	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	881b      	ldrh	r3, [r3, #0]
 80098aa:	029b      	lsls	r3, r3, #10
 80098ac:	b21b      	sxth	r3, r3
 80098ae:	4313      	orrs	r3, r2
 80098b0:	b21b      	sxth	r3, r3
 80098b2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	b2d9      	uxtb	r1, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	689a      	ldr	r2, [r3, #8]
 80098be:	8bbb      	ldrh	r3, [r7, #28]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 f88d 	bl	80099e0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80098c6:	e04e      	b.n	8009966 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80098c8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80098cc:	f7f9 fc89 	bl	80031e2 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80098d0:	e043      	b.n	800995a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80098d2:	f107 030c 	add.w	r3, r7, #12
 80098d6:	4619      	mov	r1, r3
 80098d8:	4828      	ldr	r0, [pc, #160]	; (800997c <hci_send_req+0xf8>)
 80098da:	f000 fd38 	bl	800a34e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	7a5b      	ldrb	r3, [r3, #9]
 80098e2:	2b0f      	cmp	r3, #15
 80098e4:	d114      	bne.n	8009910 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	330b      	adds	r3, #11
 80098ea:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	885b      	ldrh	r3, [r3, #2]
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	8bba      	ldrh	r2, [r7, #28]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d104      	bne.n	8009902 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	7812      	ldrb	r2, [r2, #0]
 8009900:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	785b      	ldrb	r3, [r3, #1]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d027      	beq.n	800995a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800990a:	2301      	movs	r3, #1
 800990c:	77fb      	strb	r3, [r7, #31]
 800990e:	e024      	b.n	800995a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	330b      	adds	r3, #11
 8009914:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800991c:	b29b      	uxth	r3, r3
 800991e:	8bba      	ldrh	r2, [r7, #28]
 8009920:	429a      	cmp	r2, r3
 8009922:	d114      	bne.n	800994e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	7a9b      	ldrb	r3, [r3, #10]
 8009928:	3b03      	subs	r3, #3
 800992a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	695a      	ldr	r2, [r3, #20]
 8009930:	7dfb      	ldrb	r3, [r7, #23]
 8009932:	429a      	cmp	r2, r3
 8009934:	bfa8      	it	ge
 8009936:	461a      	movge	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6918      	ldr	r0, [r3, #16]
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	1cd9      	adds	r1, r3, #3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	461a      	mov	r2, r3
 800994a:	f001 ff1f 	bl	800b78c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009956:	2301      	movs	r3, #1
 8009958:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800995a:	4808      	ldr	r0, [pc, #32]	; (800997c <hci_send_req+0xf8>)
 800995c:	f000 fc68 	bl	800a230 <LST_is_empty>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d0b5      	beq.n	80098d2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009966:	7ffb      	ldrb	r3, [r7, #31]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d0ad      	beq.n	80098c8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800996c:	2001      	movs	r0, #1
 800996e:	f000 f85d 	bl	8009a2c <NotifyCmdStatus>

  return 0;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3720      	adds	r7, #32
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	20001500 	.word	0x20001500

08009980 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009988:	480f      	ldr	r0, [pc, #60]	; (80099c8 <TlInit+0x48>)
 800998a:	f000 fc41 	bl	800a210 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800998e:	4a0f      	ldr	r2, [pc, #60]	; (80099cc <TlInit+0x4c>)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009994:	480e      	ldr	r0, [pc, #56]	; (80099d0 <TlInit+0x50>)
 8009996:	f000 fc3b 	bl	800a210 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800999a:	4b0e      	ldr	r3, [pc, #56]	; (80099d4 <TlInit+0x54>)
 800999c:	2201      	movs	r2, #1
 800999e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80099a0:	4b0d      	ldr	r3, [pc, #52]	; (80099d8 <TlInit+0x58>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00a      	beq.n	80099be <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80099ac:	4b0b      	ldr	r3, [pc, #44]	; (80099dc <TlInit+0x5c>)
 80099ae:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80099b0:	4b09      	ldr	r3, [pc, #36]	; (80099d8 <TlInit+0x58>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f107 0208 	add.w	r2, r7, #8
 80099b8:	4610      	mov	r0, r2
 80099ba:	4798      	blx	r3
  }

  return;
 80099bc:	bf00      	nop
 80099be:	bf00      	nop
}
 80099c0:	3718      	adds	r7, #24
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	20001500 	.word	0x20001500
 80099cc:	200001f0 	.word	0x200001f0
 80099d0:	200001e8 	.word	0x200001e8
 80099d4:	200001f4 	.word	0x200001f4
 80099d8:	200014e0 	.word	0x200014e0
 80099dc:	08009a6d 	.word	0x08009a6d

080099e0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	4603      	mov	r3, r0
 80099e8:	603a      	str	r2, [r7, #0]
 80099ea:	80fb      	strh	r3, [r7, #6]
 80099ec:	460b      	mov	r3, r1
 80099ee:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80099f0:	4b0c      	ldr	r3, [pc, #48]	; (8009a24 <SendCmd+0x44>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	88fa      	ldrh	r2, [r7, #6]
 80099f6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80099fa:	4b0a      	ldr	r3, [pc, #40]	; (8009a24 <SendCmd+0x44>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	797a      	ldrb	r2, [r7, #5]
 8009a00:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009a02:	4b08      	ldr	r3, [pc, #32]	; (8009a24 <SendCmd+0x44>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	330c      	adds	r3, #12
 8009a08:	797a      	ldrb	r2, [r7, #5]
 8009a0a:	6839      	ldr	r1, [r7, #0]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f001 febd 	bl	800b78c <memcpy>

  hciContext.io.Send(0,0);
 8009a12:	4b05      	ldr	r3, [pc, #20]	; (8009a28 <SendCmd+0x48>)
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	2100      	movs	r1, #0
 8009a18:	2000      	movs	r0, #0
 8009a1a:	4798      	blx	r3

  return;
 8009a1c:	bf00      	nop
}
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	200001f0 	.word	0x200001f0
 8009a28:	200014e0 	.word	0x200014e0

08009a2c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	4603      	mov	r3, r0
 8009a34:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009a36:	79fb      	ldrb	r3, [r7, #7]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d108      	bne.n	8009a4e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009a3c:	4b0a      	ldr	r3, [pc, #40]	; (8009a68 <NotifyCmdStatus+0x3c>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00d      	beq.n	8009a60 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009a44:	4b08      	ldr	r3, [pc, #32]	; (8009a68 <NotifyCmdStatus+0x3c>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2000      	movs	r0, #0
 8009a4a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009a4c:	e008      	b.n	8009a60 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009a4e:	4b06      	ldr	r3, [pc, #24]	; (8009a68 <NotifyCmdStatus+0x3c>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d004      	beq.n	8009a60 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009a56:	4b04      	ldr	r3, [pc, #16]	; (8009a68 <NotifyCmdStatus+0x3c>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2001      	movs	r0, #1
 8009a5c:	4798      	blx	r3
  return;
 8009a5e:	bf00      	nop
 8009a60:	bf00      	nop
}
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	20001508 	.word	0x20001508

08009a6c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	7a5b      	ldrb	r3, [r3, #9]
 8009a78:	2b0f      	cmp	r3, #15
 8009a7a:	d003      	beq.n	8009a84 <TlEvtReceived+0x18>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	7a5b      	ldrb	r3, [r3, #9]
 8009a80:	2b0e      	cmp	r3, #14
 8009a82:	d107      	bne.n	8009a94 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009a84:	6879      	ldr	r1, [r7, #4]
 8009a86:	4809      	ldr	r0, [pc, #36]	; (8009aac <TlEvtReceived+0x40>)
 8009a88:	f000 fc1a 	bl	800a2c0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	f7f9 fb9d 	bl	80031cc <hci_cmd_resp_release>
 8009a92:	e006      	b.n	8009aa2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009a94:	6879      	ldr	r1, [r7, #4]
 8009a96:	4806      	ldr	r0, [pc, #24]	; (8009ab0 <TlEvtReceived+0x44>)
 8009a98:	f000 fc12 	bl	800a2c0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009a9c:	4804      	ldr	r0, [pc, #16]	; (8009ab0 <TlEvtReceived+0x44>)
 8009a9e:	f7f9 fb89 	bl	80031b4 <hci_notify_asynch_evt>
  }

  return;
 8009aa2:	bf00      	nop
}
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	20001500 	.word	0x20001500
 8009ab0:	200001e8 	.word	0x200001e8

08009ab4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a05      	ldr	r2, [pc, #20]	; (8009ad4 <hci_register_io_bus+0x20>)
 8009ac0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a04      	ldr	r2, [pc, #16]	; (8009ad8 <hci_register_io_bus+0x24>)
 8009ac6:	611a      	str	r2, [r3, #16]

  return;
 8009ac8:	bf00      	nop
}
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr
 8009ad4:	0800ae49 	.word	0x0800ae49
 8009ad8:	0800aeb1 	.word	0x0800aeb1

08009adc <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	68b9      	ldr	r1, [r7, #8]
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f001 fe4d 	bl	800b78c <memcpy>
 8009af2:	4603      	mov	r3, r0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	68b9      	ldr	r1, [r7, #8]
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f001 fe4b 	bl	800b7a8 <memset>
 8009b12:	4603      	mov	r3, r0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b085      	sub	sp, #20
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	4603      	mov	r3, r0
 8009b24:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009b26:	4b0f      	ldr	r3, [pc, #60]	; (8009b64 <OTP_Read+0x48>)
 8009b28:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009b2a:	e002      	b.n	8009b32 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	3b08      	subs	r3, #8
 8009b30:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	3307      	adds	r3, #7
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	79fa      	ldrb	r2, [r7, #7]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d003      	beq.n	8009b46 <OTP_Read+0x2a>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	4a09      	ldr	r2, [pc, #36]	; (8009b68 <OTP_Read+0x4c>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d1f2      	bne.n	8009b2c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	3307      	adds	r3, #7
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	79fa      	ldrb	r2, [r7, #7]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d001      	beq.n	8009b56 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009b52:	2300      	movs	r3, #0
 8009b54:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009b56:	68fb      	ldr	r3, [r7, #12]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3714      	adds	r7, #20
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr
 8009b64:	1fff73f8 	.word	0x1fff73f8
 8009b68:	1fff7000 	.word	0x1fff7000

08009b6c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b08a      	sub	sp, #40	; 0x28
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8009b74:	2300      	movs	r3, #0
 8009b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	2bff      	cmp	r3, #255	; 0xff
 8009b86:	d14f      	bne.n	8009c28 <PeerToPeer_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8009b88:	6a3b      	ldr	r3, [r7, #32]
 8009b8a:	3302      	adds	r3, #2
 8009b8c:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	881b      	ldrh	r3, [r3, #0]
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	461a      	mov	r2, r3
 8009b96:	f640 4301 	movw	r3, #3073	; 0xc01
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d140      	bne.n	8009c20 <PeerToPeer_Event_Handler+0xb4>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	3302      	adds	r3, #2
 8009ba2:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	885b      	ldrh	r3, [r3, #2]
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	461a      	mov	r2, r3
 8009bac:	4b22      	ldr	r3, [pc, #136]	; (8009c38 <PeerToPeer_Event_Handler+0xcc>)
 8009bae:	889b      	ldrh	r3, [r3, #4]
 8009bb0:	3302      	adds	r3, #2
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d118      	bne.n	8009be8 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	7a1b      	ldrb	r3, [r3, #8]
 8009bc0:	f003 0301 	and.w	r3, r3, #1
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d007      	beq.n	8009bd8 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8009bcc:	f107 0308 	add.w	r3, r7, #8
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7f9 fb49 	bl	8003268 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8009bd6:	e025      	b.n	8009c24 <PeerToPeer_Event_Handler+0xb8>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8009bdc:	f107 0308 	add.w	r3, r7, #8
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7f9 fb41 	bl	8003268 <P2PS_STM_App_Notification>
        break;
 8009be6:	e01d      	b.n	8009c24 <PeerToPeer_Event_Handler+0xb8>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	885b      	ldrh	r3, [r3, #2]
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	461a      	mov	r2, r3
 8009bf0:	4b11      	ldr	r3, [pc, #68]	; (8009c38 <PeerToPeer_Event_Handler+0xcc>)
 8009bf2:	885b      	ldrh	r3, [r3, #2]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d114      	bne.n	8009c24 <PeerToPeer_Event_Handler+0xb8>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 8009bfa:	4810      	ldr	r0, [pc, #64]	; (8009c3c <PeerToPeer_Event_Handler+0xd0>)
 8009bfc:	f001 fe62 	bl	800b8c4 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	88db      	ldrh	r3, [r3, #6]
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	3308      	adds	r3, #8
 8009c12:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8009c14:	f107 0308 	add.w	r3, r7, #8
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7f9 fb25 	bl	8003268 <P2PS_STM_App_Notification>
        break;
 8009c1e:	e001      	b.n	8009c24 <PeerToPeer_Event_Handler+0xb8>

        default:
          break;
 8009c20:	bf00      	nop
 8009c22:	e002      	b.n	8009c2a <PeerToPeer_Event_Handler+0xbe>
        break;
 8009c24:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009c26:	e000      	b.n	8009c2a <PeerToPeer_Event_Handler+0xbe>

    default:
      break;
 8009c28:	bf00      	nop
  }

  return(return_value);
 8009c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3728      	adds	r7, #40	; 0x28
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	200001f8 	.word	0x200001f8
 8009c3c:	0800d3b8 	.word	0x0800d3b8

08009c40 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b08a      	sub	sp, #40	; 0x28
 8009c44:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8009c46:	484a      	ldr	r0, [pc, #296]	; (8009d70 <P2PS_STM_Init+0x130>)
 8009c48:	f001 f850 	bl	800acec <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8009c4c:	238f      	movs	r3, #143	; 0x8f
 8009c4e:	703b      	strb	r3, [r7, #0]
 8009c50:	23e5      	movs	r3, #229	; 0xe5
 8009c52:	707b      	strb	r3, [r7, #1]
 8009c54:	23b3      	movs	r3, #179	; 0xb3
 8009c56:	70bb      	strb	r3, [r7, #2]
 8009c58:	23d5      	movs	r3, #213	; 0xd5
 8009c5a:	70fb      	strb	r3, [r7, #3]
 8009c5c:	232e      	movs	r3, #46	; 0x2e
 8009c5e:	713b      	strb	r3, [r7, #4]
 8009c60:	237f      	movs	r3, #127	; 0x7f
 8009c62:	717b      	strb	r3, [r7, #5]
 8009c64:	234a      	movs	r3, #74	; 0x4a
 8009c66:	71bb      	strb	r3, [r7, #6]
 8009c68:	2398      	movs	r3, #152	; 0x98
 8009c6a:	71fb      	strb	r3, [r7, #7]
 8009c6c:	232a      	movs	r3, #42	; 0x2a
 8009c6e:	723b      	strb	r3, [r7, #8]
 8009c70:	2348      	movs	r3, #72	; 0x48
 8009c72:	727b      	strb	r3, [r7, #9]
 8009c74:	237a      	movs	r3, #122	; 0x7a
 8009c76:	72bb      	strb	r3, [r7, #10]
 8009c78:	23cc      	movs	r3, #204	; 0xcc
 8009c7a:	72fb      	strb	r3, [r7, #11]
 8009c7c:	2340      	movs	r3, #64	; 0x40
 8009c7e:	733b      	strb	r3, [r7, #12]
 8009c80:	23fe      	movs	r3, #254	; 0xfe
 8009c82:	737b      	strb	r3, [r7, #13]
 8009c84:	2300      	movs	r3, #0
 8009c86:	73bb      	strb	r3, [r7, #14]
 8009c88:	2300      	movs	r3, #0
 8009c8a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8009c8c:	4639      	mov	r1, r7
 8009c8e:	4b39      	ldr	r3, [pc, #228]	; (8009d74 <P2PS_STM_Init+0x134>)
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	2308      	movs	r3, #8
 8009c94:	2201      	movs	r2, #1
 8009c96:	2002      	movs	r0, #2
 8009c98:	f7fe ff4f 	bl	8008b3a <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8009c9c:	2319      	movs	r3, #25
 8009c9e:	703b      	strb	r3, [r7, #0]
 8009ca0:	23ed      	movs	r3, #237	; 0xed
 8009ca2:	707b      	strb	r3, [r7, #1]
 8009ca4:	2382      	movs	r3, #130	; 0x82
 8009ca6:	70bb      	strb	r3, [r7, #2]
 8009ca8:	23ae      	movs	r3, #174	; 0xae
 8009caa:	70fb      	strb	r3, [r7, #3]
 8009cac:	23ed      	movs	r3, #237	; 0xed
 8009cae:	713b      	strb	r3, [r7, #4]
 8009cb0:	2321      	movs	r3, #33	; 0x21
 8009cb2:	717b      	strb	r3, [r7, #5]
 8009cb4:	234c      	movs	r3, #76	; 0x4c
 8009cb6:	71bb      	strb	r3, [r7, #6]
 8009cb8:	239d      	movs	r3, #157	; 0x9d
 8009cba:	71fb      	strb	r3, [r7, #7]
 8009cbc:	2341      	movs	r3, #65	; 0x41
 8009cbe:	723b      	strb	r3, [r7, #8]
 8009cc0:	2345      	movs	r3, #69	; 0x45
 8009cc2:	727b      	strb	r3, [r7, #9]
 8009cc4:	2322      	movs	r3, #34	; 0x22
 8009cc6:	72bb      	strb	r3, [r7, #10]
 8009cc8:	238e      	movs	r3, #142	; 0x8e
 8009cca:	72fb      	strb	r3, [r7, #11]
 8009ccc:	2341      	movs	r3, #65	; 0x41
 8009cce:	733b      	strb	r3, [r7, #12]
 8009cd0:	23fe      	movs	r3, #254	; 0xfe
 8009cd2:	737b      	strb	r3, [r7, #13]
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	73bb      	strb	r3, [r7, #14]
 8009cd8:	2300      	movs	r3, #0
 8009cda:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8009cdc:	4b25      	ldr	r3, [pc, #148]	; (8009d74 <P2PS_STM_Init+0x134>)
 8009cde:	8818      	ldrh	r0, [r3, #0]
 8009ce0:	463a      	mov	r2, r7
 8009ce2:	4b25      	ldr	r3, [pc, #148]	; (8009d78 <P2PS_STM_Init+0x138>)
 8009ce4:	9305      	str	r3, [sp, #20]
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	9304      	str	r3, [sp, #16]
 8009cea:	230a      	movs	r3, #10
 8009cec:	9303      	str	r3, [sp, #12]
 8009cee:	2301      	movs	r3, #1
 8009cf0:	9302      	str	r3, [sp, #8]
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	9301      	str	r3, [sp, #4]
 8009cf6:	2306      	movs	r3, #6
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	2302      	movs	r3, #2
 8009cfc:	2102      	movs	r1, #2
 8009cfe:	f7fe fff2 	bl	8008ce6 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8009d02:	2319      	movs	r3, #25
 8009d04:	703b      	strb	r3, [r7, #0]
 8009d06:	23ed      	movs	r3, #237	; 0xed
 8009d08:	707b      	strb	r3, [r7, #1]
 8009d0a:	2382      	movs	r3, #130	; 0x82
 8009d0c:	70bb      	strb	r3, [r7, #2]
 8009d0e:	23ae      	movs	r3, #174	; 0xae
 8009d10:	70fb      	strb	r3, [r7, #3]
 8009d12:	23ed      	movs	r3, #237	; 0xed
 8009d14:	713b      	strb	r3, [r7, #4]
 8009d16:	2321      	movs	r3, #33	; 0x21
 8009d18:	717b      	strb	r3, [r7, #5]
 8009d1a:	234c      	movs	r3, #76	; 0x4c
 8009d1c:	71bb      	strb	r3, [r7, #6]
 8009d1e:	239d      	movs	r3, #157	; 0x9d
 8009d20:	71fb      	strb	r3, [r7, #7]
 8009d22:	2341      	movs	r3, #65	; 0x41
 8009d24:	723b      	strb	r3, [r7, #8]
 8009d26:	2345      	movs	r3, #69	; 0x45
 8009d28:	727b      	strb	r3, [r7, #9]
 8009d2a:	2322      	movs	r3, #34	; 0x22
 8009d2c:	72bb      	strb	r3, [r7, #10]
 8009d2e:	238e      	movs	r3, #142	; 0x8e
 8009d30:	72fb      	strb	r3, [r7, #11]
 8009d32:	2342      	movs	r3, #66	; 0x42
 8009d34:	733b      	strb	r3, [r7, #12]
 8009d36:	23fe      	movs	r3, #254	; 0xfe
 8009d38:	737b      	strb	r3, [r7, #13]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	73bb      	strb	r3, [r7, #14]
 8009d3e:	2300      	movs	r3, #0
 8009d40:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8009d42:	4b0c      	ldr	r3, [pc, #48]	; (8009d74 <P2PS_STM_Init+0x134>)
 8009d44:	8818      	ldrh	r0, [r3, #0]
 8009d46:	463a      	mov	r2, r7
 8009d48:	4b0c      	ldr	r3, [pc, #48]	; (8009d7c <P2PS_STM_Init+0x13c>)
 8009d4a:	9305      	str	r3, [sp, #20]
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	9304      	str	r3, [sp, #16]
 8009d50:	230a      	movs	r3, #10
 8009d52:	9303      	str	r3, [sp, #12]
 8009d54:	2301      	movs	r3, #1
 8009d56:	9302      	str	r3, [sp, #8]
 8009d58:	2300      	movs	r3, #0
 8009d5a:	9301      	str	r3, [sp, #4]
 8009d5c:	2310      	movs	r3, #16
 8009d5e:	9300      	str	r3, [sp, #0]
 8009d60:	2306      	movs	r3, #6
 8009d62:	2102      	movs	r1, #2
 8009d64:	f7fe ffbf 	bl	8008ce6 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8009d68:	bf00      	nop
}
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	08009b6d 	.word	0x08009b6d
 8009d74:	200001f8 	.word	0x200001f8
 8009d78:	200001fa 	.word	0x200001fa
 8009d7c:	200001fc 	.word	0x200001fc

08009d80 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af02      	add	r7, sp, #8
 8009d86:	4603      	mov	r3, r0
 8009d88:	6039      	str	r1, [r7, #0]
 8009d8a:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8009d8c:	2392      	movs	r3, #146	; 0x92
 8009d8e:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 8009d90:	88fb      	ldrh	r3, [r7, #6]
 8009d92:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d10c      	bne.n	8009db4 <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8009d9a:	4b09      	ldr	r3, [pc, #36]	; (8009dc0 <P2PS_STM_App_Update_Char+0x40>)
 8009d9c:	8818      	ldrh	r0, [r3, #0]
 8009d9e:	4b08      	ldr	r3, [pc, #32]	; (8009dc0 <P2PS_STM_App_Update_Char+0x40>)
 8009da0:	8899      	ldrh	r1, [r3, #4]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	2306      	movs	r3, #6
 8009da8:	2200      	movs	r2, #0
 8009daa:	f7ff f8a4 	bl	8008ef6 <aci_gatt_update_char_value>
 8009dae:	4603      	mov	r3, r0
 8009db0:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             6, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 8009db2:	e000      	b.n	8009db6 <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 8009db4:	bf00      	nop
  }

  return result;
 8009db6:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 8009db8:	4618      	mov	r0, r3
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	200001f8 	.word	0x200001f8

08009dc4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b088      	sub	sp, #32
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009dcc:	f107 030c 	add.w	r3, r7, #12
 8009dd0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	2125      	movs	r1, #37	; 0x25
 8009ddc:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009de0:	f000 f94c 	bl	800a07c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009de4:	69fb      	ldr	r3, [r7, #28]
 8009de6:	330b      	adds	r3, #11
 8009de8:	78db      	ldrb	r3, [r3, #3]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3720      	adds	r7, #32
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b088      	sub	sp, #32
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009dfa:	f107 030c 	add.w	r3, r7, #12
 8009dfe:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	210f      	movs	r1, #15
 8009e0a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8009e0e:	f000 f935 	bl	800a07c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	330b      	adds	r3, #11
 8009e16:	78db      	ldrb	r3, [r3, #3]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3720      	adds	r7, #32
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b088      	sub	sp, #32
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009e28:	f107 030c 	add.w	r3, r7, #12
 8009e2c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	210e      	movs	r1, #14
 8009e34:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8009e38:	f000 f920 	bl	800a07c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	330b      	adds	r3, #11
 8009e40:	78db      	ldrb	r3, [r3, #3]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3720      	adds	r7, #32
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
	...

08009e4c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b08b      	sub	sp, #44	; 0x2c
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009e54:	2300      	movs	r3, #0
 8009e56:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009e60:	2300      	movs	r3, #0
 8009e62:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009e64:	2300      	movs	r3, #0
 8009e66:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009e70:	2300      	movs	r3, #0
 8009e72:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009e74:	4b4a      	ldr	r3, [pc, #296]	; (8009fa0 <SHCI_GetWirelessFwInfo+0x154>)
 8009e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e78:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009e7c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009e86:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a44      	ldr	r2, [pc, #272]	; (8009fa4 <SHCI_GetWirelessFwInfo+0x158>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d10f      	bne.n	8009eb8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	695b      	ldr	r3, [r3, #20]
 8009e9c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	69db      	ldr	r3, [r3, #28]
 8009ea8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	617b      	str	r3, [r7, #20]
 8009eb6:	e01a      	b.n	8009eee <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009ec0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009ec4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	695b      	ldr	r3, [r3, #20]
 8009ed4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	699b      	ldr	r3, [r3, #24]
 8009edc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	0e1b      	lsrs	r3, r3, #24
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efa:	0c1b      	lsrs	r3, r3, #16
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f04:	0a1b      	lsrs	r3, r3, #8
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0e:	091b      	lsrs	r3, r3, #4
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	f003 030f 	and.w	r3, r3, #15
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	f003 030f 	and.w	r3, r3, #15
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009f2a:	6a3b      	ldr	r3, [r7, #32]
 8009f2c:	0e1b      	lsrs	r3, r3, #24
 8009f2e:	b2da      	uxtb	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009f34:	6a3b      	ldr	r3, [r7, #32]
 8009f36:	0c1b      	lsrs	r3, r3, #16
 8009f38:	b2da      	uxtb	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009f3e:	6a3b      	ldr	r3, [r7, #32]
 8009f40:	0a1b      	lsrs	r3, r3, #8
 8009f42:	b2da      	uxtb	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	b2da      	uxtb	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	0e1b      	lsrs	r3, r3, #24
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	0c1b      	lsrs	r3, r3, #16
 8009f66:	b2da      	uxtb	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	0a1b      	lsrs	r3, r3, #8
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	0e1b      	lsrs	r3, r3, #24
 8009f7a:	b2da      	uxtb	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	0c1b      	lsrs	r3, r3, #16
 8009f84:	b2da      	uxtb	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	372c      	adds	r7, #44	; 0x2c
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	58004000 	.word	0x58004000
 8009fa4:	a94656b9 	.word	0xa94656b9

08009fa8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	4a08      	ldr	r2, [pc, #32]	; (8009fd8 <shci_init+0x30>)
 8009fb8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009fba:	4a08      	ldr	r2, [pc, #32]	; (8009fdc <shci_init+0x34>)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009fc0:	4806      	ldr	r0, [pc, #24]	; (8009fdc <shci_init+0x34>)
 8009fc2:	f000 f911 	bl	800a1e8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f000 f894 	bl	800a0f8 <TlInit>

  return;
 8009fd0:	bf00      	nop
}
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	2000152c 	.word	0x2000152c
 8009fdc:	2000150c 	.word	0x2000150c

08009fe0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009fe6:	4822      	ldr	r0, [pc, #136]	; (800a070 <shci_user_evt_proc+0x90>)
 8009fe8:	f000 f922 	bl	800a230 <LST_is_empty>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d12b      	bne.n	800a04a <shci_user_evt_proc+0x6a>
 8009ff2:	4b20      	ldr	r3, [pc, #128]	; (800a074 <shci_user_evt_proc+0x94>)
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d027      	beq.n	800a04a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009ffa:	f107 030c 	add.w	r3, r7, #12
 8009ffe:	4619      	mov	r1, r3
 800a000:	481b      	ldr	r0, [pc, #108]	; (800a070 <shci_user_evt_proc+0x90>)
 800a002:	f000 f9a4 	bl	800a34e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a006:	4b1c      	ldr	r3, [pc, #112]	; (800a078 <shci_user_evt_proc+0x98>)
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00c      	beq.n	800a028 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a012:	2301      	movs	r3, #1
 800a014:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a016:	4b18      	ldr	r3, [pc, #96]	; (800a078 <shci_user_evt_proc+0x98>)
 800a018:	69db      	ldr	r3, [r3, #28]
 800a01a:	1d3a      	adds	r2, r7, #4
 800a01c:	4610      	mov	r0, r2
 800a01e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a020:	793a      	ldrb	r2, [r7, #4]
 800a022:	4b14      	ldr	r3, [pc, #80]	; (800a074 <shci_user_evt_proc+0x94>)
 800a024:	701a      	strb	r2, [r3, #0]
 800a026:	e002      	b.n	800a02e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a028:	4b12      	ldr	r3, [pc, #72]	; (800a074 <shci_user_evt_proc+0x94>)
 800a02a:	2201      	movs	r2, #1
 800a02c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a02e:	4b11      	ldr	r3, [pc, #68]	; (800a074 <shci_user_evt_proc+0x94>)
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d004      	beq.n	800a040 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	4618      	mov	r0, r3
 800a03a:	f001 f849 	bl	800b0d0 <TL_MM_EvtDone>
 800a03e:	e004      	b.n	800a04a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	4619      	mov	r1, r3
 800a044:	480a      	ldr	r0, [pc, #40]	; (800a070 <shci_user_evt_proc+0x90>)
 800a046:	f000 f915 	bl	800a274 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a04a:	4809      	ldr	r0, [pc, #36]	; (800a070 <shci_user_evt_proc+0x90>)
 800a04c:	f000 f8f0 	bl	800a230 <LST_is_empty>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d107      	bne.n	800a066 <shci_user_evt_proc+0x86>
 800a056:	4b07      	ldr	r3, [pc, #28]	; (800a074 <shci_user_evt_proc+0x94>)
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d003      	beq.n	800a066 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a05e:	4804      	ldr	r0, [pc, #16]	; (800a070 <shci_user_evt_proc+0x90>)
 800a060:	f7f6 ff61 	bl	8000f26 <shci_notify_asynch_evt>
  }


  return;
 800a064:	bf00      	nop
 800a066:	bf00      	nop
}
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	2000020c 	.word	0x2000020c
 800a074:	2000021c 	.word	0x2000021c
 800a078:	2000150c 	.word	0x2000150c

0800a07c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	60ba      	str	r2, [r7, #8]
 800a084:	607b      	str	r3, [r7, #4]
 800a086:	4603      	mov	r3, r0
 800a088:	81fb      	strh	r3, [r7, #14]
 800a08a:	460b      	mov	r3, r1
 800a08c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a08e:	2000      	movs	r0, #0
 800a090:	f000 f864 	bl	800a15c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a094:	4b16      	ldr	r3, [pc, #88]	; (800a0f0 <shci_send+0x74>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	89fa      	ldrh	r2, [r7, #14]
 800a09a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a09e:	4b14      	ldr	r3, [pc, #80]	; (800a0f0 <shci_send+0x74>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	7b7a      	ldrb	r2, [r7, #13]
 800a0a4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a0a6:	4b12      	ldr	r3, [pc, #72]	; (800a0f0 <shci_send+0x74>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	330c      	adds	r3, #12
 800a0ac:	7b7a      	ldrb	r2, [r7, #13]
 800a0ae:	68b9      	ldr	r1, [r7, #8]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f001 fb6b 	bl	800b78c <memcpy>

  shciContext.io.Send(0,0);
 800a0b6:	4b0f      	ldr	r3, [pc, #60]	; (800a0f4 <shci_send+0x78>)
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	2000      	movs	r0, #0
 800a0be:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a0c0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a0c4:	f7f6 ff46 	bl	8000f54 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f103 0008 	add.w	r0, r3, #8
 800a0ce:	4b08      	ldr	r3, [pc, #32]	; (800a0f0 <shci_send+0x74>)
 800a0d0:	6819      	ldr	r1, [r3, #0]
 800a0d2:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <shci_send+0x74>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	789b      	ldrb	r3, [r3, #2]
 800a0d8:	3303      	adds	r3, #3
 800a0da:	461a      	mov	r2, r3
 800a0dc:	f001 fb56 	bl	800b78c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a0e0:	2001      	movs	r0, #1
 800a0e2:	f000 f83b 	bl	800a15c <Cmd_SetStatus>

  return;
 800a0e6:	bf00      	nop
}
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20000218 	.word	0x20000218
 800a0f4:	2000150c 	.word	0x2000150c

0800a0f8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b086      	sub	sp, #24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a100:	4a10      	ldr	r2, [pc, #64]	; (800a144 <TlInit+0x4c>)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a106:	4810      	ldr	r0, [pc, #64]	; (800a148 <TlInit+0x50>)
 800a108:	f000 f882 	bl	800a210 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a10c:	2001      	movs	r0, #1
 800a10e:	f000 f825 	bl	800a15c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a112:	4b0e      	ldr	r3, [pc, #56]	; (800a14c <TlInit+0x54>)
 800a114:	2201      	movs	r2, #1
 800a116:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a118:	4b0d      	ldr	r3, [pc, #52]	; (800a150 <TlInit+0x58>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00c      	beq.n	800a13a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a124:	4b0b      	ldr	r3, [pc, #44]	; (800a154 <TlInit+0x5c>)
 800a126:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a128:	4b0b      	ldr	r3, [pc, #44]	; (800a158 <TlInit+0x60>)
 800a12a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a12c:	4b08      	ldr	r3, [pc, #32]	; (800a150 <TlInit+0x58>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f107 020c 	add.w	r2, r7, #12
 800a134:	4610      	mov	r0, r2
 800a136:	4798      	blx	r3
  }

  return;
 800a138:	bf00      	nop
 800a13a:	bf00      	nop
}
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	20000218 	.word	0x20000218
 800a148:	2000020c 	.word	0x2000020c
 800a14c:	2000021c 	.word	0x2000021c
 800a150:	2000150c 	.word	0x2000150c
 800a154:	0800a1ad 	.word	0x0800a1ad
 800a158:	0800a1c5 	.word	0x0800a1c5

0800a15c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	4603      	mov	r3, r0
 800a164:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a166:	79fb      	ldrb	r3, [r7, #7]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10b      	bne.n	800a184 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a16c:	4b0d      	ldr	r3, [pc, #52]	; (800a1a4 <Cmd_SetStatus+0x48>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d003      	beq.n	800a17c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a174:	4b0b      	ldr	r3, [pc, #44]	; (800a1a4 <Cmd_SetStatus+0x48>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2000      	movs	r0, #0
 800a17a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a17c:	4b0a      	ldr	r3, [pc, #40]	; (800a1a8 <Cmd_SetStatus+0x4c>)
 800a17e:	2200      	movs	r2, #0
 800a180:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a182:	e00b      	b.n	800a19c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a184:	4b08      	ldr	r3, [pc, #32]	; (800a1a8 <Cmd_SetStatus+0x4c>)
 800a186:	2201      	movs	r2, #1
 800a188:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a18a:	4b06      	ldr	r3, [pc, #24]	; (800a1a4 <Cmd_SetStatus+0x48>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d004      	beq.n	800a19c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a192:	4b04      	ldr	r3, [pc, #16]	; (800a1a4 <Cmd_SetStatus+0x48>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	2001      	movs	r0, #1
 800a198:	4798      	blx	r3
  return;
 800a19a:	bf00      	nop
 800a19c:	bf00      	nop
}
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	2000152c 	.word	0x2000152c
 800a1a8:	20000214 	.word	0x20000214

0800a1ac <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	f7f6 fec2 	bl	8000f3e <shci_cmd_resp_release>

  return;
 800a1ba:	bf00      	nop
}
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
	...

0800a1c4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a1cc:	6879      	ldr	r1, [r7, #4]
 800a1ce:	4805      	ldr	r0, [pc, #20]	; (800a1e4 <TlUserEvtReceived+0x20>)
 800a1d0:	f000 f876 	bl	800a2c0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a1d4:	4803      	ldr	r0, [pc, #12]	; (800a1e4 <TlUserEvtReceived+0x20>)
 800a1d6:	f7f6 fea6 	bl	8000f26 <shci_notify_asynch_evt>

  return;
 800a1da:	bf00      	nop
}
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	2000020c 	.word	0x2000020c

0800a1e8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a05      	ldr	r2, [pc, #20]	; (800a208 <shci_register_io_bus+0x20>)
 800a1f4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4a04      	ldr	r2, [pc, #16]	; (800a20c <shci_register_io_bus+0x24>)
 800a1fa:	611a      	str	r2, [r3, #16]

  return;
 800a1fc:	bf00      	nop
}
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	0800af5d 	.word	0x0800af5d
 800a20c:	0800afb1 	.word	0x0800afb1

0800a210 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	605a      	str	r2, [r3, #4]
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a230:	b480      	push	{r7}
 800a232:	b087      	sub	sp, #28
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a238:	f3ef 8310 	mrs	r3, PRIMASK
 800a23c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a23e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a240:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a242:	b672      	cpsid	i
}
 800a244:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d102      	bne.n	800a256 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a250:	2301      	movs	r3, #1
 800a252:	75fb      	strb	r3, [r7, #23]
 800a254:	e001      	b.n	800a25a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a256:	2300      	movs	r3, #0
 800a258:	75fb      	strb	r3, [r7, #23]
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	f383 8810 	msr	PRIMASK, r3
}
 800a264:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a266:	7dfb      	ldrb	r3, [r7, #23]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	371c      	adds	r7, #28
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a274:	b480      	push	{r7}
 800a276:	b087      	sub	sp, #28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a27e:	f3ef 8310 	mrs	r3, PRIMASK
 800a282:	60fb      	str	r3, [r7, #12]
  return(result);
 800a284:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a286:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a288:	b672      	cpsid	i
}
 800a28a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	683a      	ldr	r2, [r7, #0]
 800a2a6:	605a      	str	r2, [r3, #4]
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	f383 8810 	msr	PRIMASK, r3
}
 800a2b2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a2b4:	bf00      	nop
 800a2b6:	371c      	adds	r7, #28
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2ca:	f3ef 8310 	mrs	r3, PRIMASK
 800a2ce:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a2d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2d4:	b672      	cpsid	i
}
 800a2d6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	685a      	ldr	r2, [r3, #4]
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	f383 8810 	msr	PRIMASK, r3
}
 800a2fe:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a300:	bf00      	nop
 800a302:	371c      	adds	r7, #28
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b087      	sub	sp, #28
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a314:	f3ef 8310 	mrs	r3, PRIMASK
 800a318:	60fb      	str	r3, [r7, #12]
  return(result);
 800a31a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a31c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a31e:	b672      	cpsid	i
}
 800a320:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	6812      	ldr	r2, [r2, #0]
 800a32a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	6852      	ldr	r2, [r2, #4]
 800a334:	605a      	str	r2, [r3, #4]
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	f383 8810 	msr	PRIMASK, r3
}
 800a340:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a342:	bf00      	nop
 800a344:	371c      	adds	r7, #28
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b086      	sub	sp, #24
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a358:	f3ef 8310 	mrs	r3, PRIMASK
 800a35c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a35e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a360:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a362:	b672      	cpsid	i
}
 800a364:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4618      	mov	r0, r3
 800a374:	f7ff ffca 	bl	800a30c <LST_remove_node>
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	f383 8810 	msr	PRIMASK, r3
}
 800a382:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a384:	bf00      	nop
 800a386:	3718      	adds	r7, #24
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	607a      	str	r2, [r7, #4]
 800a398:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	887a      	ldrh	r2, [r7, #2]
 800a3c2:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	7e3a      	ldrb	r2, [r7, #24]
 800a3c8:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800a3ca:	7e3b      	ldrb	r3, [r7, #24]
 800a3cc:	f003 0302 	and.w	r3, r3, #2
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d006      	beq.n	800a3e2 <CircularQueue_Init+0x56>
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	891b      	ldrh	r3, [r3, #8]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d002      	beq.n	800a3e2 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800a3dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a3e0:	e000      	b.n	800a3e4 <CircularQueue_Init+0x58>
  }
  return 0;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3714      	adds	r7, #20
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b08e      	sub	sp, #56	; 0x38
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	603b      	str	r3, [r7, #0]
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800a400:	2300      	movs	r3, #0
 800a402:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800a404:	2300      	movs	r3, #0
 800a406:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800a408:	2300      	movs	r3, #0
 800a40a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800a40c:	2300      	movs	r3, #0
 800a40e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a410:	2300      	movs	r3, #0
 800a412:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800a414:	2300      	movs	r3, #0
 800a416:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800a418:	2300      	movs	r3, #0
 800a41a:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	891b      	ldrh	r3, [r3, #8]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d101      	bne.n	800a428 <CircularQueue_Add+0x38>
 800a424:	2302      	movs	r3, #2
 800a426:	e000      	b.n	800a42a <CircularQueue_Add+0x3a>
 800a428:	2300      	movs	r3, #0
 800a42a:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	695b      	ldr	r3, [r3, #20]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d02a      	beq.n	800a48a <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	891b      	ldrh	r3, [r3, #8]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d123      	bne.n	800a484 <CircularQueue_Add+0x94>
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	4413      	add	r3, r2
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	b29a      	uxth	r2, r3
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6819      	ldr	r1, [r3, #0]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	1c58      	adds	r0, r3, #1
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	4298      	cmp	r0, r3
 800a45a:	d306      	bcc.n	800a46a <CircularQueue_Add+0x7a>
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6918      	ldr	r0, [r3, #16]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	1ac3      	subs	r3, r0, r3
 800a466:	3301      	adds	r3, #1
 800a468:	e002      	b.n	800a470 <CircularQueue_Add+0x80>
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	3301      	adds	r3, #1
 800a470:	440b      	add	r3, r1
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	b29b      	uxth	r3, r3
 800a476:	021b      	lsls	r3, r3, #8
 800a478:	b29b      	uxth	r3, r3
 800a47a:	4413      	add	r3, r2
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	3302      	adds	r3, #2
 800a480:	b29b      	uxth	r3, r3
 800a482:	e001      	b.n	800a488 <CircularQueue_Add+0x98>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	891b      	ldrh	r3, [r3, #8]
 800a488:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	891b      	ldrh	r3, [r3, #8]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d002      	beq.n	800a498 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	891b      	ldrh	r3, [r3, #8]
 800a496:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	691a      	ldr	r2, [r3, #16]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d307      	bcc.n	800a4b4 <CircularQueue_Add+0xc4>
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	685a      	ldr	r2, [r3, #4]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	6919      	ldr	r1, [r3, #16]
 800a4ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a4ae:	440b      	add	r3, r1
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	e000      	b.n	800a4b6 <CircularQueue_Add+0xc6>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800a4b8:	88fa      	ldrh	r2, [r7, #6]
 800a4ba:	7ffb      	ldrb	r3, [r7, #31]
 800a4bc:	4413      	add	r3, r2
 800a4be:	461a      	mov	r2, r3
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	fb02 f303 	mul.w	r3, r2, r3
 800a4c6:	69ba      	ldr	r2, [r7, #24]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d80b      	bhi.n	800a4e4 <CircularQueue_Add+0xf4>
 800a4cc:	88fa      	ldrh	r2, [r7, #6]
 800a4ce:	7ffb      	ldrb	r3, [r7, #31]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4da:	fb01 f202 	mul.w	r2, r1, r2
 800a4de:	1a9b      	subs	r3, r3, r2
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	e000      	b.n	800a4e6 <CircularQueue_Add+0xf6>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800a4e8:	7dfa      	ldrb	r2, [r7, #23]
 800a4ea:	7ffb      	ldrb	r3, [r7, #31]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	bf8c      	ite	hi
 800a4f0:	2301      	movhi	r3, #1
 800a4f2:	2300      	movls	r3, #0
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800a4f8:	7fbb      	ldrb	r3, [r7, #30]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d008      	beq.n	800a510 <CircularQueue_Add+0x120>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	7f1b      	ldrb	r3, [r3, #28]
 800a502:	f003 0301 	and.w	r3, r3, #1
 800a506:	2b00      	cmp	r3, #0
 800a508:	d002      	beq.n	800a510 <CircularQueue_Add+0x120>
 800a50a:	7dfb      	ldrb	r3, [r7, #23]
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	e000      	b.n	800a512 <CircularQueue_Add+0x122>
 800a510:	8bbb      	ldrh	r3, [r7, #28]
 800a512:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800a514:	7fbb      	ldrb	r3, [r7, #30]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d008      	beq.n	800a52c <CircularQueue_Add+0x13c>
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	7f1b      	ldrb	r3, [r3, #28]
 800a51e:	f003 0302 	and.w	r3, r3, #2
 800a522:	2b00      	cmp	r3, #0
 800a524:	d002      	beq.n	800a52c <CircularQueue_Add+0x13c>
 800a526:	7ffb      	ldrb	r3, [r7, #31]
 800a528:	b29b      	uxth	r3, r3
 800a52a:	e000      	b.n	800a52e <CircularQueue_Add+0x13e>
 800a52c:	8bbb      	ldrh	r3, [r7, #28]
 800a52e:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800a530:	88fb      	ldrh	r3, [r7, #6]
 800a532:	2b00      	cmp	r3, #0
 800a534:	f000 817e 	beq.w	800a834 <CircularQueue_Add+0x444>
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	695a      	ldr	r2, [r3, #20]
 800a53c:	88f9      	ldrh	r1, [r7, #6]
 800a53e:	7ffb      	ldrb	r3, [r7, #31]
 800a540:	440b      	add	r3, r1
 800a542:	4619      	mov	r1, r3
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	fb01 f303 	mul.w	r3, r1, r3
 800a54a:	441a      	add	r2, r3
 800a54c:	8bbb      	ldrh	r3, [r7, #28]
 800a54e:	441a      	add	r2, r3
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	429a      	cmp	r2, r3
 800a556:	f200 816d 	bhi.w	800a834 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800a55a:	2300      	movs	r3, #0
 800a55c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a55e:	e14a      	b.n	800a7f6 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	691a      	ldr	r2, [r3, #16]
 800a564:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a566:	441a      	add	r2, r3
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d307      	bcc.n	800a580 <CircularQueue_Add+0x190>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	691a      	ldr	r2, [r3, #16]
 800a574:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a576:	441a      	add	r2, r3
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	1ad3      	subs	r3, r2, r3
 800a57e:	e003      	b.n	800a588 <CircularQueue_Add+0x198>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	691a      	ldr	r2, [r3, #16]
 800a584:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a586:	4413      	add	r3, r2
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	891b      	ldrh	r3, [r3, #8]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d130      	bne.n	800a5fc <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a0:	1c59      	adds	r1, r3, #1
 800a5a2:	6339      	str	r1, [r7, #48]	; 0x30
 800a5a4:	4413      	add	r3, r2
 800a5a6:	88fa      	ldrh	r2, [r7, #6]
 800a5a8:	b2d2      	uxtb	r2, r2
 800a5aa:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d304      	bcc.n	800a5c0 <CircularQueue_Add+0x1d0>
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5bc:	1ad3      	subs	r3, r2, r3
 800a5be:	e000      	b.n	800a5c2 <CircularQueue_Add+0x1d2>
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c2:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800a5c4:	88fb      	ldrh	r3, [r7, #6]
 800a5c6:	0a1b      	lsrs	r3, r3, #8
 800a5c8:	b298      	uxth	r0, r3
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d0:	1c59      	adds	r1, r3, #1
 800a5d2:	6339      	str	r1, [r7, #48]	; 0x30
 800a5d4:	4413      	add	r3, r2
 800a5d6:	b2c2      	uxtb	r2, r0
 800a5d8:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d304      	bcc.n	800a5ee <CircularQueue_Add+0x1fe>
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	e000      	b.n	800a5f0 <CircularQueue_Add+0x200>
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	1c9a      	adds	r2, r3, #2
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800a5fc:	88fa      	ldrh	r2, [r7, #6]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6859      	ldr	r1, [r3, #4]
 800a602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a604:	1acb      	subs	r3, r1, r3
 800a606:	4293      	cmp	r3, r2
 800a608:	bf28      	it	cs
 800a60a:	4613      	movcs	r3, r2
 800a60c:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800a60e:	88fb      	ldrh	r3, [r7, #6]
 800a610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a612:	429a      	cmp	r2, r3
 800a614:	d007      	beq.n	800a626 <CircularQueue_Add+0x236>
 800a616:	88fb      	ldrh	r3, [r7, #6]
 800a618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d225      	bcs.n	800a66a <CircularQueue_Add+0x27a>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	7f1b      	ldrb	r3, [r3, #28]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d121      	bne.n	800a66a <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62c:	18d0      	adds	r0, r2, r3
 800a62e:	88fb      	ldrh	r3, [r7, #6]
 800a630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a632:	fb02 f303 	mul.w	r3, r2, r3
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	4413      	add	r3, r2
 800a63a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a63c:	4619      	mov	r1, r3
 800a63e:	f001 f8a5 	bl	800b78c <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	695a      	ldr	r2, [r3, #20]
 800a646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a648:	441a      	add	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800a64e:	2300      	movs	r3, #0
 800a650:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800a652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a654:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800a656:	88fa      	ldrh	r2, [r7, #6]
 800a658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800a65e:	7ffb      	ldrb	r3, [r7, #31]
 800a660:	b29a      	uxth	r2, r3
 800a662:	88fb      	ldrh	r3, [r7, #6]
 800a664:	4413      	add	r3, r2
 800a666:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a668:	e0a4      	b.n	800a7b4 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800a66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f000 80a1 	beq.w	800a7b4 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	7f1b      	ldrb	r3, [r3, #28]
 800a676:	f003 0301 	and.w	r3, r3, #1
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d03a      	beq.n	800a6f4 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	891b      	ldrh	r3, [r3, #8]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d10d      	bne.n	800a6a2 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	3b02      	subs	r3, #2
 800a68e:	4413      	add	r3, r2
 800a690:	22ff      	movs	r2, #255	; 0xff
 800a692:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69a:	3b01      	subs	r3, #1
 800a69c:	4413      	add	r3, r2
 800a69e:	22ff      	movs	r2, #255	; 0xff
 800a6a0:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	695a      	ldr	r2, [r3, #20]
 800a6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a8:	441a      	add	r2, r3
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800a6b2:	88fb      	ldrh	r3, [r7, #6]
 800a6b4:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	891b      	ldrh	r3, [r3, #8]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d16f      	bne.n	800a7a2 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c8:	1c59      	adds	r1, r3, #1
 800a6ca:	6339      	str	r1, [r7, #48]	; 0x30
 800a6cc:	4413      	add	r3, r2
 800a6ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6d0:	b2d2      	uxtb	r2, r2
 800a6d2:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d6:	0a18      	lsrs	r0, r3, #8
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6de:	1c59      	adds	r1, r3, #1
 800a6e0:	6339      	str	r1, [r7, #48]	; 0x30
 800a6e2:	4413      	add	r3, r2
 800a6e4:	b2c2      	uxtb	r2, r0
 800a6e6:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	695b      	ldr	r3, [r3, #20]
 800a6ec:	1c9a      	adds	r2, r3, #2
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	615a      	str	r2, [r3, #20]
 800a6f2:	e056      	b.n	800a7a2 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	7f1b      	ldrb	r3, [r3, #28]
 800a6f8:	f003 0302 	and.w	r3, r3, #2
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d050      	beq.n	800a7a2 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	891b      	ldrh	r3, [r3, #8]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d14a      	bne.n	800a79e <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70e:	3b02      	subs	r3, #2
 800a710:	4413      	add	r3, r2
 800a712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a714:	b2d2      	uxtb	r2, r2
 800a716:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71a:	0a19      	lsrs	r1, r3, #8
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a722:	3b01      	subs	r3, #1
 800a724:	4413      	add	r3, r2
 800a726:	b2ca      	uxtb	r2, r1
 800a728:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a730:	18d0      	adds	r0, r2, r3
 800a732:	88fb      	ldrh	r3, [r7, #6]
 800a734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a736:	fb02 f303 	mul.w	r3, r2, r3
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	4413      	add	r3, r2
 800a73e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a740:	4619      	mov	r1, r3
 800a742:	f001 f823 	bl	800b78c <memcpy>
             q->byteCount += NbBytesToCopy; 
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	695a      	ldr	r2, [r3, #20]
 800a74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74c:	441a      	add	r2, r3
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800a752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a754:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800a756:	88fa      	ldrh	r2, [r7, #6]
 800a758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	1c5a      	adds	r2, r3, #1
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800a768:	2300      	movs	r3, #0
 800a76a:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a772:	1c59      	adds	r1, r3, #1
 800a774:	6339      	str	r1, [r7, #48]	; 0x30
 800a776:	4413      	add	r3, r2
 800a778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a77a:	b2d2      	uxtb	r2, r2
 800a77c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a780:	0a18      	lsrs	r0, r3, #8
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a788:	1c59      	adds	r1, r3, #1
 800a78a:	6339      	str	r1, [r7, #48]	; 0x30
 800a78c:	4413      	add	r3, r2
 800a78e:	b2c2      	uxtb	r2, r0
 800a790:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	695b      	ldr	r3, [r3, #20]
 800a796:	1c9a      	adds	r2, r3, #2
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	615a      	str	r2, [r3, #20]
 800a79c:	e001      	b.n	800a7a2 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	e049      	b.n	800a836 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800a7a2:	7ffb      	ldrb	r3, [r7, #31]
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	4413      	add	r3, r2
 800a7ac:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800a7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d015      	beq.n	800a7e6 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c0:	18d0      	adds	r0, r2, r3
 800a7c2:	88fb      	ldrh	r3, [r7, #6]
 800a7c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7c6:	fb03 f202 	mul.w	r2, r3, r2
 800a7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7cc:	4413      	add	r3, r2
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	f000 ffd9 	bl	800b78c <memcpy>
        q->byteCount += NbBytesToCopy;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	695a      	ldr	r2, [r3, #20]
 800a7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e0:	441a      	add	r2, r3
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	1c5a      	adds	r2, r3, #1
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800a7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	f4ff aeb0 	bcc.w	800a560 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6919      	ldr	r1, [r3, #16]
 800a808:	7ffb      	ldrb	r3, [r7, #31]
 800a80a:	4419      	add	r1, r3
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	4299      	cmp	r1, r3
 800a812:	d307      	bcc.n	800a824 <CircularQueue_Add+0x434>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6919      	ldr	r1, [r3, #16]
 800a818:	7ffb      	ldrb	r3, [r7, #31]
 800a81a:	4419      	add	r1, r3
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	1acb      	subs	r3, r1, r3
 800a822:	e003      	b.n	800a82c <CircularQueue_Add+0x43c>
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	6919      	ldr	r1, [r3, #16]
 800a828:	7ffb      	ldrb	r3, [r7, #31]
 800a82a:	440b      	add	r3, r1
 800a82c:	4413      	add	r3, r2
 800a82e:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800a830:	6a3b      	ldr	r3, [r7, #32]
 800a832:	e000      	b.n	800a836 <CircularQueue_Add+0x446>
    return NULL;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3738      	adds	r7, #56	; 0x38
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800a83e:	b480      	push	{r7}
 800a840:	b085      	sub	sp, #20
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a848:	2300      	movs	r3, #0
 800a84a:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800a84c:	2300      	movs	r3, #0
 800a84e:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	891b      	ldrh	r3, [r3, #8]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d101      	bne.n	800a85c <CircularQueue_Remove+0x1e>
 800a858:	2302      	movs	r3, #2
 800a85a:	e000      	b.n	800a85e <CircularQueue_Remove+0x20>
 800a85c:	2300      	movs	r3, #0
 800a85e:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800a860:	2300      	movs	r3, #0
 800a862:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	695b      	ldr	r3, [r3, #20]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f000 80cc 	beq.w	800aa06 <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	891b      	ldrh	r3, [r3, #8]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d121      	bne.n	800a8ba <CircularQueue_Remove+0x7c>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	4413      	add	r3, r2
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	b29a      	uxth	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6819      	ldr	r1, [r3, #0]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	1c58      	adds	r0, r3, #1
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	4298      	cmp	r0, r3
 800a894:	d306      	bcc.n	800a8a4 <CircularQueue_Remove+0x66>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	68d8      	ldr	r0, [r3, #12]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	1ac3      	subs	r3, r0, r3
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	e002      	b.n	800a8aa <CircularQueue_Remove+0x6c>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	440b      	add	r3, r1
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	021b      	lsls	r3, r3, #8
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	4413      	add	r3, r2
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	e001      	b.n	800a8be <CircularQueue_Remove+0x80>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	891b      	ldrh	r3, [r3, #8]
 800a8be:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	7f1b      	ldrb	r3, [r3, #28]
 800a8c4:	f003 0301 	and.w	r3, r3, #1
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d057      	beq.n	800a97c <CircularQueue_Remove+0x13e>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	7f1b      	ldrb	r3, [r3, #28]
 800a8d0:	f003 0302 	and.w	r3, r3, #2
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d151      	bne.n	800a97c <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a8d8:	897b      	ldrh	r3, [r7, #10]
 800a8da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d103      	bne.n	800a8ea <CircularQueue_Remove+0xac>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	891b      	ldrh	r3, [r3, #8]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d012      	beq.n	800a910 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	68da      	ldr	r2, [r3, #12]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d942      	bls.n	800a97c <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	891b      	ldrh	r3, [r3, #8]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d03e      	beq.n	800a97c <CircularQueue_Remove+0x13e>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	685a      	ldr	r2, [r3, #4]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	8912      	ldrh	r2, [r2, #8]
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d235      	bcs.n	800a97c <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	695a      	ldr	r2, [r3, #20]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68d9      	ldr	r1, [r3, #12]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	1acb      	subs	r3, r1, r3
 800a91e:	441a      	add	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	891b      	ldrh	r3, [r3, #8]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d121      	bne.n	800a976 <CircularQueue_Remove+0x138>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	4413      	add	r3, r2
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	b29a      	uxth	r2, r3
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6819      	ldr	r1, [r3, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	1c58      	adds	r0, r3, #1
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	4298      	cmp	r0, r3
 800a950:	d306      	bcc.n	800a960 <CircularQueue_Remove+0x122>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	68d8      	ldr	r0, [r3, #12]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	1ac3      	subs	r3, r0, r3
 800a95c:	3301      	adds	r3, #1
 800a95e:	e002      	b.n	800a966 <CircularQueue_Remove+0x128>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	3301      	adds	r3, #1
 800a966:	440b      	add	r3, r1
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	021b      	lsls	r3, r3, #8
 800a96e:	b29b      	uxth	r3, r3
 800a970:	4413      	add	r3, r2
 800a972:	b29b      	uxth	r3, r3
 800a974:	e001      	b.n	800a97a <CircularQueue_Remove+0x13c>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	891b      	ldrh	r3, [r3, #8]
 800a97a:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	68d9      	ldr	r1, [r3, #12]
 800a984:	7a7b      	ldrb	r3, [r7, #9]
 800a986:	4419      	add	r1, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	4299      	cmp	r1, r3
 800a98e:	d307      	bcc.n	800a9a0 <CircularQueue_Remove+0x162>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	68d9      	ldr	r1, [r3, #12]
 800a994:	7a7b      	ldrb	r3, [r7, #9]
 800a996:	4419      	add	r1, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	1acb      	subs	r3, r1, r3
 800a99e:	e003      	b.n	800a9a8 <CircularQueue_Remove+0x16a>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	68d9      	ldr	r1, [r3, #12]
 800a9a4:	7a7b      	ldrb	r3, [r7, #9]
 800a9a6:	440b      	add	r3, r1
 800a9a8:	4413      	add	r3, r2
 800a9aa:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	695b      	ldr	r3, [r3, #20]
 800a9b0:	8979      	ldrh	r1, [r7, #10]
 800a9b2:	7a7a      	ldrb	r2, [r7, #9]
 800a9b4:	440a      	add	r2, r1
 800a9b6:	1a9a      	subs	r2, r3, r2
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	695b      	ldr	r3, [r3, #20]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d01b      	beq.n	800a9fc <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	68da      	ldr	r2, [r3, #12]
 800a9c8:	897b      	ldrh	r3, [r7, #10]
 800a9ca:	441a      	add	r2, r3
 800a9cc:	7a7b      	ldrb	r3, [r7, #9]
 800a9ce:	441a      	add	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d309      	bcc.n	800a9ec <CircularQueue_Remove+0x1ae>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	68da      	ldr	r2, [r3, #12]
 800a9dc:	897b      	ldrh	r3, [r7, #10]
 800a9de:	441a      	add	r2, r3
 800a9e0:	7a7b      	ldrb	r3, [r7, #9]
 800a9e2:	441a      	add	r2, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	e005      	b.n	800a9f8 <CircularQueue_Remove+0x1ba>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	68da      	ldr	r2, [r3, #12]
 800a9f0:	897b      	ldrh	r3, [r7, #10]
 800a9f2:	441a      	add	r2, r3
 800a9f4:	7a7b      	ldrb	r3, [r7, #9]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	1e5a      	subs	r2, r3, #1
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d002      	beq.n	800aa12 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	897a      	ldrh	r2, [r7, #10]
 800aa10:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800aa12:	68fb      	ldr	r3, [r7, #12]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3714      	adds	r7, #20
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b087      	sub	sp, #28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	891b      	ldrh	r3, [r3, #8]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d101      	bne.n	800aa3e <CircularQueue_Sense+0x1e>
 800aa3a:	2302      	movs	r3, #2
 800aa3c:	e000      	b.n	800aa40 <CircularQueue_Sense+0x20>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800aa42:	2300      	movs	r3, #0
 800aa44:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	695b      	ldr	r3, [r3, #20]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f000 8090 	beq.w	800ab74 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	891b      	ldrh	r3, [r3, #8]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d121      	bne.n	800aaa6 <CircularQueue_Sense+0x86>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6819      	ldr	r1, [r3, #0]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	1c58      	adds	r0, r3, #1
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	4298      	cmp	r0, r3
 800aa80:	d306      	bcc.n	800aa90 <CircularQueue_Sense+0x70>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	68d8      	ldr	r0, [r3, #12]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	1ac3      	subs	r3, r0, r3
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	e002      	b.n	800aa96 <CircularQueue_Sense+0x76>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	3301      	adds	r3, #1
 800aa96:	440b      	add	r3, r1
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	021b      	lsls	r3, r3, #8
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	4413      	add	r3, r2
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	e001      	b.n	800aaaa <CircularQueue_Sense+0x8a>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	891b      	ldrh	r3, [r3, #8]
 800aaaa:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	7f1b      	ldrb	r3, [r3, #28]
 800aab0:	f003 0301 	and.w	r3, r3, #1
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d048      	beq.n	800ab4a <CircularQueue_Sense+0x12a>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	7f1b      	ldrb	r3, [r3, #28]
 800aabc:	f003 0302 	and.w	r3, r3, #2
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d142      	bne.n	800ab4a <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800aac4:	8a7b      	ldrh	r3, [r7, #18]
 800aac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d103      	bne.n	800aad6 <CircularQueue_Sense+0xb6>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	891b      	ldrh	r3, [r3, #8]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d012      	beq.n	800aafc <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	68da      	ldr	r2, [r3, #12]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800aade:	429a      	cmp	r2, r3
 800aae0:	d933      	bls.n	800ab4a <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	891b      	ldrh	r3, [r3, #8]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d02f      	beq.n	800ab4a <CircularQueue_Sense+0x12a>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685a      	ldr	r2, [r3, #4]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	1ad3      	subs	r3, r2, r3
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	8912      	ldrh	r2, [r2, #8]
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d226      	bcs.n	800ab4a <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800aafc:	2300      	movs	r3, #0
 800aafe:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	891b      	ldrh	r3, [r3, #8]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d11d      	bne.n	800ab44 <CircularQueue_Sense+0x124>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	4413      	add	r3, r2
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6819      	ldr	r1, [r3, #0]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	1c58      	adds	r0, r3, #1
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	4298      	cmp	r0, r3
 800ab22:	d305      	bcc.n	800ab30 <CircularQueue_Sense+0x110>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	1ac3      	subs	r3, r0, r3
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	e001      	b.n	800ab34 <CircularQueue_Sense+0x114>
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	3301      	adds	r3, #1
 800ab34:	440b      	add	r3, r1
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	021b      	lsls	r3, r3, #8
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	4413      	add	r3, r2
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	e001      	b.n	800ab48 <CircularQueue_Sense+0x128>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	891b      	ldrh	r3, [r3, #8]
 800ab48:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	7af9      	ldrb	r1, [r7, #11]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	4419      	add	r1, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	4299      	cmp	r1, r3
 800ab5a:	d306      	bcc.n	800ab6a <CircularQueue_Sense+0x14a>
 800ab5c:	7af9      	ldrb	r1, [r7, #11]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	4419      	add	r1, r3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	1acb      	subs	r3, r1, r3
 800ab68:	e002      	b.n	800ab70 <CircularQueue_Sense+0x150>
 800ab6a:	7af9      	ldrb	r1, [r7, #11]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	440b      	add	r3, r1
 800ab70:	4413      	add	r3, r2
 800ab72:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d002      	beq.n	800ab80 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	8a7a      	ldrh	r2, [r7, #18]
 800ab7e:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800ab80:	697b      	ldr	r3, [r7, #20]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	371c      	adds	r7, #28
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr

0800ab8e <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800ab8e:	b480      	push	{r7}
 800ab90:	af00      	add	r7, sp, #0
  return;
 800ab92:	bf00      	nop
}
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	af00      	add	r7, sp, #0
  return;
 800aba0:	bf00      	nop
}
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr

0800abaa <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800abaa:	b480      	push	{r7}
 800abac:	af00      	add	r7, sp, #0
  return;
 800abae:	bf00      	nop
}
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800abb8:	b480      	push	{r7}
 800abba:	af00      	add	r7, sp, #0
  return;
 800abbc:	bf00      	nop
}
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800abc6:	b480      	push	{r7}
 800abc8:	af00      	add	r7, sp, #0
  return;
 800abca:	bf00      	nop
}
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800abd4:	b480      	push	{r7}
 800abd6:	af00      	add	r7, sp, #0
  return;
 800abd8:	bf00      	nop
}
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800abe2:	b480      	push	{r7}
 800abe4:	af00      	add	r7, sp, #0
  return;
 800abe6:	bf00      	nop
}
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800abf0:	b480      	push	{r7}
 800abf2:	af00      	add	r7, sp, #0
  return;
 800abf4:	bf00      	nop
}
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr

0800abfe <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800abfe:	b480      	push	{r7}
 800ac00:	af00      	add	r7, sp, #0
  return;
 800ac02:	bf00      	nop
}
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	af00      	add	r7, sp, #0
  return;
 800ac10:	bf00      	nop
}
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr

0800ac1a <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800ac1a:	b480      	push	{r7}
 800ac1c:	af00      	add	r7, sp, #0
  return;
 800ac1e:	bf00      	nop
}
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	af00      	add	r7, sp, #0
  return;
 800ac2c:	bf00      	nop
}
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 800ac36:	b480      	push	{r7}
 800ac38:	af00      	add	r7, sp, #0
  return;
 800ac3a:	bf00      	nop
}
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800ac44:	b480      	push	{r7}
 800ac46:	af00      	add	r7, sp, #0
  return;
 800ac48:	bf00      	nop
}
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr

0800ac52 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800ac52:	b480      	push	{r7}
 800ac54:	af00      	add	r7, sp, #0
  return;
 800ac56:	bf00      	nop
}
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800ac60:	b480      	push	{r7}
 800ac62:	af00      	add	r7, sp, #0
  return;
 800ac64:	bf00      	nop
}
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800ac6e:	b480      	push	{r7}
 800ac70:	af00      	add	r7, sp, #0
  return;
 800ac72:	bf00      	nop
}
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800ac80:	4b04      	ldr	r3, [pc, #16]	; (800ac94 <SVCCTL_Init+0x18>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800ac86:	4b04      	ldr	r3, [pc, #16]	; (800ac98 <SVCCTL_Init+0x1c>)
 800ac88:	2200      	movs	r2, #0
 800ac8a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800ac8c:	f000 f806 	bl	800ac9c <SVCCTL_SvcInit>

  return;
 800ac90:	bf00      	nop
}
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	20000200 	.word	0x20000200
 800ac98:	20000208 	.word	0x20000208

0800ac9c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	af00      	add	r7, sp, #0
  BAS_Init();
 800aca0:	f7ff ff75 	bl	800ab8e <BAS_Init>

  BLS_Init();
 800aca4:	f7ff ff7a 	bl	800ab9c <BLS_Init>

  CRS_STM_Init();
 800aca8:	f7ff ff7f 	bl	800abaa <CRS_STM_Init>

  DIS_Init();
 800acac:	f7ff ff84 	bl	800abb8 <DIS_Init>

  EDS_STM_Init();
 800acb0:	f7ff ff89 	bl	800abc6 <EDS_STM_Init>

  HIDS_Init();
 800acb4:	f7ff ff8e 	bl	800abd4 <HIDS_Init>

  HRS_Init();
 800acb8:	f7ff ff93 	bl	800abe2 <HRS_Init>

  HTS_Init();
 800acbc:	f7ff ff98 	bl	800abf0 <HTS_Init>

  IAS_Init();
 800acc0:	f7ff ff9d 	bl	800abfe <IAS_Init>

  LLS_Init();
 800acc4:	f7ff ffa2 	bl	800ac0c <LLS_Init>

  TPS_Init();
 800acc8:	f7ff ffa7 	bl	800ac1a <TPS_Init>

  MOTENV_STM_Init();
 800accc:	f7ff ffac 	bl	800ac28 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800acd0:	f7fe ffb6 	bl	8009c40 <P2PS_STM_Init>

  ZDD_STM_Init();
 800acd4:	f7ff ffaf 	bl	800ac36 <ZDD_STM_Init>

  OTAS_STM_Init();
 800acd8:	f7ff ffb4 	bl	800ac44 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800acdc:	f7ff ffc0 	bl	800ac60 <BVOPUS_STM_Init>

  MESH_Init();
 800ace0:	f7ff ffb7 	bl	800ac52 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800ace4:	f7ff ffc3 	bl	800ac6e <SVCCTL_InitCustomSvc>
  
  return;
 800ace8:	bf00      	nop
}
 800acea:	bd80      	pop	{r7, pc}

0800acec <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800acf4:	4b09      	ldr	r3, [pc, #36]	; (800ad1c <SVCCTL_RegisterSvcHandler+0x30>)
 800acf6:	791b      	ldrb	r3, [r3, #4]
 800acf8:	4619      	mov	r1, r3
 800acfa:	4a08      	ldr	r2, [pc, #32]	; (800ad1c <SVCCTL_RegisterSvcHandler+0x30>)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800ad02:	4b06      	ldr	r3, [pc, #24]	; (800ad1c <SVCCTL_RegisterSvcHandler+0x30>)
 800ad04:	791b      	ldrb	r3, [r3, #4]
 800ad06:	3301      	adds	r3, #1
 800ad08:	b2da      	uxtb	r2, r3
 800ad0a:	4b04      	ldr	r3, [pc, #16]	; (800ad1c <SVCCTL_RegisterSvcHandler+0x30>)
 800ad0c:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800ad0e:	bf00      	nop
}
 800ad10:	370c      	adds	r7, #12
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	20000200 	.word	0x20000200

0800ad20 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b086      	sub	sp, #24
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	2bff      	cmp	r3, #255	; 0xff
 800ad38:	d125      	bne.n	800ad86 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	3302      	adds	r3, #2
 800ad3e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	881b      	ldrh	r3, [r3, #0]
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ad4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad4e:	d118      	bne.n	800ad82 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ad50:	2300      	movs	r3, #0
 800ad52:	757b      	strb	r3, [r7, #21]
 800ad54:	e00d      	b.n	800ad72 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800ad56:	7d7b      	ldrb	r3, [r7, #21]
 800ad58:	4a1a      	ldr	r2, [pc, #104]	; (800adc4 <SVCCTL_UserEvtRx+0xa4>)
 800ad5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	4798      	blx	r3
 800ad62:	4603      	mov	r3, r0
 800ad64:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800ad66:	7dfb      	ldrb	r3, [r7, #23]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d108      	bne.n	800ad7e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ad6c:	7d7b      	ldrb	r3, [r7, #21]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	757b      	strb	r3, [r7, #21]
 800ad72:	4b14      	ldr	r3, [pc, #80]	; (800adc4 <SVCCTL_UserEvtRx+0xa4>)
 800ad74:	791b      	ldrb	r3, [r3, #4]
 800ad76:	7d7a      	ldrb	r2, [r7, #21]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d3ec      	bcc.n	800ad56 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800ad7c:	e002      	b.n	800ad84 <SVCCTL_UserEvtRx+0x64>
              break;
 800ad7e:	bf00      	nop
          break;
 800ad80:	e000      	b.n	800ad84 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800ad82:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800ad84:	e000      	b.n	800ad88 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800ad86:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800ad88:	7dfb      	ldrb	r3, [r7, #23]
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d00f      	beq.n	800adae <SVCCTL_UserEvtRx+0x8e>
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	dc10      	bgt.n	800adb4 <SVCCTL_UserEvtRx+0x94>
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d002      	beq.n	800ad9c <SVCCTL_UserEvtRx+0x7c>
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d006      	beq.n	800ada8 <SVCCTL_UserEvtRx+0x88>
 800ad9a:	e00b      	b.n	800adb4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7f7 fde5 	bl	800296c <SVCCTL_App_Notification>
 800ada2:	4603      	mov	r3, r0
 800ada4:	75bb      	strb	r3, [r7, #22]
      break;
 800ada6:	e008      	b.n	800adba <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ada8:	2301      	movs	r3, #1
 800adaa:	75bb      	strb	r3, [r7, #22]
      break;
 800adac:	e005      	b.n	800adba <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800adae:	2300      	movs	r3, #0
 800adb0:	75bb      	strb	r3, [r7, #22]
      break;
 800adb2:	e002      	b.n	800adba <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800adb4:	2301      	movs	r3, #1
 800adb6:	75bb      	strb	r3, [r7, #22]
      break;
 800adb8:	bf00      	nop
  }

  return (return_status);
 800adba:	7dbb      	ldrb	r3, [r7, #22]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3718      	adds	r7, #24
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	20000200 	.word	0x20000200

0800adc8 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800adcc:	f7f8 fd3a 	bl	8003844 <HW_IPCC_Enable>

  return;
 800add0:	bf00      	nop
}
 800add2:	bd80      	pop	{r7, pc}

0800add4 <TL_Init>:


void TL_Init( void )
{
 800add4:	b580      	push	{r7, lr}
 800add6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800add8:	4b10      	ldr	r3, [pc, #64]	; (800ae1c <TL_Init+0x48>)
 800adda:	4a11      	ldr	r2, [pc, #68]	; (800ae20 <TL_Init+0x4c>)
 800addc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800adde:	4b0f      	ldr	r3, [pc, #60]	; (800ae1c <TL_Init+0x48>)
 800ade0:	4a10      	ldr	r2, [pc, #64]	; (800ae24 <TL_Init+0x50>)
 800ade2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800ade4:	4b0d      	ldr	r3, [pc, #52]	; (800ae1c <TL_Init+0x48>)
 800ade6:	4a10      	ldr	r2, [pc, #64]	; (800ae28 <TL_Init+0x54>)
 800ade8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800adea:	4b0c      	ldr	r3, [pc, #48]	; (800ae1c <TL_Init+0x48>)
 800adec:	4a0f      	ldr	r2, [pc, #60]	; (800ae2c <TL_Init+0x58>)
 800adee:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800adf0:	4b0a      	ldr	r3, [pc, #40]	; (800ae1c <TL_Init+0x48>)
 800adf2:	4a0f      	ldr	r2, [pc, #60]	; (800ae30 <TL_Init+0x5c>)
 800adf4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800adf6:	4b09      	ldr	r3, [pc, #36]	; (800ae1c <TL_Init+0x48>)
 800adf8:	4a0e      	ldr	r2, [pc, #56]	; (800ae34 <TL_Init+0x60>)
 800adfa:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800adfc:	4b07      	ldr	r3, [pc, #28]	; (800ae1c <TL_Init+0x48>)
 800adfe:	4a0e      	ldr	r2, [pc, #56]	; (800ae38 <TL_Init+0x64>)
 800ae00:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800ae02:	4b06      	ldr	r3, [pc, #24]	; (800ae1c <TL_Init+0x48>)
 800ae04:	4a0d      	ldr	r2, [pc, #52]	; (800ae3c <TL_Init+0x68>)
 800ae06:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800ae08:	4b04      	ldr	r3, [pc, #16]	; (800ae1c <TL_Init+0x48>)
 800ae0a:	4a0d      	ldr	r2, [pc, #52]	; (800ae40 <TL_Init+0x6c>)
 800ae0c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800ae0e:	4b03      	ldr	r3, [pc, #12]	; (800ae1c <TL_Init+0x48>)
 800ae10:	4a0c      	ldr	r2, [pc, #48]	; (800ae44 <TL_Init+0x70>)
 800ae12:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800ae14:	f7f8 fd2a 	bl	800386c <HW_IPCC_Init>

  return;
 800ae18:	bf00      	nop
}
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	20030000 	.word	0x20030000
 800ae20:	20030134 	.word	0x20030134
 800ae24:	20030154 	.word	0x20030154
 800ae28:	20030164 	.word	0x20030164
 800ae2c:	20030170 	.word	0x20030170
 800ae30:	20030178 	.word	0x20030178
 800ae34:	20030180 	.word	0x20030180
 800ae38:	20030188 	.word	0x20030188
 800ae3c:	200301a4 	.word	0x200301a4
 800ae40:	200301a8 	.word	0x200301a8
 800ae44:	200301b4 	.word	0x200301b4

0800ae48 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800ae54:	4811      	ldr	r0, [pc, #68]	; (800ae9c <TL_BLE_Init+0x54>)
 800ae56:	f7ff f9db 	bl	800a210 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800ae5a:	4b11      	ldr	r3, [pc, #68]	; (800aea0 <TL_BLE_Init+0x58>)
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	689a      	ldr	r2, [r3, #8]
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	68da      	ldr	r2, [r3, #12]
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	4a0c      	ldr	r2, [pc, #48]	; (800aea4 <TL_BLE_Init+0x5c>)
 800ae74:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	4a08      	ldr	r2, [pc, #32]	; (800ae9c <TL_BLE_Init+0x54>)
 800ae7a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800ae7c:	f7f8 fd0c 	bl	8003898 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a08      	ldr	r2, [pc, #32]	; (800aea8 <TL_BLE_Init+0x60>)
 800ae86:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	4a07      	ldr	r2, [pc, #28]	; (800aeac <TL_BLE_Init+0x64>)
 800ae8e:	6013      	str	r3, [r2, #0]

  return 0;
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	200301d0 	.word	0x200301d0
 800aea0:	20030000 	.word	0x20030000
 800aea4:	20030a48 	.word	0x20030a48
 800aea8:	20001538 	.word	0x20001538
 800aeac:	2000153c 	.word	0x2000153c

0800aeb0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	460b      	mov	r3, r1
 800aeba:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800aebc:	4b09      	ldr	r3, [pc, #36]	; (800aee4 <TL_BLE_SendCmd+0x34>)
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2201      	movs	r2, #1
 800aec4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800aec6:	4b07      	ldr	r3, [pc, #28]	; (800aee4 <TL_BLE_SendCmd+0x34>)
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4619      	mov	r1, r3
 800aece:	2001      	movs	r0, #1
 800aed0:	f000 f96c 	bl	800b1ac <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800aed4:	f7f8 fcea 	bl	80038ac <HW_IPCC_BLE_SendCmd>

  return 0;
 800aed8:	2300      	movs	r3, #0
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3708      	adds	r7, #8
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	20030000 	.word	0x20030000

0800aee8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800aeee:	e01c      	b.n	800af2a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800aef0:	1d3b      	adds	r3, r7, #4
 800aef2:	4619      	mov	r1, r3
 800aef4:	4812      	ldr	r0, [pc, #72]	; (800af40 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800aef6:	f7ff fa2a 	bl	800a34e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	7a5b      	ldrb	r3, [r3, #9]
 800aefe:	2b0f      	cmp	r3, #15
 800af00:	d003      	beq.n	800af0a <HW_IPCC_BLE_RxEvtNot+0x22>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	7a5b      	ldrb	r3, [r3, #9]
 800af06:	2b0e      	cmp	r3, #14
 800af08:	d105      	bne.n	800af16 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4619      	mov	r1, r3
 800af0e:	2002      	movs	r0, #2
 800af10:	f000 f94c 	bl	800b1ac <OutputDbgTrace>
 800af14:	e004      	b.n	800af20 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4619      	mov	r1, r3
 800af1a:	2003      	movs	r0, #3
 800af1c:	f000 f946 	bl	800b1ac <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800af20:	4b08      	ldr	r3, [pc, #32]	; (800af44 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	4610      	mov	r0, r2
 800af28:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800af2a:	4805      	ldr	r0, [pc, #20]	; (800af40 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800af2c:	f7ff f980 	bl	800a230 <LST_is_empty>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d0dc      	beq.n	800aef0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800af36:	bf00      	nop
}
 800af38:	3708      	adds	r7, #8
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	200301d0 	.word	0x200301d0
 800af44:	20001538 	.word	0x20001538

0800af48 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800af4c:	4b02      	ldr	r3, [pc, #8]	; (800af58 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4798      	blx	r3

  return;
 800af52:	bf00      	nop
}
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	2000153c 	.word	0x2000153c

0800af5c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800af68:	480d      	ldr	r0, [pc, #52]	; (800afa0 <TL_SYS_Init+0x44>)
 800af6a:	f7ff f951 	bl	800a210 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800af6e:	4b0d      	ldr	r3, [pc, #52]	; (800afa4 <TL_SYS_Init+0x48>)
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	689a      	ldr	r2, [r3, #8]
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	4a08      	ldr	r2, [pc, #32]	; (800afa0 <TL_SYS_Init+0x44>)
 800af80:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800af82:	f7f8 fcb5 	bl	80038f0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a07      	ldr	r2, [pc, #28]	; (800afa8 <TL_SYS_Init+0x4c>)
 800af8c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	4a06      	ldr	r2, [pc, #24]	; (800afac <TL_SYS_Init+0x50>)
 800af94:	6013      	str	r3, [r2, #0]

  return 0;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	200301d8 	.word	0x200301d8
 800afa4:	20030000 	.word	0x20030000
 800afa8:	20001540 	.word	0x20001540
 800afac:	20001544 	.word	0x20001544

0800afb0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	460b      	mov	r3, r1
 800afba:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800afbc:	4b09      	ldr	r3, [pc, #36]	; (800afe4 <TL_SYS_SendCmd+0x34>)
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2210      	movs	r2, #16
 800afc4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800afc6:	4b07      	ldr	r3, [pc, #28]	; (800afe4 <TL_SYS_SendCmd+0x34>)
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4619      	mov	r1, r3
 800afce:	2004      	movs	r0, #4
 800afd0:	f000 f8ec 	bl	800b1ac <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800afd4:	f7f8 fc96 	bl	8003904 <HW_IPCC_SYS_SendCmd>

  return 0;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	20030000 	.word	0x20030000

0800afe8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800afec:	4b07      	ldr	r3, [pc, #28]	; (800b00c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4619      	mov	r1, r3
 800aff4:	2005      	movs	r0, #5
 800aff6:	f000 f8d9 	bl	800b1ac <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800affa:	4b05      	ldr	r3, [pc, #20]	; (800b010 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4a03      	ldr	r2, [pc, #12]	; (800b00c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b000:	68d2      	ldr	r2, [r2, #12]
 800b002:	6812      	ldr	r2, [r2, #0]
 800b004:	4610      	mov	r0, r2
 800b006:	4798      	blx	r3

  return;
 800b008:	bf00      	nop
}
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	20030000 	.word	0x20030000
 800b010:	20001540 	.word	0x20001540

0800b014 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b01a:	e00e      	b.n	800b03a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b01c:	1d3b      	adds	r3, r7, #4
 800b01e:	4619      	mov	r1, r3
 800b020:	480b      	ldr	r0, [pc, #44]	; (800b050 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b022:	f7ff f994 	bl	800a34e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4619      	mov	r1, r3
 800b02a:	2006      	movs	r0, #6
 800b02c:	f000 f8be 	bl	800b1ac <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b030:	4b08      	ldr	r3, [pc, #32]	; (800b054 <HW_IPCC_SYS_EvtNot+0x40>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	4610      	mov	r0, r2
 800b038:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b03a:	4805      	ldr	r0, [pc, #20]	; (800b050 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b03c:	f7ff f8f8 	bl	800a230 <LST_is_empty>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d0ea      	beq.n	800b01c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b046:	bf00      	nop
}
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	200301d8 	.word	0x200301d8
 800b054:	20001544 	.word	0x20001544

0800b058 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b060:	4817      	ldr	r0, [pc, #92]	; (800b0c0 <TL_MM_Init+0x68>)
 800b062:	f7ff f8d5 	bl	800a210 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b066:	4817      	ldr	r0, [pc, #92]	; (800b0c4 <TL_MM_Init+0x6c>)
 800b068:	f7ff f8d2 	bl	800a210 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b06c:	4b16      	ldr	r3, [pc, #88]	; (800b0c8 <TL_MM_Init+0x70>)
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	4a16      	ldr	r2, [pc, #88]	; (800b0cc <TL_MM_Init+0x74>)
 800b072:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b074:	4b15      	ldr	r3, [pc, #84]	; (800b0cc <TL_MM_Init+0x74>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	6892      	ldr	r2, [r2, #8]
 800b07c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b07e:	4b13      	ldr	r3, [pc, #76]	; (800b0cc <TL_MM_Init+0x74>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	68d2      	ldr	r2, [r2, #12]
 800b086:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b088:	4b10      	ldr	r3, [pc, #64]	; (800b0cc <TL_MM_Init+0x74>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a0c      	ldr	r2, [pc, #48]	; (800b0c0 <TL_MM_Init+0x68>)
 800b08e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b090:	4b0e      	ldr	r3, [pc, #56]	; (800b0cc <TL_MM_Init+0x74>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	6812      	ldr	r2, [r2, #0]
 800b098:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b09a:	4b0c      	ldr	r3, [pc, #48]	; (800b0cc <TL_MM_Init+0x74>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	6852      	ldr	r2, [r2, #4]
 800b0a2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b0a4:	4b09      	ldr	r3, [pc, #36]	; (800b0cc <TL_MM_Init+0x74>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	6912      	ldr	r2, [r2, #16]
 800b0ac:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b0ae:	4b07      	ldr	r3, [pc, #28]	; (800b0cc <TL_MM_Init+0x74>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	6952      	ldr	r2, [r2, #20]
 800b0b6:	619a      	str	r2, [r3, #24]

  return;
 800b0b8:	bf00      	nop
}
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	200301c0 	.word	0x200301c0
 800b0c4:	20001530 	.word	0x20001530
 800b0c8:	20030000 	.word	0x20030000
 800b0cc:	20001548 	.word	0x20001548

0800b0d0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b0d8:	6879      	ldr	r1, [r7, #4]
 800b0da:	4807      	ldr	r0, [pc, #28]	; (800b0f8 <TL_MM_EvtDone+0x28>)
 800b0dc:	f7ff f8f0 	bl	800a2c0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b0e0:	6879      	ldr	r1, [r7, #4]
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	f000 f862 	bl	800b1ac <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b0e8:	4804      	ldr	r0, [pc, #16]	; (800b0fc <TL_MM_EvtDone+0x2c>)
 800b0ea:	f7f8 fc31 	bl	8003950 <HW_IPCC_MM_SendFreeBuf>

  return;
 800b0ee:	bf00      	nop
}
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop
 800b0f8:	20001530 	.word	0x20001530
 800b0fc:	0800b101 	.word	0x0800b101

0800b100 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b106:	e00c      	b.n	800b122 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b108:	1d3b      	adds	r3, r7, #4
 800b10a:	4619      	mov	r1, r3
 800b10c:	480a      	ldr	r0, [pc, #40]	; (800b138 <SendFreeBuf+0x38>)
 800b10e:	f7ff f91e 	bl	800a34e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b112:	4b0a      	ldr	r3, [pc, #40]	; (800b13c <SendFreeBuf+0x3c>)
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	4611      	mov	r1, r2
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7ff f8cf 	bl	800a2c0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b122:	4805      	ldr	r0, [pc, #20]	; (800b138 <SendFreeBuf+0x38>)
 800b124:	f7ff f884 	bl	800a230 <LST_is_empty>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d0ec      	beq.n	800b108 <SendFreeBuf+0x8>
  }

  return;
 800b12e:	bf00      	nop
}
 800b130:	3708      	adds	r7, #8
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	20001530 	.word	0x20001530
 800b13c:	20030000 	.word	0x20030000

0800b140 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b144:	4805      	ldr	r0, [pc, #20]	; (800b15c <TL_TRACES_Init+0x1c>)
 800b146:	f7ff f863 	bl	800a210 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b14a:	4b05      	ldr	r3, [pc, #20]	; (800b160 <TL_TRACES_Init+0x20>)
 800b14c:	695b      	ldr	r3, [r3, #20]
 800b14e:	4a03      	ldr	r2, [pc, #12]	; (800b15c <TL_TRACES_Init+0x1c>)
 800b150:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b152:	f7f8 fc33 	bl	80039bc <HW_IPCC_TRACES_Init>

  return;
 800b156:	bf00      	nop
}
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	200301c8 	.word	0x200301c8
 800b160:	20030000 	.word	0x20030000

0800b164 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b16a:	e008      	b.n	800b17e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b16c:	1d3b      	adds	r3, r7, #4
 800b16e:	4619      	mov	r1, r3
 800b170:	4808      	ldr	r0, [pc, #32]	; (800b194 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b172:	f7ff f8ec 	bl	800a34e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 f80d 	bl	800b198 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b17e:	4805      	ldr	r0, [pc, #20]	; (800b194 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b180:	f7ff f856 	bl	800a230 <LST_is_empty>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d0f0      	beq.n	800b16c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b18a:	bf00      	nop
}
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	200301c8 	.word	0x200301c8

0800b198 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	6039      	str	r1, [r7, #0]
 800b1b6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b1b8:	79fb      	ldrb	r3, [r7, #7]
 800b1ba:	2b06      	cmp	r3, #6
 800b1bc:	d845      	bhi.n	800b24a <OutputDbgTrace+0x9e>
 800b1be:	a201      	add	r2, pc, #4	; (adr r2, 800b1c4 <OutputDbgTrace+0x18>)
 800b1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c4:	0800b1e1 	.word	0x0800b1e1
 800b1c8:	0800b205 	.word	0x0800b205
 800b1cc:	0800b20b 	.word	0x0800b20b
 800b1d0:	0800b21f 	.word	0x0800b21f
 800b1d4:	0800b22b 	.word	0x0800b22b
 800b1d8:	0800b231 	.word	0x0800b231
 800b1dc:	0800b23f 	.word	0x0800b23f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	7a5b      	ldrb	r3, [r3, #9]
 800b1e8:	2bff      	cmp	r3, #255	; 0xff
 800b1ea:	d005      	beq.n	800b1f8 <OutputDbgTrace+0x4c>
 800b1ec:	2bff      	cmp	r3, #255	; 0xff
 800b1ee:	dc05      	bgt.n	800b1fc <OutputDbgTrace+0x50>
 800b1f0:	2b0e      	cmp	r3, #14
 800b1f2:	d005      	beq.n	800b200 <OutputDbgTrace+0x54>
 800b1f4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b1f6:	e001      	b.n	800b1fc <OutputDbgTrace+0x50>
          break;
 800b1f8:	bf00      	nop
 800b1fa:	e027      	b.n	800b24c <OutputDbgTrace+0xa0>
          break;
 800b1fc:	bf00      	nop
 800b1fe:	e025      	b.n	800b24c <OutputDbgTrace+0xa0>
          break;
 800b200:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b202:	e023      	b.n	800b24c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b208:	e020      	b.n	800b24c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	7a5b      	ldrb	r3, [r3, #9]
 800b212:	2b0e      	cmp	r3, #14
 800b214:	d001      	beq.n	800b21a <OutputDbgTrace+0x6e>
 800b216:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b218:	e000      	b.n	800b21c <OutputDbgTrace+0x70>
          break;
 800b21a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b21c:	e016      	b.n	800b24c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	7a5b      	ldrb	r3, [r3, #9]
 800b226:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b228:	e010      	b.n	800b24c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b22e:	e00d      	b.n	800b24c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	7a5b      	ldrb	r3, [r3, #9]
 800b238:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b23a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b23c:	e006      	b.n	800b24c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	7a5b      	ldrb	r3, [r3, #9]
 800b246:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b248:	e000      	b.n	800b24c <OutputDbgTrace+0xa0>

    default:
      break;
 800b24a:	bf00      	nop
  }

  return;
 800b24c:	bf00      	nop
}
 800b24e:	3714      	adds	r7, #20
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b258:	b480      	push	{r7}
 800b25a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b25c:	4b05      	ldr	r3, [pc, #20]	; (800b274 <UTIL_LPM_Init+0x1c>)
 800b25e:	2200      	movs	r2, #0
 800b260:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b262:	4b05      	ldr	r3, [pc, #20]	; (800b278 <UTIL_LPM_Init+0x20>)
 800b264:	2200      	movs	r2, #0
 800b266:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b268:	bf00      	nop
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	2000154c 	.word	0x2000154c
 800b278:	20001550 	.word	0x20001550

0800b27c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b27c:	b480      	push	{r7}
 800b27e:	b087      	sub	sp, #28
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	460b      	mov	r3, r1
 800b286:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b288:	f3ef 8310 	mrs	r3, PRIMASK
 800b28c:	613b      	str	r3, [r7, #16]
  return(result);
 800b28e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b290:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b292:	b672      	cpsid	i
}
 800b294:	bf00      	nop
  
  switch(state)
 800b296:	78fb      	ldrb	r3, [r7, #3]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d008      	beq.n	800b2ae <UTIL_LPM_SetOffMode+0x32>
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d10e      	bne.n	800b2be <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b2a0:	4b0d      	ldr	r3, [pc, #52]	; (800b2d8 <UTIL_LPM_SetOffMode+0x5c>)
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	4a0b      	ldr	r2, [pc, #44]	; (800b2d8 <UTIL_LPM_SetOffMode+0x5c>)
 800b2aa:	6013      	str	r3, [r2, #0]
      break;
 800b2ac:	e008      	b.n	800b2c0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	43da      	mvns	r2, r3
 800b2b2:	4b09      	ldr	r3, [pc, #36]	; (800b2d8 <UTIL_LPM_SetOffMode+0x5c>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4013      	ands	r3, r2
 800b2b8:	4a07      	ldr	r2, [pc, #28]	; (800b2d8 <UTIL_LPM_SetOffMode+0x5c>)
 800b2ba:	6013      	str	r3, [r2, #0]
      break;
 800b2bc:	e000      	b.n	800b2c0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b2be:	bf00      	nop
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f383 8810 	msr	PRIMASK, r3
}
 800b2ca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b2cc:	bf00      	nop
 800b2ce:	371c      	adds	r7, #28
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	20001550 	.word	0x20001550

0800b2dc <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b08c      	sub	sp, #48	; 0x30
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b2e4:	4b6a      	ldr	r3, [pc, #424]	; (800b490 <UTIL_SEQ_Run+0x1b4>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 800b2ea:	4b69      	ldr	r3, [pc, #420]	; (800b490 <UTIL_SEQ_Run+0x1b4>)
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	4a67      	ldr	r2, [pc, #412]	; (800b490 <UTIL_SEQ_Run+0x1b4>)
 800b2f4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b2f6:	4b67      	ldr	r3, [pc, #412]	; (800b494 <UTIL_SEQ_Run+0x1b8>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800b2fc:	e086      	b.n	800b40c <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 800b2fe:	2300      	movs	r3, #0
 800b300:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800b302:	e002      	b.n	800b30a <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 800b304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b306:	3301      	adds	r3, #1
 800b308:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800b30a:	4a63      	ldr	r2, [pc, #396]	; (800b498 <UTIL_SEQ_Run+0x1bc>)
 800b30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b312:	4b62      	ldr	r3, [pc, #392]	; (800b49c <UTIL_SEQ_Run+0x1c0>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	401a      	ands	r2, r3
 800b318:	4b5d      	ldr	r3, [pc, #372]	; (800b490 <UTIL_SEQ_Run+0x1b4>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4013      	ands	r3, r2
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d0f0      	beq.n	800b304 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800b322:	4a5d      	ldr	r2, [pc, #372]	; (800b498 <UTIL_SEQ_Run+0x1bc>)
 800b324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b326:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b32a:	4b5c      	ldr	r3, [pc, #368]	; (800b49c <UTIL_SEQ_Run+0x1c0>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	401a      	ands	r2, r3
 800b330:	4b57      	ldr	r3, [pc, #348]	; (800b490 <UTIL_SEQ_Run+0x1b4>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4013      	ands	r3, r2
 800b336:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b338:	4a57      	ldr	r2, [pc, #348]	; (800b498 <UTIL_SEQ_Run+0x1bc>)
 800b33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33c:	00db      	lsls	r3, r3, #3
 800b33e:	4413      	add	r3, r2
 800b340:	685a      	ldr	r2, [r3, #4]
 800b342:	6a3b      	ldr	r3, [r7, #32]
 800b344:	4013      	ands	r3, r2
 800b346:	2b00      	cmp	r3, #0
 800b348:	d106      	bne.n	800b358 <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b34a:	4a53      	ldr	r2, [pc, #332]	; (800b498 <UTIL_SEQ_Run+0x1bc>)
 800b34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b34e:	00db      	lsls	r3, r3, #3
 800b350:	4413      	add	r3, r2
 800b352:	f04f 32ff 	mov.w	r2, #4294967295
 800b356:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b358:	4a4f      	ldr	r2, [pc, #316]	; (800b498 <UTIL_SEQ_Run+0x1bc>)
 800b35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35c:	00db      	lsls	r3, r3, #3
 800b35e:	4413      	add	r3, r2
 800b360:	685a      	ldr	r2, [r3, #4]
 800b362:	6a3b      	ldr	r3, [r7, #32]
 800b364:	4013      	ands	r3, r2
 800b366:	4618      	mov	r0, r3
 800b368:	f000 f9ac 	bl	800b6c4 <SEQ_BitPosition>
 800b36c:	4603      	mov	r3, r0
 800b36e:	461a      	mov	r2, r3
 800b370:	4b4b      	ldr	r3, [pc, #300]	; (800b4a0 <UTIL_SEQ_Run+0x1c4>)
 800b372:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b374:	4a48      	ldr	r2, [pc, #288]	; (800b498 <UTIL_SEQ_Run+0x1bc>)
 800b376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b378:	00db      	lsls	r3, r3, #3
 800b37a:	4413      	add	r3, r2
 800b37c:	685a      	ldr	r2, [r3, #4]
 800b37e:	4b48      	ldr	r3, [pc, #288]	; (800b4a0 <UTIL_SEQ_Run+0x1c4>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2101      	movs	r1, #1
 800b384:	fa01 f303 	lsl.w	r3, r1, r3
 800b388:	43db      	mvns	r3, r3
 800b38a:	401a      	ands	r2, r3
 800b38c:	4942      	ldr	r1, [pc, #264]	; (800b498 <UTIL_SEQ_Run+0x1bc>)
 800b38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b390:	00db      	lsls	r3, r3, #3
 800b392:	440b      	add	r3, r1
 800b394:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b396:	f3ef 8310 	mrs	r3, PRIMASK
 800b39a:	617b      	str	r3, [r7, #20]
  return(result);
 800b39c:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b39e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b3a0:	b672      	cpsid	i
}
 800b3a2:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b3a4:	4b3e      	ldr	r3, [pc, #248]	; (800b4a0 <UTIL_SEQ_Run+0x1c4>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ae:	43da      	mvns	r2, r3
 800b3b0:	4b38      	ldr	r3, [pc, #224]	; (800b494 <UTIL_SEQ_Run+0x1b8>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4013      	ands	r3, r2
 800b3b6:	4a37      	ldr	r2, [pc, #220]	; (800b494 <UTIL_SEQ_Run+0x1b8>)
 800b3b8:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b3ba:	2302      	movs	r3, #2
 800b3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3be:	e013      	b.n	800b3e8 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c2:	3b01      	subs	r3, #1
 800b3c4:	4a34      	ldr	r2, [pc, #208]	; (800b498 <UTIL_SEQ_Run+0x1bc>)
 800b3c6:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b3ca:	4b35      	ldr	r3, [pc, #212]	; (800b4a0 <UTIL_SEQ_Run+0x1c4>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b3d4:	43da      	mvns	r2, r3
 800b3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	400a      	ands	r2, r1
 800b3dc:	492e      	ldr	r1, [pc, #184]	; (800b498 <UTIL_SEQ_Run+0x1bc>)
 800b3de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1e8      	bne.n	800b3c0 <UTIL_SEQ_Run+0xe4>
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	f383 8810 	msr	PRIMASK, r3
}
 800b3f8:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b3fa:	4b29      	ldr	r3, [pc, #164]	; (800b4a0 <UTIL_SEQ_Run+0x1c4>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a29      	ldr	r2, [pc, #164]	; (800b4a4 <UTIL_SEQ_Run+0x1c8>)
 800b400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b404:	4798      	blx	r3
    
    local_taskset = TaskSet;
 800b406:	4b23      	ldr	r3, [pc, #140]	; (800b494 <UTIL_SEQ_Run+0x1b8>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800b40c:	4b23      	ldr	r3, [pc, #140]	; (800b49c <UTIL_SEQ_Run+0x1c0>)
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b412:	401a      	ands	r2, r3
 800b414:	4b1e      	ldr	r3, [pc, #120]	; (800b490 <UTIL_SEQ_Run+0x1b4>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4013      	ands	r3, r2
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d007      	beq.n	800b42e <UTIL_SEQ_Run+0x152>
 800b41e:	4b22      	ldr	r3, [pc, #136]	; (800b4a8 <UTIL_SEQ_Run+0x1cc>)
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	4b22      	ldr	r3, [pc, #136]	; (800b4ac <UTIL_SEQ_Run+0x1d0>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4013      	ands	r3, r2
 800b428:	2b00      	cmp	r3, #0
 800b42a:	f43f af68 	beq.w	800b2fe <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b42e:	4b1c      	ldr	r3, [pc, #112]	; (800b4a0 <UTIL_SEQ_Run+0x1c4>)
 800b430:	f04f 32ff 	mov.w	r2, #4294967295
 800b434:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b436:	f000 f937 	bl	800b6a8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b43a:	f3ef 8310 	mrs	r3, PRIMASK
 800b43e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b440:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b442:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800b444:	b672      	cpsid	i
}
 800b446:	bf00      	nop
  local_taskset = TaskSet;
 800b448:	4b12      	ldr	r3, [pc, #72]	; (800b494 <UTIL_SEQ_Run+0x1b8>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800b44e:	4b13      	ldr	r3, [pc, #76]	; (800b49c <UTIL_SEQ_Run+0x1c0>)
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b454:	401a      	ands	r2, r3
 800b456:	4b0e      	ldr	r3, [pc, #56]	; (800b490 <UTIL_SEQ_Run+0x1b4>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4013      	ands	r3, r2
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d108      	bne.n	800b472 <UTIL_SEQ_Run+0x196>
 800b460:	4b11      	ldr	r3, [pc, #68]	; (800b4a8 <UTIL_SEQ_Run+0x1cc>)
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	4b11      	ldr	r3, [pc, #68]	; (800b4ac <UTIL_SEQ_Run+0x1d0>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4013      	ands	r3, r2
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d101      	bne.n	800b472 <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 800b46e:	f7f5 fd46 	bl	8000efe <UTIL_SEQ_Idle>
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	f383 8810 	msr	PRIMASK, r3
}
 800b47c:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800b47e:	f000 f91a 	bl	800b6b6 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b482:	4a03      	ldr	r2, [pc, #12]	; (800b490 <UTIL_SEQ_Run+0x1b4>)
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b486:	6013      	str	r3, [r2, #0]

  return;
 800b488:	bf00      	nop
}
 800b48a:	3730      	adds	r7, #48	; 0x30
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	20000050 	.word	0x20000050
 800b494:	20001554 	.word	0x20001554
 800b498:	200015e4 	.word	0x200015e4
 800b49c:	2000004c 	.word	0x2000004c
 800b4a0:	20001560 	.word	0x20001560
 800b4a4:	20001564 	.word	0x20001564
 800b4a8:	20001558 	.word	0x20001558
 800b4ac:	2000155c 	.word	0x2000155c

0800b4b0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b088      	sub	sp, #32
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4bc:	f3ef 8310 	mrs	r3, PRIMASK
 800b4c0:	617b      	str	r3, [r7, #20]
  return(result);
 800b4c2:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b4c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b4c6:	b672      	cpsid	i
}
 800b4c8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f000 f8fa 	bl	800b6c4 <SEQ_BitPosition>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	4a06      	ldr	r2, [pc, #24]	; (800b4f0 <UTIL_SEQ_RegTask+0x40>)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	f383 8810 	msr	PRIMASK, r3
}
 800b4e6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b4e8:	bf00      	nop
}
 800b4ea:	3720      	adds	r7, #32
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	20001564 	.word	0x20001564

0800b4f4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b087      	sub	sp, #28
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4fe:	f3ef 8310 	mrs	r3, PRIMASK
 800b502:	60fb      	str	r3, [r7, #12]
  return(result);
 800b504:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b506:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b508:	b672      	cpsid	i
}
 800b50a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b50c:	4b0d      	ldr	r3, [pc, #52]	; (800b544 <UTIL_SEQ_SetTask+0x50>)
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	4313      	orrs	r3, r2
 800b514:	4a0b      	ldr	r2, [pc, #44]	; (800b544 <UTIL_SEQ_SetTask+0x50>)
 800b516:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b518:	4a0b      	ldr	r2, [pc, #44]	; (800b548 <UTIL_SEQ_SetTask+0x54>)
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	431a      	orrs	r2, r3
 800b524:	4908      	ldr	r1, [pc, #32]	; (800b548 <UTIL_SEQ_SetTask+0x54>)
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	f383 8810 	msr	PRIMASK, r3
}
 800b536:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b538:	bf00      	nop
}
 800b53a:	371c      	adds	r7, #28
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr
 800b544:	20001554 	.word	0x20001554
 800b548:	200015e4 	.word	0x200015e4

0800b54c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b54c:	b480      	push	{r7}
 800b54e:	b087      	sub	sp, #28
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b554:	f3ef 8310 	mrs	r3, PRIMASK
 800b558:	60fb      	str	r3, [r7, #12]
  return(result);
 800b55a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b55c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b55e:	b672      	cpsid	i
}
 800b560:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	43da      	mvns	r2, r3
 800b566:	4b08      	ldr	r3, [pc, #32]	; (800b588 <UTIL_SEQ_PauseTask+0x3c>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4013      	ands	r3, r2
 800b56c:	4a06      	ldr	r2, [pc, #24]	; (800b588 <UTIL_SEQ_PauseTask+0x3c>)
 800b56e:	6013      	str	r3, [r2, #0]
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	f383 8810 	msr	PRIMASK, r3
}
 800b57a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b57c:	bf00      	nop
}
 800b57e:	371c      	adds	r7, #28
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr
 800b588:	2000004c 	.word	0x2000004c

0800b58c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b58c:	b480      	push	{r7}
 800b58e:	b087      	sub	sp, #28
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b594:	f3ef 8310 	mrs	r3, PRIMASK
 800b598:	60fb      	str	r3, [r7, #12]
  return(result);
 800b59a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b59c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b59e:	b672      	cpsid	i
}
 800b5a0:	bf00      	nop

  TaskMask |= TaskId_bm;
 800b5a2:	4b09      	ldr	r3, [pc, #36]	; (800b5c8 <UTIL_SEQ_ResumeTask+0x3c>)
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	4a07      	ldr	r2, [pc, #28]	; (800b5c8 <UTIL_SEQ_ResumeTask+0x3c>)
 800b5ac:	6013      	str	r3, [r2, #0]
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	f383 8810 	msr	PRIMASK, r3
}
 800b5b8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b5ba:	bf00      	nop
}
 800b5bc:	371c      	adds	r7, #28
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop
 800b5c8:	2000004c 	.word	0x2000004c

0800b5cc <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b087      	sub	sp, #28
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5d4:	f3ef 8310 	mrs	r3, PRIMASK
 800b5d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5da:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b5dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b5de:	b672      	cpsid	i
}
 800b5e0:	bf00      	nop

  EvtSet |= EvtId_bm;
 800b5e2:	4b09      	ldr	r3, [pc, #36]	; (800b608 <UTIL_SEQ_SetEvt+0x3c>)
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	4a07      	ldr	r2, [pc, #28]	; (800b608 <UTIL_SEQ_SetEvt+0x3c>)
 800b5ec:	6013      	str	r3, [r2, #0]
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	f383 8810 	msr	PRIMASK, r3
}
 800b5f8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b5fa:	bf00      	nop
}
 800b5fc:	371c      	adds	r7, #28
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	20001558 	.word	0x20001558

0800b60c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b088      	sub	sp, #32
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800b614:	4b21      	ldr	r3, [pc, #132]	; (800b69c <UTIL_SEQ_WaitEvt+0x90>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800b61a:	4b20      	ldr	r3, [pc, #128]	; (800b69c <UTIL_SEQ_WaitEvt+0x90>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b622:	d102      	bne.n	800b62a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800b624:	2300      	movs	r3, #0
 800b626:	61fb      	str	r3, [r7, #28]
 800b628:	e005      	b.n	800b636 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800b62a:	4b1c      	ldr	r3, [pc, #112]	; (800b69c <UTIL_SEQ_WaitEvt+0x90>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2201      	movs	r2, #1
 800b630:	fa02 f303 	lsl.w	r3, r2, r3
 800b634:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800b636:	4b1a      	ldr	r3, [pc, #104]	; (800b6a0 <UTIL_SEQ_WaitEvt+0x94>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800b63c:	4a18      	ldr	r2, [pc, #96]	; (800b6a0 <UTIL_SEQ_WaitEvt+0x94>)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800b642:	e005      	b.n	800b650 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800b644:	4b16      	ldr	r3, [pc, #88]	; (800b6a0 <UTIL_SEQ_WaitEvt+0x94>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4619      	mov	r1, r3
 800b64a:	69f8      	ldr	r0, [r7, #28]
 800b64c:	f7f5 fc5e 	bl	8000f0c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800b650:	4b14      	ldr	r3, [pc, #80]	; (800b6a4 <UTIL_SEQ_WaitEvt+0x98>)
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	4b12      	ldr	r3, [pc, #72]	; (800b6a0 <UTIL_SEQ_WaitEvt+0x94>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4013      	ands	r3, r2
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d0f2      	beq.n	800b644 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800b65e:	4a0f      	ldr	r2, [pc, #60]	; (800b69c <UTIL_SEQ_WaitEvt+0x90>)
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b664:	f3ef 8310 	mrs	r3, PRIMASK
 800b668:	60bb      	str	r3, [r7, #8]
  return(result);
 800b66a:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b66c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b66e:	b672      	cpsid	i
}
 800b670:	bf00      	nop

  EvtSet &= (~EvtWaited);
 800b672:	4b0b      	ldr	r3, [pc, #44]	; (800b6a0 <UTIL_SEQ_WaitEvt+0x94>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	43da      	mvns	r2, r3
 800b678:	4b0a      	ldr	r3, [pc, #40]	; (800b6a4 <UTIL_SEQ_WaitEvt+0x98>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4013      	ands	r3, r2
 800b67e:	4a09      	ldr	r2, [pc, #36]	; (800b6a4 <UTIL_SEQ_WaitEvt+0x98>)
 800b680:	6013      	str	r3, [r2, #0]
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f383 8810 	msr	PRIMASK, r3
}
 800b68c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800b68e:	4a04      	ldr	r2, [pc, #16]	; (800b6a0 <UTIL_SEQ_WaitEvt+0x94>)
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	6013      	str	r3, [r2, #0]

  return;
 800b694:	bf00      	nop
}
 800b696:	3720      	adds	r7, #32
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	20001560 	.word	0x20001560
 800b6a0:	2000155c 	.word	0x2000155c
 800b6a4:	20001558 	.word	0x20001558

0800b6a8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b6ac:	bf00      	nop
}
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr

0800b6b6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b6b6:	b480      	push	{r7}
 800b6b8:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b6ba:	bf00      	nop
}
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	0c1b      	lsrs	r3, r3, #16
 800b6d4:	041b      	lsls	r3, r3, #16
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d104      	bne.n	800b6e4 <SEQ_BitPosition+0x20>
 800b6da:	2310      	movs	r3, #16
 800b6dc:	73fb      	strb	r3, [r7, #15]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	041b      	lsls	r3, r3, #16
 800b6e2:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d105      	bne.n	800b6fa <SEQ_BitPosition+0x36>
 800b6ee:	7bfb      	ldrb	r3, [r7, #15]
 800b6f0:	3308      	adds	r3, #8
 800b6f2:	73fb      	strb	r3, [r7, #15]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	021b      	lsls	r3, r3, #8
 800b6f8:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b700:	2b00      	cmp	r3, #0
 800b702:	d105      	bne.n	800b710 <SEQ_BitPosition+0x4c>
 800b704:	7bfb      	ldrb	r3, [r7, #15]
 800b706:	3304      	adds	r3, #4
 800b708:	73fb      	strb	r3, [r7, #15]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	011b      	lsls	r3, r3, #4
 800b70e:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	0f1b      	lsrs	r3, r3, #28
 800b714:	4a07      	ldr	r2, [pc, #28]	; (800b734 <SEQ_BitPosition+0x70>)
 800b716:	5cd2      	ldrb	r2, [r2, r3]
 800b718:	7bfb      	ldrb	r3, [r7, #15]
 800b71a:	4413      	add	r3, r2
 800b71c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b71e:	7bfb      	ldrb	r3, [r7, #15]
 800b720:	f1c3 031f 	rsb	r3, r3, #31
 800b724:	b2db      	uxtb	r3, r3
}
 800b726:	4618      	mov	r0, r3
 800b728:	3714      	adds	r7, #20
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	0800d61c 	.word	0x0800d61c

0800b738 <__errno>:
 800b738:	4b01      	ldr	r3, [pc, #4]	; (800b740 <__errno+0x8>)
 800b73a:	6818      	ldr	r0, [r3, #0]
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	20000054 	.word	0x20000054

0800b744 <__libc_init_array>:
 800b744:	b570      	push	{r4, r5, r6, lr}
 800b746:	4d0d      	ldr	r5, [pc, #52]	; (800b77c <__libc_init_array+0x38>)
 800b748:	4c0d      	ldr	r4, [pc, #52]	; (800b780 <__libc_init_array+0x3c>)
 800b74a:	1b64      	subs	r4, r4, r5
 800b74c:	10a4      	asrs	r4, r4, #2
 800b74e:	2600      	movs	r6, #0
 800b750:	42a6      	cmp	r6, r4
 800b752:	d109      	bne.n	800b768 <__libc_init_array+0x24>
 800b754:	4d0b      	ldr	r5, [pc, #44]	; (800b784 <__libc_init_array+0x40>)
 800b756:	4c0c      	ldr	r4, [pc, #48]	; (800b788 <__libc_init_array+0x44>)
 800b758:	f001 f8f4 	bl	800c944 <_init>
 800b75c:	1b64      	subs	r4, r4, r5
 800b75e:	10a4      	asrs	r4, r4, #2
 800b760:	2600      	movs	r6, #0
 800b762:	42a6      	cmp	r6, r4
 800b764:	d105      	bne.n	800b772 <__libc_init_array+0x2e>
 800b766:	bd70      	pop	{r4, r5, r6, pc}
 800b768:	f855 3b04 	ldr.w	r3, [r5], #4
 800b76c:	4798      	blx	r3
 800b76e:	3601      	adds	r6, #1
 800b770:	e7ee      	b.n	800b750 <__libc_init_array+0xc>
 800b772:	f855 3b04 	ldr.w	r3, [r5], #4
 800b776:	4798      	blx	r3
 800b778:	3601      	adds	r6, #1
 800b77a:	e7f2      	b.n	800b762 <__libc_init_array+0x1e>
 800b77c:	0800d77c 	.word	0x0800d77c
 800b780:	0800d77c 	.word	0x0800d77c
 800b784:	0800d77c 	.word	0x0800d77c
 800b788:	0800d780 	.word	0x0800d780

0800b78c <memcpy>:
 800b78c:	440a      	add	r2, r1
 800b78e:	4291      	cmp	r1, r2
 800b790:	f100 33ff 	add.w	r3, r0, #4294967295
 800b794:	d100      	bne.n	800b798 <memcpy+0xc>
 800b796:	4770      	bx	lr
 800b798:	b510      	push	{r4, lr}
 800b79a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b79e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7a2:	4291      	cmp	r1, r2
 800b7a4:	d1f9      	bne.n	800b79a <memcpy+0xe>
 800b7a6:	bd10      	pop	{r4, pc}

0800b7a8 <memset>:
 800b7a8:	4402      	add	r2, r0
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d100      	bne.n	800b7b2 <memset+0xa>
 800b7b0:	4770      	bx	lr
 800b7b2:	f803 1b01 	strb.w	r1, [r3], #1
 800b7b6:	e7f9      	b.n	800b7ac <memset+0x4>

0800b7b8 <iprintf>:
 800b7b8:	b40f      	push	{r0, r1, r2, r3}
 800b7ba:	4b0a      	ldr	r3, [pc, #40]	; (800b7e4 <iprintf+0x2c>)
 800b7bc:	b513      	push	{r0, r1, r4, lr}
 800b7be:	681c      	ldr	r4, [r3, #0]
 800b7c0:	b124      	cbz	r4, 800b7cc <iprintf+0x14>
 800b7c2:	69a3      	ldr	r3, [r4, #24]
 800b7c4:	b913      	cbnz	r3, 800b7cc <iprintf+0x14>
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f000 faba 	bl	800bd40 <__sinit>
 800b7cc:	ab05      	add	r3, sp, #20
 800b7ce:	9a04      	ldr	r2, [sp, #16]
 800b7d0:	68a1      	ldr	r1, [r4, #8]
 800b7d2:	9301      	str	r3, [sp, #4]
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f000 fcdd 	bl	800c194 <_vfiprintf_r>
 800b7da:	b002      	add	sp, #8
 800b7dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7e0:	b004      	add	sp, #16
 800b7e2:	4770      	bx	lr
 800b7e4:	20000054 	.word	0x20000054

0800b7e8 <_puts_r>:
 800b7e8:	b570      	push	{r4, r5, r6, lr}
 800b7ea:	460e      	mov	r6, r1
 800b7ec:	4605      	mov	r5, r0
 800b7ee:	b118      	cbz	r0, 800b7f8 <_puts_r+0x10>
 800b7f0:	6983      	ldr	r3, [r0, #24]
 800b7f2:	b90b      	cbnz	r3, 800b7f8 <_puts_r+0x10>
 800b7f4:	f000 faa4 	bl	800bd40 <__sinit>
 800b7f8:	69ab      	ldr	r3, [r5, #24]
 800b7fa:	68ac      	ldr	r4, [r5, #8]
 800b7fc:	b913      	cbnz	r3, 800b804 <_puts_r+0x1c>
 800b7fe:	4628      	mov	r0, r5
 800b800:	f000 fa9e 	bl	800bd40 <__sinit>
 800b804:	4b2c      	ldr	r3, [pc, #176]	; (800b8b8 <_puts_r+0xd0>)
 800b806:	429c      	cmp	r4, r3
 800b808:	d120      	bne.n	800b84c <_puts_r+0x64>
 800b80a:	686c      	ldr	r4, [r5, #4]
 800b80c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b80e:	07db      	lsls	r3, r3, #31
 800b810:	d405      	bmi.n	800b81e <_puts_r+0x36>
 800b812:	89a3      	ldrh	r3, [r4, #12]
 800b814:	0598      	lsls	r0, r3, #22
 800b816:	d402      	bmi.n	800b81e <_puts_r+0x36>
 800b818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b81a:	f000 fb41 	bl	800bea0 <__retarget_lock_acquire_recursive>
 800b81e:	89a3      	ldrh	r3, [r4, #12]
 800b820:	0719      	lsls	r1, r3, #28
 800b822:	d51d      	bpl.n	800b860 <_puts_r+0x78>
 800b824:	6923      	ldr	r3, [r4, #16]
 800b826:	b1db      	cbz	r3, 800b860 <_puts_r+0x78>
 800b828:	3e01      	subs	r6, #1
 800b82a:	68a3      	ldr	r3, [r4, #8]
 800b82c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b830:	3b01      	subs	r3, #1
 800b832:	60a3      	str	r3, [r4, #8]
 800b834:	bb39      	cbnz	r1, 800b886 <_puts_r+0x9e>
 800b836:	2b00      	cmp	r3, #0
 800b838:	da38      	bge.n	800b8ac <_puts_r+0xc4>
 800b83a:	4622      	mov	r2, r4
 800b83c:	210a      	movs	r1, #10
 800b83e:	4628      	mov	r0, r5
 800b840:	f000 f886 	bl	800b950 <__swbuf_r>
 800b844:	3001      	adds	r0, #1
 800b846:	d011      	beq.n	800b86c <_puts_r+0x84>
 800b848:	250a      	movs	r5, #10
 800b84a:	e011      	b.n	800b870 <_puts_r+0x88>
 800b84c:	4b1b      	ldr	r3, [pc, #108]	; (800b8bc <_puts_r+0xd4>)
 800b84e:	429c      	cmp	r4, r3
 800b850:	d101      	bne.n	800b856 <_puts_r+0x6e>
 800b852:	68ac      	ldr	r4, [r5, #8]
 800b854:	e7da      	b.n	800b80c <_puts_r+0x24>
 800b856:	4b1a      	ldr	r3, [pc, #104]	; (800b8c0 <_puts_r+0xd8>)
 800b858:	429c      	cmp	r4, r3
 800b85a:	bf08      	it	eq
 800b85c:	68ec      	ldreq	r4, [r5, #12]
 800b85e:	e7d5      	b.n	800b80c <_puts_r+0x24>
 800b860:	4621      	mov	r1, r4
 800b862:	4628      	mov	r0, r5
 800b864:	f000 f8c6 	bl	800b9f4 <__swsetup_r>
 800b868:	2800      	cmp	r0, #0
 800b86a:	d0dd      	beq.n	800b828 <_puts_r+0x40>
 800b86c:	f04f 35ff 	mov.w	r5, #4294967295
 800b870:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b872:	07da      	lsls	r2, r3, #31
 800b874:	d405      	bmi.n	800b882 <_puts_r+0x9a>
 800b876:	89a3      	ldrh	r3, [r4, #12]
 800b878:	059b      	lsls	r3, r3, #22
 800b87a:	d402      	bmi.n	800b882 <_puts_r+0x9a>
 800b87c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b87e:	f000 fb10 	bl	800bea2 <__retarget_lock_release_recursive>
 800b882:	4628      	mov	r0, r5
 800b884:	bd70      	pop	{r4, r5, r6, pc}
 800b886:	2b00      	cmp	r3, #0
 800b888:	da04      	bge.n	800b894 <_puts_r+0xac>
 800b88a:	69a2      	ldr	r2, [r4, #24]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	dc06      	bgt.n	800b89e <_puts_r+0xb6>
 800b890:	290a      	cmp	r1, #10
 800b892:	d004      	beq.n	800b89e <_puts_r+0xb6>
 800b894:	6823      	ldr	r3, [r4, #0]
 800b896:	1c5a      	adds	r2, r3, #1
 800b898:	6022      	str	r2, [r4, #0]
 800b89a:	7019      	strb	r1, [r3, #0]
 800b89c:	e7c5      	b.n	800b82a <_puts_r+0x42>
 800b89e:	4622      	mov	r2, r4
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	f000 f855 	bl	800b950 <__swbuf_r>
 800b8a6:	3001      	adds	r0, #1
 800b8a8:	d1bf      	bne.n	800b82a <_puts_r+0x42>
 800b8aa:	e7df      	b.n	800b86c <_puts_r+0x84>
 800b8ac:	6823      	ldr	r3, [r4, #0]
 800b8ae:	250a      	movs	r5, #10
 800b8b0:	1c5a      	adds	r2, r3, #1
 800b8b2:	6022      	str	r2, [r4, #0]
 800b8b4:	701d      	strb	r5, [r3, #0]
 800b8b6:	e7db      	b.n	800b870 <_puts_r+0x88>
 800b8b8:	0800d700 	.word	0x0800d700
 800b8bc:	0800d720 	.word	0x0800d720
 800b8c0:	0800d6e0 	.word	0x0800d6e0

0800b8c4 <puts>:
 800b8c4:	4b02      	ldr	r3, [pc, #8]	; (800b8d0 <puts+0xc>)
 800b8c6:	4601      	mov	r1, r0
 800b8c8:	6818      	ldr	r0, [r3, #0]
 800b8ca:	f7ff bf8d 	b.w	800b7e8 <_puts_r>
 800b8ce:	bf00      	nop
 800b8d0:	20000054 	.word	0x20000054

0800b8d4 <rand>:
 800b8d4:	4b16      	ldr	r3, [pc, #88]	; (800b930 <rand+0x5c>)
 800b8d6:	b510      	push	{r4, lr}
 800b8d8:	681c      	ldr	r4, [r3, #0]
 800b8da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b8dc:	b9b3      	cbnz	r3, 800b90c <rand+0x38>
 800b8de:	2018      	movs	r0, #24
 800b8e0:	f000 fb46 	bl	800bf70 <malloc>
 800b8e4:	63a0      	str	r0, [r4, #56]	; 0x38
 800b8e6:	b928      	cbnz	r0, 800b8f4 <rand+0x20>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	4b12      	ldr	r3, [pc, #72]	; (800b934 <rand+0x60>)
 800b8ec:	4812      	ldr	r0, [pc, #72]	; (800b938 <rand+0x64>)
 800b8ee:	214e      	movs	r1, #78	; 0x4e
 800b8f0:	f000 f8ee 	bl	800bad0 <__assert_func>
 800b8f4:	4a11      	ldr	r2, [pc, #68]	; (800b93c <rand+0x68>)
 800b8f6:	4b12      	ldr	r3, [pc, #72]	; (800b940 <rand+0x6c>)
 800b8f8:	e9c0 2300 	strd	r2, r3, [r0]
 800b8fc:	4b11      	ldr	r3, [pc, #68]	; (800b944 <rand+0x70>)
 800b8fe:	6083      	str	r3, [r0, #8]
 800b900:	230b      	movs	r3, #11
 800b902:	8183      	strh	r3, [r0, #12]
 800b904:	2201      	movs	r2, #1
 800b906:	2300      	movs	r3, #0
 800b908:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b90c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800b90e:	4a0e      	ldr	r2, [pc, #56]	; (800b948 <rand+0x74>)
 800b910:	6920      	ldr	r0, [r4, #16]
 800b912:	6963      	ldr	r3, [r4, #20]
 800b914:	490d      	ldr	r1, [pc, #52]	; (800b94c <rand+0x78>)
 800b916:	4342      	muls	r2, r0
 800b918:	fb01 2203 	mla	r2, r1, r3, r2
 800b91c:	fba0 0101 	umull	r0, r1, r0, r1
 800b920:	1c43      	adds	r3, r0, #1
 800b922:	eb42 0001 	adc.w	r0, r2, r1
 800b926:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800b92a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b92e:	bd10      	pop	{r4, pc}
 800b930:	20000054 	.word	0x20000054
 800b934:	0800d630 	.word	0x0800d630
 800b938:	0800d647 	.word	0x0800d647
 800b93c:	abcd330e 	.word	0xabcd330e
 800b940:	e66d1234 	.word	0xe66d1234
 800b944:	0005deec 	.word	0x0005deec
 800b948:	5851f42d 	.word	0x5851f42d
 800b94c:	4c957f2d 	.word	0x4c957f2d

0800b950 <__swbuf_r>:
 800b950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b952:	460e      	mov	r6, r1
 800b954:	4614      	mov	r4, r2
 800b956:	4605      	mov	r5, r0
 800b958:	b118      	cbz	r0, 800b962 <__swbuf_r+0x12>
 800b95a:	6983      	ldr	r3, [r0, #24]
 800b95c:	b90b      	cbnz	r3, 800b962 <__swbuf_r+0x12>
 800b95e:	f000 f9ef 	bl	800bd40 <__sinit>
 800b962:	4b21      	ldr	r3, [pc, #132]	; (800b9e8 <__swbuf_r+0x98>)
 800b964:	429c      	cmp	r4, r3
 800b966:	d12b      	bne.n	800b9c0 <__swbuf_r+0x70>
 800b968:	686c      	ldr	r4, [r5, #4]
 800b96a:	69a3      	ldr	r3, [r4, #24]
 800b96c:	60a3      	str	r3, [r4, #8]
 800b96e:	89a3      	ldrh	r3, [r4, #12]
 800b970:	071a      	lsls	r2, r3, #28
 800b972:	d52f      	bpl.n	800b9d4 <__swbuf_r+0x84>
 800b974:	6923      	ldr	r3, [r4, #16]
 800b976:	b36b      	cbz	r3, 800b9d4 <__swbuf_r+0x84>
 800b978:	6923      	ldr	r3, [r4, #16]
 800b97a:	6820      	ldr	r0, [r4, #0]
 800b97c:	1ac0      	subs	r0, r0, r3
 800b97e:	6963      	ldr	r3, [r4, #20]
 800b980:	b2f6      	uxtb	r6, r6
 800b982:	4283      	cmp	r3, r0
 800b984:	4637      	mov	r7, r6
 800b986:	dc04      	bgt.n	800b992 <__swbuf_r+0x42>
 800b988:	4621      	mov	r1, r4
 800b98a:	4628      	mov	r0, r5
 800b98c:	f000 f944 	bl	800bc18 <_fflush_r>
 800b990:	bb30      	cbnz	r0, 800b9e0 <__swbuf_r+0x90>
 800b992:	68a3      	ldr	r3, [r4, #8]
 800b994:	3b01      	subs	r3, #1
 800b996:	60a3      	str	r3, [r4, #8]
 800b998:	6823      	ldr	r3, [r4, #0]
 800b99a:	1c5a      	adds	r2, r3, #1
 800b99c:	6022      	str	r2, [r4, #0]
 800b99e:	701e      	strb	r6, [r3, #0]
 800b9a0:	6963      	ldr	r3, [r4, #20]
 800b9a2:	3001      	adds	r0, #1
 800b9a4:	4283      	cmp	r3, r0
 800b9a6:	d004      	beq.n	800b9b2 <__swbuf_r+0x62>
 800b9a8:	89a3      	ldrh	r3, [r4, #12]
 800b9aa:	07db      	lsls	r3, r3, #31
 800b9ac:	d506      	bpl.n	800b9bc <__swbuf_r+0x6c>
 800b9ae:	2e0a      	cmp	r6, #10
 800b9b0:	d104      	bne.n	800b9bc <__swbuf_r+0x6c>
 800b9b2:	4621      	mov	r1, r4
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	f000 f92f 	bl	800bc18 <_fflush_r>
 800b9ba:	b988      	cbnz	r0, 800b9e0 <__swbuf_r+0x90>
 800b9bc:	4638      	mov	r0, r7
 800b9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9c0:	4b0a      	ldr	r3, [pc, #40]	; (800b9ec <__swbuf_r+0x9c>)
 800b9c2:	429c      	cmp	r4, r3
 800b9c4:	d101      	bne.n	800b9ca <__swbuf_r+0x7a>
 800b9c6:	68ac      	ldr	r4, [r5, #8]
 800b9c8:	e7cf      	b.n	800b96a <__swbuf_r+0x1a>
 800b9ca:	4b09      	ldr	r3, [pc, #36]	; (800b9f0 <__swbuf_r+0xa0>)
 800b9cc:	429c      	cmp	r4, r3
 800b9ce:	bf08      	it	eq
 800b9d0:	68ec      	ldreq	r4, [r5, #12]
 800b9d2:	e7ca      	b.n	800b96a <__swbuf_r+0x1a>
 800b9d4:	4621      	mov	r1, r4
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	f000 f80c 	bl	800b9f4 <__swsetup_r>
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	d0cb      	beq.n	800b978 <__swbuf_r+0x28>
 800b9e0:	f04f 37ff 	mov.w	r7, #4294967295
 800b9e4:	e7ea      	b.n	800b9bc <__swbuf_r+0x6c>
 800b9e6:	bf00      	nop
 800b9e8:	0800d700 	.word	0x0800d700
 800b9ec:	0800d720 	.word	0x0800d720
 800b9f0:	0800d6e0 	.word	0x0800d6e0

0800b9f4 <__swsetup_r>:
 800b9f4:	4b32      	ldr	r3, [pc, #200]	; (800bac0 <__swsetup_r+0xcc>)
 800b9f6:	b570      	push	{r4, r5, r6, lr}
 800b9f8:	681d      	ldr	r5, [r3, #0]
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	460c      	mov	r4, r1
 800b9fe:	b125      	cbz	r5, 800ba0a <__swsetup_r+0x16>
 800ba00:	69ab      	ldr	r3, [r5, #24]
 800ba02:	b913      	cbnz	r3, 800ba0a <__swsetup_r+0x16>
 800ba04:	4628      	mov	r0, r5
 800ba06:	f000 f99b 	bl	800bd40 <__sinit>
 800ba0a:	4b2e      	ldr	r3, [pc, #184]	; (800bac4 <__swsetup_r+0xd0>)
 800ba0c:	429c      	cmp	r4, r3
 800ba0e:	d10f      	bne.n	800ba30 <__swsetup_r+0x3c>
 800ba10:	686c      	ldr	r4, [r5, #4]
 800ba12:	89a3      	ldrh	r3, [r4, #12]
 800ba14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba18:	0719      	lsls	r1, r3, #28
 800ba1a:	d42c      	bmi.n	800ba76 <__swsetup_r+0x82>
 800ba1c:	06dd      	lsls	r5, r3, #27
 800ba1e:	d411      	bmi.n	800ba44 <__swsetup_r+0x50>
 800ba20:	2309      	movs	r3, #9
 800ba22:	6033      	str	r3, [r6, #0]
 800ba24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba28:	81a3      	strh	r3, [r4, #12]
 800ba2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba2e:	e03e      	b.n	800baae <__swsetup_r+0xba>
 800ba30:	4b25      	ldr	r3, [pc, #148]	; (800bac8 <__swsetup_r+0xd4>)
 800ba32:	429c      	cmp	r4, r3
 800ba34:	d101      	bne.n	800ba3a <__swsetup_r+0x46>
 800ba36:	68ac      	ldr	r4, [r5, #8]
 800ba38:	e7eb      	b.n	800ba12 <__swsetup_r+0x1e>
 800ba3a:	4b24      	ldr	r3, [pc, #144]	; (800bacc <__swsetup_r+0xd8>)
 800ba3c:	429c      	cmp	r4, r3
 800ba3e:	bf08      	it	eq
 800ba40:	68ec      	ldreq	r4, [r5, #12]
 800ba42:	e7e6      	b.n	800ba12 <__swsetup_r+0x1e>
 800ba44:	0758      	lsls	r0, r3, #29
 800ba46:	d512      	bpl.n	800ba6e <__swsetup_r+0x7a>
 800ba48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba4a:	b141      	cbz	r1, 800ba5e <__swsetup_r+0x6a>
 800ba4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba50:	4299      	cmp	r1, r3
 800ba52:	d002      	beq.n	800ba5a <__swsetup_r+0x66>
 800ba54:	4630      	mov	r0, r6
 800ba56:	f000 fa93 	bl	800bf80 <_free_r>
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	6363      	str	r3, [r4, #52]	; 0x34
 800ba5e:	89a3      	ldrh	r3, [r4, #12]
 800ba60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba64:	81a3      	strh	r3, [r4, #12]
 800ba66:	2300      	movs	r3, #0
 800ba68:	6063      	str	r3, [r4, #4]
 800ba6a:	6923      	ldr	r3, [r4, #16]
 800ba6c:	6023      	str	r3, [r4, #0]
 800ba6e:	89a3      	ldrh	r3, [r4, #12]
 800ba70:	f043 0308 	orr.w	r3, r3, #8
 800ba74:	81a3      	strh	r3, [r4, #12]
 800ba76:	6923      	ldr	r3, [r4, #16]
 800ba78:	b94b      	cbnz	r3, 800ba8e <__swsetup_r+0x9a>
 800ba7a:	89a3      	ldrh	r3, [r4, #12]
 800ba7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba84:	d003      	beq.n	800ba8e <__swsetup_r+0x9a>
 800ba86:	4621      	mov	r1, r4
 800ba88:	4630      	mov	r0, r6
 800ba8a:	f000 fa31 	bl	800bef0 <__smakebuf_r>
 800ba8e:	89a0      	ldrh	r0, [r4, #12]
 800ba90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba94:	f010 0301 	ands.w	r3, r0, #1
 800ba98:	d00a      	beq.n	800bab0 <__swsetup_r+0xbc>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	60a3      	str	r3, [r4, #8]
 800ba9e:	6963      	ldr	r3, [r4, #20]
 800baa0:	425b      	negs	r3, r3
 800baa2:	61a3      	str	r3, [r4, #24]
 800baa4:	6923      	ldr	r3, [r4, #16]
 800baa6:	b943      	cbnz	r3, 800baba <__swsetup_r+0xc6>
 800baa8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800baac:	d1ba      	bne.n	800ba24 <__swsetup_r+0x30>
 800baae:	bd70      	pop	{r4, r5, r6, pc}
 800bab0:	0781      	lsls	r1, r0, #30
 800bab2:	bf58      	it	pl
 800bab4:	6963      	ldrpl	r3, [r4, #20]
 800bab6:	60a3      	str	r3, [r4, #8]
 800bab8:	e7f4      	b.n	800baa4 <__swsetup_r+0xb0>
 800baba:	2000      	movs	r0, #0
 800babc:	e7f7      	b.n	800baae <__swsetup_r+0xba>
 800babe:	bf00      	nop
 800bac0:	20000054 	.word	0x20000054
 800bac4:	0800d700 	.word	0x0800d700
 800bac8:	0800d720 	.word	0x0800d720
 800bacc:	0800d6e0 	.word	0x0800d6e0

0800bad0 <__assert_func>:
 800bad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bad2:	4614      	mov	r4, r2
 800bad4:	461a      	mov	r2, r3
 800bad6:	4b09      	ldr	r3, [pc, #36]	; (800bafc <__assert_func+0x2c>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4605      	mov	r5, r0
 800badc:	68d8      	ldr	r0, [r3, #12]
 800bade:	b14c      	cbz	r4, 800baf4 <__assert_func+0x24>
 800bae0:	4b07      	ldr	r3, [pc, #28]	; (800bb00 <__assert_func+0x30>)
 800bae2:	9100      	str	r1, [sp, #0]
 800bae4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bae8:	4906      	ldr	r1, [pc, #24]	; (800bb04 <__assert_func+0x34>)
 800baea:	462b      	mov	r3, r5
 800baec:	f000 f9a6 	bl	800be3c <fiprintf>
 800baf0:	f000 fe7a 	bl	800c7e8 <abort>
 800baf4:	4b04      	ldr	r3, [pc, #16]	; (800bb08 <__assert_func+0x38>)
 800baf6:	461c      	mov	r4, r3
 800baf8:	e7f3      	b.n	800bae2 <__assert_func+0x12>
 800bafa:	bf00      	nop
 800bafc:	20000054 	.word	0x20000054
 800bb00:	0800d6a2 	.word	0x0800d6a2
 800bb04:	0800d6af 	.word	0x0800d6af
 800bb08:	0800d6dd 	.word	0x0800d6dd

0800bb0c <__sflush_r>:
 800bb0c:	898a      	ldrh	r2, [r1, #12]
 800bb0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb12:	4605      	mov	r5, r0
 800bb14:	0710      	lsls	r0, r2, #28
 800bb16:	460c      	mov	r4, r1
 800bb18:	d458      	bmi.n	800bbcc <__sflush_r+0xc0>
 800bb1a:	684b      	ldr	r3, [r1, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	dc05      	bgt.n	800bb2c <__sflush_r+0x20>
 800bb20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	dc02      	bgt.n	800bb2c <__sflush_r+0x20>
 800bb26:	2000      	movs	r0, #0
 800bb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb2e:	2e00      	cmp	r6, #0
 800bb30:	d0f9      	beq.n	800bb26 <__sflush_r+0x1a>
 800bb32:	2300      	movs	r3, #0
 800bb34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb38:	682f      	ldr	r7, [r5, #0]
 800bb3a:	602b      	str	r3, [r5, #0]
 800bb3c:	d032      	beq.n	800bba4 <__sflush_r+0x98>
 800bb3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb40:	89a3      	ldrh	r3, [r4, #12]
 800bb42:	075a      	lsls	r2, r3, #29
 800bb44:	d505      	bpl.n	800bb52 <__sflush_r+0x46>
 800bb46:	6863      	ldr	r3, [r4, #4]
 800bb48:	1ac0      	subs	r0, r0, r3
 800bb4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb4c:	b10b      	cbz	r3, 800bb52 <__sflush_r+0x46>
 800bb4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb50:	1ac0      	subs	r0, r0, r3
 800bb52:	2300      	movs	r3, #0
 800bb54:	4602      	mov	r2, r0
 800bb56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb58:	6a21      	ldr	r1, [r4, #32]
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	47b0      	blx	r6
 800bb5e:	1c43      	adds	r3, r0, #1
 800bb60:	89a3      	ldrh	r3, [r4, #12]
 800bb62:	d106      	bne.n	800bb72 <__sflush_r+0x66>
 800bb64:	6829      	ldr	r1, [r5, #0]
 800bb66:	291d      	cmp	r1, #29
 800bb68:	d82c      	bhi.n	800bbc4 <__sflush_r+0xb8>
 800bb6a:	4a2a      	ldr	r2, [pc, #168]	; (800bc14 <__sflush_r+0x108>)
 800bb6c:	40ca      	lsrs	r2, r1
 800bb6e:	07d6      	lsls	r6, r2, #31
 800bb70:	d528      	bpl.n	800bbc4 <__sflush_r+0xb8>
 800bb72:	2200      	movs	r2, #0
 800bb74:	6062      	str	r2, [r4, #4]
 800bb76:	04d9      	lsls	r1, r3, #19
 800bb78:	6922      	ldr	r2, [r4, #16]
 800bb7a:	6022      	str	r2, [r4, #0]
 800bb7c:	d504      	bpl.n	800bb88 <__sflush_r+0x7c>
 800bb7e:	1c42      	adds	r2, r0, #1
 800bb80:	d101      	bne.n	800bb86 <__sflush_r+0x7a>
 800bb82:	682b      	ldr	r3, [r5, #0]
 800bb84:	b903      	cbnz	r3, 800bb88 <__sflush_r+0x7c>
 800bb86:	6560      	str	r0, [r4, #84]	; 0x54
 800bb88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb8a:	602f      	str	r7, [r5, #0]
 800bb8c:	2900      	cmp	r1, #0
 800bb8e:	d0ca      	beq.n	800bb26 <__sflush_r+0x1a>
 800bb90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb94:	4299      	cmp	r1, r3
 800bb96:	d002      	beq.n	800bb9e <__sflush_r+0x92>
 800bb98:	4628      	mov	r0, r5
 800bb9a:	f000 f9f1 	bl	800bf80 <_free_r>
 800bb9e:	2000      	movs	r0, #0
 800bba0:	6360      	str	r0, [r4, #52]	; 0x34
 800bba2:	e7c1      	b.n	800bb28 <__sflush_r+0x1c>
 800bba4:	6a21      	ldr	r1, [r4, #32]
 800bba6:	2301      	movs	r3, #1
 800bba8:	4628      	mov	r0, r5
 800bbaa:	47b0      	blx	r6
 800bbac:	1c41      	adds	r1, r0, #1
 800bbae:	d1c7      	bne.n	800bb40 <__sflush_r+0x34>
 800bbb0:	682b      	ldr	r3, [r5, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d0c4      	beq.n	800bb40 <__sflush_r+0x34>
 800bbb6:	2b1d      	cmp	r3, #29
 800bbb8:	d001      	beq.n	800bbbe <__sflush_r+0xb2>
 800bbba:	2b16      	cmp	r3, #22
 800bbbc:	d101      	bne.n	800bbc2 <__sflush_r+0xb6>
 800bbbe:	602f      	str	r7, [r5, #0]
 800bbc0:	e7b1      	b.n	800bb26 <__sflush_r+0x1a>
 800bbc2:	89a3      	ldrh	r3, [r4, #12]
 800bbc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbc8:	81a3      	strh	r3, [r4, #12]
 800bbca:	e7ad      	b.n	800bb28 <__sflush_r+0x1c>
 800bbcc:	690f      	ldr	r7, [r1, #16]
 800bbce:	2f00      	cmp	r7, #0
 800bbd0:	d0a9      	beq.n	800bb26 <__sflush_r+0x1a>
 800bbd2:	0793      	lsls	r3, r2, #30
 800bbd4:	680e      	ldr	r6, [r1, #0]
 800bbd6:	bf08      	it	eq
 800bbd8:	694b      	ldreq	r3, [r1, #20]
 800bbda:	600f      	str	r7, [r1, #0]
 800bbdc:	bf18      	it	ne
 800bbde:	2300      	movne	r3, #0
 800bbe0:	eba6 0807 	sub.w	r8, r6, r7
 800bbe4:	608b      	str	r3, [r1, #8]
 800bbe6:	f1b8 0f00 	cmp.w	r8, #0
 800bbea:	dd9c      	ble.n	800bb26 <__sflush_r+0x1a>
 800bbec:	6a21      	ldr	r1, [r4, #32]
 800bbee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bbf0:	4643      	mov	r3, r8
 800bbf2:	463a      	mov	r2, r7
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	47b0      	blx	r6
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	dc06      	bgt.n	800bc0a <__sflush_r+0xfe>
 800bbfc:	89a3      	ldrh	r3, [r4, #12]
 800bbfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc02:	81a3      	strh	r3, [r4, #12]
 800bc04:	f04f 30ff 	mov.w	r0, #4294967295
 800bc08:	e78e      	b.n	800bb28 <__sflush_r+0x1c>
 800bc0a:	4407      	add	r7, r0
 800bc0c:	eba8 0800 	sub.w	r8, r8, r0
 800bc10:	e7e9      	b.n	800bbe6 <__sflush_r+0xda>
 800bc12:	bf00      	nop
 800bc14:	20400001 	.word	0x20400001

0800bc18 <_fflush_r>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	690b      	ldr	r3, [r1, #16]
 800bc1c:	4605      	mov	r5, r0
 800bc1e:	460c      	mov	r4, r1
 800bc20:	b913      	cbnz	r3, 800bc28 <_fflush_r+0x10>
 800bc22:	2500      	movs	r5, #0
 800bc24:	4628      	mov	r0, r5
 800bc26:	bd38      	pop	{r3, r4, r5, pc}
 800bc28:	b118      	cbz	r0, 800bc32 <_fflush_r+0x1a>
 800bc2a:	6983      	ldr	r3, [r0, #24]
 800bc2c:	b90b      	cbnz	r3, 800bc32 <_fflush_r+0x1a>
 800bc2e:	f000 f887 	bl	800bd40 <__sinit>
 800bc32:	4b14      	ldr	r3, [pc, #80]	; (800bc84 <_fflush_r+0x6c>)
 800bc34:	429c      	cmp	r4, r3
 800bc36:	d11b      	bne.n	800bc70 <_fflush_r+0x58>
 800bc38:	686c      	ldr	r4, [r5, #4]
 800bc3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d0ef      	beq.n	800bc22 <_fflush_r+0xa>
 800bc42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc44:	07d0      	lsls	r0, r2, #31
 800bc46:	d404      	bmi.n	800bc52 <_fflush_r+0x3a>
 800bc48:	0599      	lsls	r1, r3, #22
 800bc4a:	d402      	bmi.n	800bc52 <_fflush_r+0x3a>
 800bc4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc4e:	f000 f927 	bl	800bea0 <__retarget_lock_acquire_recursive>
 800bc52:	4628      	mov	r0, r5
 800bc54:	4621      	mov	r1, r4
 800bc56:	f7ff ff59 	bl	800bb0c <__sflush_r>
 800bc5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc5c:	07da      	lsls	r2, r3, #31
 800bc5e:	4605      	mov	r5, r0
 800bc60:	d4e0      	bmi.n	800bc24 <_fflush_r+0xc>
 800bc62:	89a3      	ldrh	r3, [r4, #12]
 800bc64:	059b      	lsls	r3, r3, #22
 800bc66:	d4dd      	bmi.n	800bc24 <_fflush_r+0xc>
 800bc68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc6a:	f000 f91a 	bl	800bea2 <__retarget_lock_release_recursive>
 800bc6e:	e7d9      	b.n	800bc24 <_fflush_r+0xc>
 800bc70:	4b05      	ldr	r3, [pc, #20]	; (800bc88 <_fflush_r+0x70>)
 800bc72:	429c      	cmp	r4, r3
 800bc74:	d101      	bne.n	800bc7a <_fflush_r+0x62>
 800bc76:	68ac      	ldr	r4, [r5, #8]
 800bc78:	e7df      	b.n	800bc3a <_fflush_r+0x22>
 800bc7a:	4b04      	ldr	r3, [pc, #16]	; (800bc8c <_fflush_r+0x74>)
 800bc7c:	429c      	cmp	r4, r3
 800bc7e:	bf08      	it	eq
 800bc80:	68ec      	ldreq	r4, [r5, #12]
 800bc82:	e7da      	b.n	800bc3a <_fflush_r+0x22>
 800bc84:	0800d700 	.word	0x0800d700
 800bc88:	0800d720 	.word	0x0800d720
 800bc8c:	0800d6e0 	.word	0x0800d6e0

0800bc90 <std>:
 800bc90:	2300      	movs	r3, #0
 800bc92:	b510      	push	{r4, lr}
 800bc94:	4604      	mov	r4, r0
 800bc96:	e9c0 3300 	strd	r3, r3, [r0]
 800bc9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc9e:	6083      	str	r3, [r0, #8]
 800bca0:	8181      	strh	r1, [r0, #12]
 800bca2:	6643      	str	r3, [r0, #100]	; 0x64
 800bca4:	81c2      	strh	r2, [r0, #14]
 800bca6:	6183      	str	r3, [r0, #24]
 800bca8:	4619      	mov	r1, r3
 800bcaa:	2208      	movs	r2, #8
 800bcac:	305c      	adds	r0, #92	; 0x5c
 800bcae:	f7ff fd7b 	bl	800b7a8 <memset>
 800bcb2:	4b05      	ldr	r3, [pc, #20]	; (800bcc8 <std+0x38>)
 800bcb4:	6263      	str	r3, [r4, #36]	; 0x24
 800bcb6:	4b05      	ldr	r3, [pc, #20]	; (800bccc <std+0x3c>)
 800bcb8:	62a3      	str	r3, [r4, #40]	; 0x28
 800bcba:	4b05      	ldr	r3, [pc, #20]	; (800bcd0 <std+0x40>)
 800bcbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bcbe:	4b05      	ldr	r3, [pc, #20]	; (800bcd4 <std+0x44>)
 800bcc0:	6224      	str	r4, [r4, #32]
 800bcc2:	6323      	str	r3, [r4, #48]	; 0x30
 800bcc4:	bd10      	pop	{r4, pc}
 800bcc6:	bf00      	nop
 800bcc8:	0800c73d 	.word	0x0800c73d
 800bccc:	0800c75f 	.word	0x0800c75f
 800bcd0:	0800c797 	.word	0x0800c797
 800bcd4:	0800c7bb 	.word	0x0800c7bb

0800bcd8 <_cleanup_r>:
 800bcd8:	4901      	ldr	r1, [pc, #4]	; (800bce0 <_cleanup_r+0x8>)
 800bcda:	f000 b8c1 	b.w	800be60 <_fwalk_reent>
 800bcde:	bf00      	nop
 800bce0:	0800bc19 	.word	0x0800bc19

0800bce4 <__sfmoreglue>:
 800bce4:	b570      	push	{r4, r5, r6, lr}
 800bce6:	2268      	movs	r2, #104	; 0x68
 800bce8:	1e4d      	subs	r5, r1, #1
 800bcea:	4355      	muls	r5, r2
 800bcec:	460e      	mov	r6, r1
 800bcee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bcf2:	f000 f9b1 	bl	800c058 <_malloc_r>
 800bcf6:	4604      	mov	r4, r0
 800bcf8:	b140      	cbz	r0, 800bd0c <__sfmoreglue+0x28>
 800bcfa:	2100      	movs	r1, #0
 800bcfc:	e9c0 1600 	strd	r1, r6, [r0]
 800bd00:	300c      	adds	r0, #12
 800bd02:	60a0      	str	r0, [r4, #8]
 800bd04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bd08:	f7ff fd4e 	bl	800b7a8 <memset>
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	bd70      	pop	{r4, r5, r6, pc}

0800bd10 <__sfp_lock_acquire>:
 800bd10:	4801      	ldr	r0, [pc, #4]	; (800bd18 <__sfp_lock_acquire+0x8>)
 800bd12:	f000 b8c5 	b.w	800bea0 <__retarget_lock_acquire_recursive>
 800bd16:	bf00      	nop
 800bd18:	200015f5 	.word	0x200015f5

0800bd1c <__sfp_lock_release>:
 800bd1c:	4801      	ldr	r0, [pc, #4]	; (800bd24 <__sfp_lock_release+0x8>)
 800bd1e:	f000 b8c0 	b.w	800bea2 <__retarget_lock_release_recursive>
 800bd22:	bf00      	nop
 800bd24:	200015f5 	.word	0x200015f5

0800bd28 <__sinit_lock_acquire>:
 800bd28:	4801      	ldr	r0, [pc, #4]	; (800bd30 <__sinit_lock_acquire+0x8>)
 800bd2a:	f000 b8b9 	b.w	800bea0 <__retarget_lock_acquire_recursive>
 800bd2e:	bf00      	nop
 800bd30:	200015f6 	.word	0x200015f6

0800bd34 <__sinit_lock_release>:
 800bd34:	4801      	ldr	r0, [pc, #4]	; (800bd3c <__sinit_lock_release+0x8>)
 800bd36:	f000 b8b4 	b.w	800bea2 <__retarget_lock_release_recursive>
 800bd3a:	bf00      	nop
 800bd3c:	200015f6 	.word	0x200015f6

0800bd40 <__sinit>:
 800bd40:	b510      	push	{r4, lr}
 800bd42:	4604      	mov	r4, r0
 800bd44:	f7ff fff0 	bl	800bd28 <__sinit_lock_acquire>
 800bd48:	69a3      	ldr	r3, [r4, #24]
 800bd4a:	b11b      	cbz	r3, 800bd54 <__sinit+0x14>
 800bd4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd50:	f7ff bff0 	b.w	800bd34 <__sinit_lock_release>
 800bd54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bd58:	6523      	str	r3, [r4, #80]	; 0x50
 800bd5a:	4b13      	ldr	r3, [pc, #76]	; (800bda8 <__sinit+0x68>)
 800bd5c:	4a13      	ldr	r2, [pc, #76]	; (800bdac <__sinit+0x6c>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	62a2      	str	r2, [r4, #40]	; 0x28
 800bd62:	42a3      	cmp	r3, r4
 800bd64:	bf04      	itt	eq
 800bd66:	2301      	moveq	r3, #1
 800bd68:	61a3      	streq	r3, [r4, #24]
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f000 f820 	bl	800bdb0 <__sfp>
 800bd70:	6060      	str	r0, [r4, #4]
 800bd72:	4620      	mov	r0, r4
 800bd74:	f000 f81c 	bl	800bdb0 <__sfp>
 800bd78:	60a0      	str	r0, [r4, #8]
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f000 f818 	bl	800bdb0 <__sfp>
 800bd80:	2200      	movs	r2, #0
 800bd82:	60e0      	str	r0, [r4, #12]
 800bd84:	2104      	movs	r1, #4
 800bd86:	6860      	ldr	r0, [r4, #4]
 800bd88:	f7ff ff82 	bl	800bc90 <std>
 800bd8c:	68a0      	ldr	r0, [r4, #8]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	2109      	movs	r1, #9
 800bd92:	f7ff ff7d 	bl	800bc90 <std>
 800bd96:	68e0      	ldr	r0, [r4, #12]
 800bd98:	2202      	movs	r2, #2
 800bd9a:	2112      	movs	r1, #18
 800bd9c:	f7ff ff78 	bl	800bc90 <std>
 800bda0:	2301      	movs	r3, #1
 800bda2:	61a3      	str	r3, [r4, #24]
 800bda4:	e7d2      	b.n	800bd4c <__sinit+0xc>
 800bda6:	bf00      	nop
 800bda8:	0800d62c 	.word	0x0800d62c
 800bdac:	0800bcd9 	.word	0x0800bcd9

0800bdb0 <__sfp>:
 800bdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb2:	4607      	mov	r7, r0
 800bdb4:	f7ff ffac 	bl	800bd10 <__sfp_lock_acquire>
 800bdb8:	4b1e      	ldr	r3, [pc, #120]	; (800be34 <__sfp+0x84>)
 800bdba:	681e      	ldr	r6, [r3, #0]
 800bdbc:	69b3      	ldr	r3, [r6, #24]
 800bdbe:	b913      	cbnz	r3, 800bdc6 <__sfp+0x16>
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	f7ff ffbd 	bl	800bd40 <__sinit>
 800bdc6:	3648      	adds	r6, #72	; 0x48
 800bdc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	d503      	bpl.n	800bdd8 <__sfp+0x28>
 800bdd0:	6833      	ldr	r3, [r6, #0]
 800bdd2:	b30b      	cbz	r3, 800be18 <__sfp+0x68>
 800bdd4:	6836      	ldr	r6, [r6, #0]
 800bdd6:	e7f7      	b.n	800bdc8 <__sfp+0x18>
 800bdd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bddc:	b9d5      	cbnz	r5, 800be14 <__sfp+0x64>
 800bdde:	4b16      	ldr	r3, [pc, #88]	; (800be38 <__sfp+0x88>)
 800bde0:	60e3      	str	r3, [r4, #12]
 800bde2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bde6:	6665      	str	r5, [r4, #100]	; 0x64
 800bde8:	f000 f859 	bl	800be9e <__retarget_lock_init_recursive>
 800bdec:	f7ff ff96 	bl	800bd1c <__sfp_lock_release>
 800bdf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bdf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bdf8:	6025      	str	r5, [r4, #0]
 800bdfa:	61a5      	str	r5, [r4, #24]
 800bdfc:	2208      	movs	r2, #8
 800bdfe:	4629      	mov	r1, r5
 800be00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be04:	f7ff fcd0 	bl	800b7a8 <memset>
 800be08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be10:	4620      	mov	r0, r4
 800be12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be14:	3468      	adds	r4, #104	; 0x68
 800be16:	e7d9      	b.n	800bdcc <__sfp+0x1c>
 800be18:	2104      	movs	r1, #4
 800be1a:	4638      	mov	r0, r7
 800be1c:	f7ff ff62 	bl	800bce4 <__sfmoreglue>
 800be20:	4604      	mov	r4, r0
 800be22:	6030      	str	r0, [r6, #0]
 800be24:	2800      	cmp	r0, #0
 800be26:	d1d5      	bne.n	800bdd4 <__sfp+0x24>
 800be28:	f7ff ff78 	bl	800bd1c <__sfp_lock_release>
 800be2c:	230c      	movs	r3, #12
 800be2e:	603b      	str	r3, [r7, #0]
 800be30:	e7ee      	b.n	800be10 <__sfp+0x60>
 800be32:	bf00      	nop
 800be34:	0800d62c 	.word	0x0800d62c
 800be38:	ffff0001 	.word	0xffff0001

0800be3c <fiprintf>:
 800be3c:	b40e      	push	{r1, r2, r3}
 800be3e:	b503      	push	{r0, r1, lr}
 800be40:	4601      	mov	r1, r0
 800be42:	ab03      	add	r3, sp, #12
 800be44:	4805      	ldr	r0, [pc, #20]	; (800be5c <fiprintf+0x20>)
 800be46:	f853 2b04 	ldr.w	r2, [r3], #4
 800be4a:	6800      	ldr	r0, [r0, #0]
 800be4c:	9301      	str	r3, [sp, #4]
 800be4e:	f000 f9a1 	bl	800c194 <_vfiprintf_r>
 800be52:	b002      	add	sp, #8
 800be54:	f85d eb04 	ldr.w	lr, [sp], #4
 800be58:	b003      	add	sp, #12
 800be5a:	4770      	bx	lr
 800be5c:	20000054 	.word	0x20000054

0800be60 <_fwalk_reent>:
 800be60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be64:	4606      	mov	r6, r0
 800be66:	4688      	mov	r8, r1
 800be68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800be6c:	2700      	movs	r7, #0
 800be6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be72:	f1b9 0901 	subs.w	r9, r9, #1
 800be76:	d505      	bpl.n	800be84 <_fwalk_reent+0x24>
 800be78:	6824      	ldr	r4, [r4, #0]
 800be7a:	2c00      	cmp	r4, #0
 800be7c:	d1f7      	bne.n	800be6e <_fwalk_reent+0xe>
 800be7e:	4638      	mov	r0, r7
 800be80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be84:	89ab      	ldrh	r3, [r5, #12]
 800be86:	2b01      	cmp	r3, #1
 800be88:	d907      	bls.n	800be9a <_fwalk_reent+0x3a>
 800be8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be8e:	3301      	adds	r3, #1
 800be90:	d003      	beq.n	800be9a <_fwalk_reent+0x3a>
 800be92:	4629      	mov	r1, r5
 800be94:	4630      	mov	r0, r6
 800be96:	47c0      	blx	r8
 800be98:	4307      	orrs	r7, r0
 800be9a:	3568      	adds	r5, #104	; 0x68
 800be9c:	e7e9      	b.n	800be72 <_fwalk_reent+0x12>

0800be9e <__retarget_lock_init_recursive>:
 800be9e:	4770      	bx	lr

0800bea0 <__retarget_lock_acquire_recursive>:
 800bea0:	4770      	bx	lr

0800bea2 <__retarget_lock_release_recursive>:
 800bea2:	4770      	bx	lr

0800bea4 <__swhatbuf_r>:
 800bea4:	b570      	push	{r4, r5, r6, lr}
 800bea6:	460e      	mov	r6, r1
 800bea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beac:	2900      	cmp	r1, #0
 800beae:	b096      	sub	sp, #88	; 0x58
 800beb0:	4614      	mov	r4, r2
 800beb2:	461d      	mov	r5, r3
 800beb4:	da08      	bge.n	800bec8 <__swhatbuf_r+0x24>
 800beb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800beba:	2200      	movs	r2, #0
 800bebc:	602a      	str	r2, [r5, #0]
 800bebe:	061a      	lsls	r2, r3, #24
 800bec0:	d410      	bmi.n	800bee4 <__swhatbuf_r+0x40>
 800bec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bec6:	e00e      	b.n	800bee6 <__swhatbuf_r+0x42>
 800bec8:	466a      	mov	r2, sp
 800beca:	f000 fca5 	bl	800c818 <_fstat_r>
 800bece:	2800      	cmp	r0, #0
 800bed0:	dbf1      	blt.n	800beb6 <__swhatbuf_r+0x12>
 800bed2:	9a01      	ldr	r2, [sp, #4]
 800bed4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bed8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bedc:	425a      	negs	r2, r3
 800bede:	415a      	adcs	r2, r3
 800bee0:	602a      	str	r2, [r5, #0]
 800bee2:	e7ee      	b.n	800bec2 <__swhatbuf_r+0x1e>
 800bee4:	2340      	movs	r3, #64	; 0x40
 800bee6:	2000      	movs	r0, #0
 800bee8:	6023      	str	r3, [r4, #0]
 800beea:	b016      	add	sp, #88	; 0x58
 800beec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bef0 <__smakebuf_r>:
 800bef0:	898b      	ldrh	r3, [r1, #12]
 800bef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bef4:	079d      	lsls	r5, r3, #30
 800bef6:	4606      	mov	r6, r0
 800bef8:	460c      	mov	r4, r1
 800befa:	d507      	bpl.n	800bf0c <__smakebuf_r+0x1c>
 800befc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	6123      	str	r3, [r4, #16]
 800bf04:	2301      	movs	r3, #1
 800bf06:	6163      	str	r3, [r4, #20]
 800bf08:	b002      	add	sp, #8
 800bf0a:	bd70      	pop	{r4, r5, r6, pc}
 800bf0c:	ab01      	add	r3, sp, #4
 800bf0e:	466a      	mov	r2, sp
 800bf10:	f7ff ffc8 	bl	800bea4 <__swhatbuf_r>
 800bf14:	9900      	ldr	r1, [sp, #0]
 800bf16:	4605      	mov	r5, r0
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f000 f89d 	bl	800c058 <_malloc_r>
 800bf1e:	b948      	cbnz	r0, 800bf34 <__smakebuf_r+0x44>
 800bf20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf24:	059a      	lsls	r2, r3, #22
 800bf26:	d4ef      	bmi.n	800bf08 <__smakebuf_r+0x18>
 800bf28:	f023 0303 	bic.w	r3, r3, #3
 800bf2c:	f043 0302 	orr.w	r3, r3, #2
 800bf30:	81a3      	strh	r3, [r4, #12]
 800bf32:	e7e3      	b.n	800befc <__smakebuf_r+0xc>
 800bf34:	4b0d      	ldr	r3, [pc, #52]	; (800bf6c <__smakebuf_r+0x7c>)
 800bf36:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf38:	89a3      	ldrh	r3, [r4, #12]
 800bf3a:	6020      	str	r0, [r4, #0]
 800bf3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf40:	81a3      	strh	r3, [r4, #12]
 800bf42:	9b00      	ldr	r3, [sp, #0]
 800bf44:	6163      	str	r3, [r4, #20]
 800bf46:	9b01      	ldr	r3, [sp, #4]
 800bf48:	6120      	str	r0, [r4, #16]
 800bf4a:	b15b      	cbz	r3, 800bf64 <__smakebuf_r+0x74>
 800bf4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf50:	4630      	mov	r0, r6
 800bf52:	f000 fc73 	bl	800c83c <_isatty_r>
 800bf56:	b128      	cbz	r0, 800bf64 <__smakebuf_r+0x74>
 800bf58:	89a3      	ldrh	r3, [r4, #12]
 800bf5a:	f023 0303 	bic.w	r3, r3, #3
 800bf5e:	f043 0301 	orr.w	r3, r3, #1
 800bf62:	81a3      	strh	r3, [r4, #12]
 800bf64:	89a0      	ldrh	r0, [r4, #12]
 800bf66:	4305      	orrs	r5, r0
 800bf68:	81a5      	strh	r5, [r4, #12]
 800bf6a:	e7cd      	b.n	800bf08 <__smakebuf_r+0x18>
 800bf6c:	0800bcd9 	.word	0x0800bcd9

0800bf70 <malloc>:
 800bf70:	4b02      	ldr	r3, [pc, #8]	; (800bf7c <malloc+0xc>)
 800bf72:	4601      	mov	r1, r0
 800bf74:	6818      	ldr	r0, [r3, #0]
 800bf76:	f000 b86f 	b.w	800c058 <_malloc_r>
 800bf7a:	bf00      	nop
 800bf7c:	20000054 	.word	0x20000054

0800bf80 <_free_r>:
 800bf80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf82:	2900      	cmp	r1, #0
 800bf84:	d044      	beq.n	800c010 <_free_r+0x90>
 800bf86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf8a:	9001      	str	r0, [sp, #4]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	f1a1 0404 	sub.w	r4, r1, #4
 800bf92:	bfb8      	it	lt
 800bf94:	18e4      	addlt	r4, r4, r3
 800bf96:	f000 fc73 	bl	800c880 <__malloc_lock>
 800bf9a:	4a1e      	ldr	r2, [pc, #120]	; (800c014 <_free_r+0x94>)
 800bf9c:	9801      	ldr	r0, [sp, #4]
 800bf9e:	6813      	ldr	r3, [r2, #0]
 800bfa0:	b933      	cbnz	r3, 800bfb0 <_free_r+0x30>
 800bfa2:	6063      	str	r3, [r4, #4]
 800bfa4:	6014      	str	r4, [r2, #0]
 800bfa6:	b003      	add	sp, #12
 800bfa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfac:	f000 bc6e 	b.w	800c88c <__malloc_unlock>
 800bfb0:	42a3      	cmp	r3, r4
 800bfb2:	d908      	bls.n	800bfc6 <_free_r+0x46>
 800bfb4:	6825      	ldr	r5, [r4, #0]
 800bfb6:	1961      	adds	r1, r4, r5
 800bfb8:	428b      	cmp	r3, r1
 800bfba:	bf01      	itttt	eq
 800bfbc:	6819      	ldreq	r1, [r3, #0]
 800bfbe:	685b      	ldreq	r3, [r3, #4]
 800bfc0:	1949      	addeq	r1, r1, r5
 800bfc2:	6021      	streq	r1, [r4, #0]
 800bfc4:	e7ed      	b.n	800bfa2 <_free_r+0x22>
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	b10b      	cbz	r3, 800bfd0 <_free_r+0x50>
 800bfcc:	42a3      	cmp	r3, r4
 800bfce:	d9fa      	bls.n	800bfc6 <_free_r+0x46>
 800bfd0:	6811      	ldr	r1, [r2, #0]
 800bfd2:	1855      	adds	r5, r2, r1
 800bfd4:	42a5      	cmp	r5, r4
 800bfd6:	d10b      	bne.n	800bff0 <_free_r+0x70>
 800bfd8:	6824      	ldr	r4, [r4, #0]
 800bfda:	4421      	add	r1, r4
 800bfdc:	1854      	adds	r4, r2, r1
 800bfde:	42a3      	cmp	r3, r4
 800bfe0:	6011      	str	r1, [r2, #0]
 800bfe2:	d1e0      	bne.n	800bfa6 <_free_r+0x26>
 800bfe4:	681c      	ldr	r4, [r3, #0]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	6053      	str	r3, [r2, #4]
 800bfea:	4421      	add	r1, r4
 800bfec:	6011      	str	r1, [r2, #0]
 800bfee:	e7da      	b.n	800bfa6 <_free_r+0x26>
 800bff0:	d902      	bls.n	800bff8 <_free_r+0x78>
 800bff2:	230c      	movs	r3, #12
 800bff4:	6003      	str	r3, [r0, #0]
 800bff6:	e7d6      	b.n	800bfa6 <_free_r+0x26>
 800bff8:	6825      	ldr	r5, [r4, #0]
 800bffa:	1961      	adds	r1, r4, r5
 800bffc:	428b      	cmp	r3, r1
 800bffe:	bf04      	itt	eq
 800c000:	6819      	ldreq	r1, [r3, #0]
 800c002:	685b      	ldreq	r3, [r3, #4]
 800c004:	6063      	str	r3, [r4, #4]
 800c006:	bf04      	itt	eq
 800c008:	1949      	addeq	r1, r1, r5
 800c00a:	6021      	streq	r1, [r4, #0]
 800c00c:	6054      	str	r4, [r2, #4]
 800c00e:	e7ca      	b.n	800bfa6 <_free_r+0x26>
 800c010:	b003      	add	sp, #12
 800c012:	bd30      	pop	{r4, r5, pc}
 800c014:	200015f8 	.word	0x200015f8

0800c018 <sbrk_aligned>:
 800c018:	b570      	push	{r4, r5, r6, lr}
 800c01a:	4e0e      	ldr	r6, [pc, #56]	; (800c054 <sbrk_aligned+0x3c>)
 800c01c:	460c      	mov	r4, r1
 800c01e:	6831      	ldr	r1, [r6, #0]
 800c020:	4605      	mov	r5, r0
 800c022:	b911      	cbnz	r1, 800c02a <sbrk_aligned+0x12>
 800c024:	f000 fb7a 	bl	800c71c <_sbrk_r>
 800c028:	6030      	str	r0, [r6, #0]
 800c02a:	4621      	mov	r1, r4
 800c02c:	4628      	mov	r0, r5
 800c02e:	f000 fb75 	bl	800c71c <_sbrk_r>
 800c032:	1c43      	adds	r3, r0, #1
 800c034:	d00a      	beq.n	800c04c <sbrk_aligned+0x34>
 800c036:	1cc4      	adds	r4, r0, #3
 800c038:	f024 0403 	bic.w	r4, r4, #3
 800c03c:	42a0      	cmp	r0, r4
 800c03e:	d007      	beq.n	800c050 <sbrk_aligned+0x38>
 800c040:	1a21      	subs	r1, r4, r0
 800c042:	4628      	mov	r0, r5
 800c044:	f000 fb6a 	bl	800c71c <_sbrk_r>
 800c048:	3001      	adds	r0, #1
 800c04a:	d101      	bne.n	800c050 <sbrk_aligned+0x38>
 800c04c:	f04f 34ff 	mov.w	r4, #4294967295
 800c050:	4620      	mov	r0, r4
 800c052:	bd70      	pop	{r4, r5, r6, pc}
 800c054:	200015fc 	.word	0x200015fc

0800c058 <_malloc_r>:
 800c058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c05c:	1ccd      	adds	r5, r1, #3
 800c05e:	f025 0503 	bic.w	r5, r5, #3
 800c062:	3508      	adds	r5, #8
 800c064:	2d0c      	cmp	r5, #12
 800c066:	bf38      	it	cc
 800c068:	250c      	movcc	r5, #12
 800c06a:	2d00      	cmp	r5, #0
 800c06c:	4607      	mov	r7, r0
 800c06e:	db01      	blt.n	800c074 <_malloc_r+0x1c>
 800c070:	42a9      	cmp	r1, r5
 800c072:	d905      	bls.n	800c080 <_malloc_r+0x28>
 800c074:	230c      	movs	r3, #12
 800c076:	603b      	str	r3, [r7, #0]
 800c078:	2600      	movs	r6, #0
 800c07a:	4630      	mov	r0, r6
 800c07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c080:	4e2e      	ldr	r6, [pc, #184]	; (800c13c <_malloc_r+0xe4>)
 800c082:	f000 fbfd 	bl	800c880 <__malloc_lock>
 800c086:	6833      	ldr	r3, [r6, #0]
 800c088:	461c      	mov	r4, r3
 800c08a:	bb34      	cbnz	r4, 800c0da <_malloc_r+0x82>
 800c08c:	4629      	mov	r1, r5
 800c08e:	4638      	mov	r0, r7
 800c090:	f7ff ffc2 	bl	800c018 <sbrk_aligned>
 800c094:	1c43      	adds	r3, r0, #1
 800c096:	4604      	mov	r4, r0
 800c098:	d14d      	bne.n	800c136 <_malloc_r+0xde>
 800c09a:	6834      	ldr	r4, [r6, #0]
 800c09c:	4626      	mov	r6, r4
 800c09e:	2e00      	cmp	r6, #0
 800c0a0:	d140      	bne.n	800c124 <_malloc_r+0xcc>
 800c0a2:	6823      	ldr	r3, [r4, #0]
 800c0a4:	4631      	mov	r1, r6
 800c0a6:	4638      	mov	r0, r7
 800c0a8:	eb04 0803 	add.w	r8, r4, r3
 800c0ac:	f000 fb36 	bl	800c71c <_sbrk_r>
 800c0b0:	4580      	cmp	r8, r0
 800c0b2:	d13a      	bne.n	800c12a <_malloc_r+0xd2>
 800c0b4:	6821      	ldr	r1, [r4, #0]
 800c0b6:	3503      	adds	r5, #3
 800c0b8:	1a6d      	subs	r5, r5, r1
 800c0ba:	f025 0503 	bic.w	r5, r5, #3
 800c0be:	3508      	adds	r5, #8
 800c0c0:	2d0c      	cmp	r5, #12
 800c0c2:	bf38      	it	cc
 800c0c4:	250c      	movcc	r5, #12
 800c0c6:	4629      	mov	r1, r5
 800c0c8:	4638      	mov	r0, r7
 800c0ca:	f7ff ffa5 	bl	800c018 <sbrk_aligned>
 800c0ce:	3001      	adds	r0, #1
 800c0d0:	d02b      	beq.n	800c12a <_malloc_r+0xd2>
 800c0d2:	6823      	ldr	r3, [r4, #0]
 800c0d4:	442b      	add	r3, r5
 800c0d6:	6023      	str	r3, [r4, #0]
 800c0d8:	e00e      	b.n	800c0f8 <_malloc_r+0xa0>
 800c0da:	6822      	ldr	r2, [r4, #0]
 800c0dc:	1b52      	subs	r2, r2, r5
 800c0de:	d41e      	bmi.n	800c11e <_malloc_r+0xc6>
 800c0e0:	2a0b      	cmp	r2, #11
 800c0e2:	d916      	bls.n	800c112 <_malloc_r+0xba>
 800c0e4:	1961      	adds	r1, r4, r5
 800c0e6:	42a3      	cmp	r3, r4
 800c0e8:	6025      	str	r5, [r4, #0]
 800c0ea:	bf18      	it	ne
 800c0ec:	6059      	strne	r1, [r3, #4]
 800c0ee:	6863      	ldr	r3, [r4, #4]
 800c0f0:	bf08      	it	eq
 800c0f2:	6031      	streq	r1, [r6, #0]
 800c0f4:	5162      	str	r2, [r4, r5]
 800c0f6:	604b      	str	r3, [r1, #4]
 800c0f8:	4638      	mov	r0, r7
 800c0fa:	f104 060b 	add.w	r6, r4, #11
 800c0fe:	f000 fbc5 	bl	800c88c <__malloc_unlock>
 800c102:	f026 0607 	bic.w	r6, r6, #7
 800c106:	1d23      	adds	r3, r4, #4
 800c108:	1af2      	subs	r2, r6, r3
 800c10a:	d0b6      	beq.n	800c07a <_malloc_r+0x22>
 800c10c:	1b9b      	subs	r3, r3, r6
 800c10e:	50a3      	str	r3, [r4, r2]
 800c110:	e7b3      	b.n	800c07a <_malloc_r+0x22>
 800c112:	6862      	ldr	r2, [r4, #4]
 800c114:	42a3      	cmp	r3, r4
 800c116:	bf0c      	ite	eq
 800c118:	6032      	streq	r2, [r6, #0]
 800c11a:	605a      	strne	r2, [r3, #4]
 800c11c:	e7ec      	b.n	800c0f8 <_malloc_r+0xa0>
 800c11e:	4623      	mov	r3, r4
 800c120:	6864      	ldr	r4, [r4, #4]
 800c122:	e7b2      	b.n	800c08a <_malloc_r+0x32>
 800c124:	4634      	mov	r4, r6
 800c126:	6876      	ldr	r6, [r6, #4]
 800c128:	e7b9      	b.n	800c09e <_malloc_r+0x46>
 800c12a:	230c      	movs	r3, #12
 800c12c:	603b      	str	r3, [r7, #0]
 800c12e:	4638      	mov	r0, r7
 800c130:	f000 fbac 	bl	800c88c <__malloc_unlock>
 800c134:	e7a1      	b.n	800c07a <_malloc_r+0x22>
 800c136:	6025      	str	r5, [r4, #0]
 800c138:	e7de      	b.n	800c0f8 <_malloc_r+0xa0>
 800c13a:	bf00      	nop
 800c13c:	200015f8 	.word	0x200015f8

0800c140 <__sfputc_r>:
 800c140:	6893      	ldr	r3, [r2, #8]
 800c142:	3b01      	subs	r3, #1
 800c144:	2b00      	cmp	r3, #0
 800c146:	b410      	push	{r4}
 800c148:	6093      	str	r3, [r2, #8]
 800c14a:	da08      	bge.n	800c15e <__sfputc_r+0x1e>
 800c14c:	6994      	ldr	r4, [r2, #24]
 800c14e:	42a3      	cmp	r3, r4
 800c150:	db01      	blt.n	800c156 <__sfputc_r+0x16>
 800c152:	290a      	cmp	r1, #10
 800c154:	d103      	bne.n	800c15e <__sfputc_r+0x1e>
 800c156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c15a:	f7ff bbf9 	b.w	800b950 <__swbuf_r>
 800c15e:	6813      	ldr	r3, [r2, #0]
 800c160:	1c58      	adds	r0, r3, #1
 800c162:	6010      	str	r0, [r2, #0]
 800c164:	7019      	strb	r1, [r3, #0]
 800c166:	4608      	mov	r0, r1
 800c168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c16c:	4770      	bx	lr

0800c16e <__sfputs_r>:
 800c16e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c170:	4606      	mov	r6, r0
 800c172:	460f      	mov	r7, r1
 800c174:	4614      	mov	r4, r2
 800c176:	18d5      	adds	r5, r2, r3
 800c178:	42ac      	cmp	r4, r5
 800c17a:	d101      	bne.n	800c180 <__sfputs_r+0x12>
 800c17c:	2000      	movs	r0, #0
 800c17e:	e007      	b.n	800c190 <__sfputs_r+0x22>
 800c180:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c184:	463a      	mov	r2, r7
 800c186:	4630      	mov	r0, r6
 800c188:	f7ff ffda 	bl	800c140 <__sfputc_r>
 800c18c:	1c43      	adds	r3, r0, #1
 800c18e:	d1f3      	bne.n	800c178 <__sfputs_r+0xa>
 800c190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c194 <_vfiprintf_r>:
 800c194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c198:	460d      	mov	r5, r1
 800c19a:	b09d      	sub	sp, #116	; 0x74
 800c19c:	4614      	mov	r4, r2
 800c19e:	4698      	mov	r8, r3
 800c1a0:	4606      	mov	r6, r0
 800c1a2:	b118      	cbz	r0, 800c1ac <_vfiprintf_r+0x18>
 800c1a4:	6983      	ldr	r3, [r0, #24]
 800c1a6:	b90b      	cbnz	r3, 800c1ac <_vfiprintf_r+0x18>
 800c1a8:	f7ff fdca 	bl	800bd40 <__sinit>
 800c1ac:	4b89      	ldr	r3, [pc, #548]	; (800c3d4 <_vfiprintf_r+0x240>)
 800c1ae:	429d      	cmp	r5, r3
 800c1b0:	d11b      	bne.n	800c1ea <_vfiprintf_r+0x56>
 800c1b2:	6875      	ldr	r5, [r6, #4]
 800c1b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1b6:	07d9      	lsls	r1, r3, #31
 800c1b8:	d405      	bmi.n	800c1c6 <_vfiprintf_r+0x32>
 800c1ba:	89ab      	ldrh	r3, [r5, #12]
 800c1bc:	059a      	lsls	r2, r3, #22
 800c1be:	d402      	bmi.n	800c1c6 <_vfiprintf_r+0x32>
 800c1c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1c2:	f7ff fe6d 	bl	800bea0 <__retarget_lock_acquire_recursive>
 800c1c6:	89ab      	ldrh	r3, [r5, #12]
 800c1c8:	071b      	lsls	r3, r3, #28
 800c1ca:	d501      	bpl.n	800c1d0 <_vfiprintf_r+0x3c>
 800c1cc:	692b      	ldr	r3, [r5, #16]
 800c1ce:	b9eb      	cbnz	r3, 800c20c <_vfiprintf_r+0x78>
 800c1d0:	4629      	mov	r1, r5
 800c1d2:	4630      	mov	r0, r6
 800c1d4:	f7ff fc0e 	bl	800b9f4 <__swsetup_r>
 800c1d8:	b1c0      	cbz	r0, 800c20c <_vfiprintf_r+0x78>
 800c1da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1dc:	07dc      	lsls	r4, r3, #31
 800c1de:	d50e      	bpl.n	800c1fe <_vfiprintf_r+0x6a>
 800c1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e4:	b01d      	add	sp, #116	; 0x74
 800c1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ea:	4b7b      	ldr	r3, [pc, #492]	; (800c3d8 <_vfiprintf_r+0x244>)
 800c1ec:	429d      	cmp	r5, r3
 800c1ee:	d101      	bne.n	800c1f4 <_vfiprintf_r+0x60>
 800c1f0:	68b5      	ldr	r5, [r6, #8]
 800c1f2:	e7df      	b.n	800c1b4 <_vfiprintf_r+0x20>
 800c1f4:	4b79      	ldr	r3, [pc, #484]	; (800c3dc <_vfiprintf_r+0x248>)
 800c1f6:	429d      	cmp	r5, r3
 800c1f8:	bf08      	it	eq
 800c1fa:	68f5      	ldreq	r5, [r6, #12]
 800c1fc:	e7da      	b.n	800c1b4 <_vfiprintf_r+0x20>
 800c1fe:	89ab      	ldrh	r3, [r5, #12]
 800c200:	0598      	lsls	r0, r3, #22
 800c202:	d4ed      	bmi.n	800c1e0 <_vfiprintf_r+0x4c>
 800c204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c206:	f7ff fe4c 	bl	800bea2 <__retarget_lock_release_recursive>
 800c20a:	e7e9      	b.n	800c1e0 <_vfiprintf_r+0x4c>
 800c20c:	2300      	movs	r3, #0
 800c20e:	9309      	str	r3, [sp, #36]	; 0x24
 800c210:	2320      	movs	r3, #32
 800c212:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c216:	f8cd 800c 	str.w	r8, [sp, #12]
 800c21a:	2330      	movs	r3, #48	; 0x30
 800c21c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c3e0 <_vfiprintf_r+0x24c>
 800c220:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c224:	f04f 0901 	mov.w	r9, #1
 800c228:	4623      	mov	r3, r4
 800c22a:	469a      	mov	sl, r3
 800c22c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c230:	b10a      	cbz	r2, 800c236 <_vfiprintf_r+0xa2>
 800c232:	2a25      	cmp	r2, #37	; 0x25
 800c234:	d1f9      	bne.n	800c22a <_vfiprintf_r+0x96>
 800c236:	ebba 0b04 	subs.w	fp, sl, r4
 800c23a:	d00b      	beq.n	800c254 <_vfiprintf_r+0xc0>
 800c23c:	465b      	mov	r3, fp
 800c23e:	4622      	mov	r2, r4
 800c240:	4629      	mov	r1, r5
 800c242:	4630      	mov	r0, r6
 800c244:	f7ff ff93 	bl	800c16e <__sfputs_r>
 800c248:	3001      	adds	r0, #1
 800c24a:	f000 80aa 	beq.w	800c3a2 <_vfiprintf_r+0x20e>
 800c24e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c250:	445a      	add	r2, fp
 800c252:	9209      	str	r2, [sp, #36]	; 0x24
 800c254:	f89a 3000 	ldrb.w	r3, [sl]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	f000 80a2 	beq.w	800c3a2 <_vfiprintf_r+0x20e>
 800c25e:	2300      	movs	r3, #0
 800c260:	f04f 32ff 	mov.w	r2, #4294967295
 800c264:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c268:	f10a 0a01 	add.w	sl, sl, #1
 800c26c:	9304      	str	r3, [sp, #16]
 800c26e:	9307      	str	r3, [sp, #28]
 800c270:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c274:	931a      	str	r3, [sp, #104]	; 0x68
 800c276:	4654      	mov	r4, sl
 800c278:	2205      	movs	r2, #5
 800c27a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c27e:	4858      	ldr	r0, [pc, #352]	; (800c3e0 <_vfiprintf_r+0x24c>)
 800c280:	f7f3 ff86 	bl	8000190 <memchr>
 800c284:	9a04      	ldr	r2, [sp, #16]
 800c286:	b9d8      	cbnz	r0, 800c2c0 <_vfiprintf_r+0x12c>
 800c288:	06d1      	lsls	r1, r2, #27
 800c28a:	bf44      	itt	mi
 800c28c:	2320      	movmi	r3, #32
 800c28e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c292:	0713      	lsls	r3, r2, #28
 800c294:	bf44      	itt	mi
 800c296:	232b      	movmi	r3, #43	; 0x2b
 800c298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c29c:	f89a 3000 	ldrb.w	r3, [sl]
 800c2a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c2a2:	d015      	beq.n	800c2d0 <_vfiprintf_r+0x13c>
 800c2a4:	9a07      	ldr	r2, [sp, #28]
 800c2a6:	4654      	mov	r4, sl
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	f04f 0c0a 	mov.w	ip, #10
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2b4:	3b30      	subs	r3, #48	; 0x30
 800c2b6:	2b09      	cmp	r3, #9
 800c2b8:	d94e      	bls.n	800c358 <_vfiprintf_r+0x1c4>
 800c2ba:	b1b0      	cbz	r0, 800c2ea <_vfiprintf_r+0x156>
 800c2bc:	9207      	str	r2, [sp, #28]
 800c2be:	e014      	b.n	800c2ea <_vfiprintf_r+0x156>
 800c2c0:	eba0 0308 	sub.w	r3, r0, r8
 800c2c4:	fa09 f303 	lsl.w	r3, r9, r3
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	9304      	str	r3, [sp, #16]
 800c2cc:	46a2      	mov	sl, r4
 800c2ce:	e7d2      	b.n	800c276 <_vfiprintf_r+0xe2>
 800c2d0:	9b03      	ldr	r3, [sp, #12]
 800c2d2:	1d19      	adds	r1, r3, #4
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	9103      	str	r1, [sp, #12]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	bfbb      	ittet	lt
 800c2dc:	425b      	neglt	r3, r3
 800c2de:	f042 0202 	orrlt.w	r2, r2, #2
 800c2e2:	9307      	strge	r3, [sp, #28]
 800c2e4:	9307      	strlt	r3, [sp, #28]
 800c2e6:	bfb8      	it	lt
 800c2e8:	9204      	strlt	r2, [sp, #16]
 800c2ea:	7823      	ldrb	r3, [r4, #0]
 800c2ec:	2b2e      	cmp	r3, #46	; 0x2e
 800c2ee:	d10c      	bne.n	800c30a <_vfiprintf_r+0x176>
 800c2f0:	7863      	ldrb	r3, [r4, #1]
 800c2f2:	2b2a      	cmp	r3, #42	; 0x2a
 800c2f4:	d135      	bne.n	800c362 <_vfiprintf_r+0x1ce>
 800c2f6:	9b03      	ldr	r3, [sp, #12]
 800c2f8:	1d1a      	adds	r2, r3, #4
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	9203      	str	r2, [sp, #12]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	bfb8      	it	lt
 800c302:	f04f 33ff 	movlt.w	r3, #4294967295
 800c306:	3402      	adds	r4, #2
 800c308:	9305      	str	r3, [sp, #20]
 800c30a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c3f0 <_vfiprintf_r+0x25c>
 800c30e:	7821      	ldrb	r1, [r4, #0]
 800c310:	2203      	movs	r2, #3
 800c312:	4650      	mov	r0, sl
 800c314:	f7f3 ff3c 	bl	8000190 <memchr>
 800c318:	b140      	cbz	r0, 800c32c <_vfiprintf_r+0x198>
 800c31a:	2340      	movs	r3, #64	; 0x40
 800c31c:	eba0 000a 	sub.w	r0, r0, sl
 800c320:	fa03 f000 	lsl.w	r0, r3, r0
 800c324:	9b04      	ldr	r3, [sp, #16]
 800c326:	4303      	orrs	r3, r0
 800c328:	3401      	adds	r4, #1
 800c32a:	9304      	str	r3, [sp, #16]
 800c32c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c330:	482c      	ldr	r0, [pc, #176]	; (800c3e4 <_vfiprintf_r+0x250>)
 800c332:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c336:	2206      	movs	r2, #6
 800c338:	f7f3 ff2a 	bl	8000190 <memchr>
 800c33c:	2800      	cmp	r0, #0
 800c33e:	d03f      	beq.n	800c3c0 <_vfiprintf_r+0x22c>
 800c340:	4b29      	ldr	r3, [pc, #164]	; (800c3e8 <_vfiprintf_r+0x254>)
 800c342:	bb1b      	cbnz	r3, 800c38c <_vfiprintf_r+0x1f8>
 800c344:	9b03      	ldr	r3, [sp, #12]
 800c346:	3307      	adds	r3, #7
 800c348:	f023 0307 	bic.w	r3, r3, #7
 800c34c:	3308      	adds	r3, #8
 800c34e:	9303      	str	r3, [sp, #12]
 800c350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c352:	443b      	add	r3, r7
 800c354:	9309      	str	r3, [sp, #36]	; 0x24
 800c356:	e767      	b.n	800c228 <_vfiprintf_r+0x94>
 800c358:	fb0c 3202 	mla	r2, ip, r2, r3
 800c35c:	460c      	mov	r4, r1
 800c35e:	2001      	movs	r0, #1
 800c360:	e7a5      	b.n	800c2ae <_vfiprintf_r+0x11a>
 800c362:	2300      	movs	r3, #0
 800c364:	3401      	adds	r4, #1
 800c366:	9305      	str	r3, [sp, #20]
 800c368:	4619      	mov	r1, r3
 800c36a:	f04f 0c0a 	mov.w	ip, #10
 800c36e:	4620      	mov	r0, r4
 800c370:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c374:	3a30      	subs	r2, #48	; 0x30
 800c376:	2a09      	cmp	r2, #9
 800c378:	d903      	bls.n	800c382 <_vfiprintf_r+0x1ee>
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d0c5      	beq.n	800c30a <_vfiprintf_r+0x176>
 800c37e:	9105      	str	r1, [sp, #20]
 800c380:	e7c3      	b.n	800c30a <_vfiprintf_r+0x176>
 800c382:	fb0c 2101 	mla	r1, ip, r1, r2
 800c386:	4604      	mov	r4, r0
 800c388:	2301      	movs	r3, #1
 800c38a:	e7f0      	b.n	800c36e <_vfiprintf_r+0x1da>
 800c38c:	ab03      	add	r3, sp, #12
 800c38e:	9300      	str	r3, [sp, #0]
 800c390:	462a      	mov	r2, r5
 800c392:	4b16      	ldr	r3, [pc, #88]	; (800c3ec <_vfiprintf_r+0x258>)
 800c394:	a904      	add	r1, sp, #16
 800c396:	4630      	mov	r0, r6
 800c398:	f3af 8000 	nop.w
 800c39c:	4607      	mov	r7, r0
 800c39e:	1c78      	adds	r0, r7, #1
 800c3a0:	d1d6      	bne.n	800c350 <_vfiprintf_r+0x1bc>
 800c3a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3a4:	07d9      	lsls	r1, r3, #31
 800c3a6:	d405      	bmi.n	800c3b4 <_vfiprintf_r+0x220>
 800c3a8:	89ab      	ldrh	r3, [r5, #12]
 800c3aa:	059a      	lsls	r2, r3, #22
 800c3ac:	d402      	bmi.n	800c3b4 <_vfiprintf_r+0x220>
 800c3ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3b0:	f7ff fd77 	bl	800bea2 <__retarget_lock_release_recursive>
 800c3b4:	89ab      	ldrh	r3, [r5, #12]
 800c3b6:	065b      	lsls	r3, r3, #25
 800c3b8:	f53f af12 	bmi.w	800c1e0 <_vfiprintf_r+0x4c>
 800c3bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3be:	e711      	b.n	800c1e4 <_vfiprintf_r+0x50>
 800c3c0:	ab03      	add	r3, sp, #12
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	462a      	mov	r2, r5
 800c3c6:	4b09      	ldr	r3, [pc, #36]	; (800c3ec <_vfiprintf_r+0x258>)
 800c3c8:	a904      	add	r1, sp, #16
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	f000 f880 	bl	800c4d0 <_printf_i>
 800c3d0:	e7e4      	b.n	800c39c <_vfiprintf_r+0x208>
 800c3d2:	bf00      	nop
 800c3d4:	0800d700 	.word	0x0800d700
 800c3d8:	0800d720 	.word	0x0800d720
 800c3dc:	0800d6e0 	.word	0x0800d6e0
 800c3e0:	0800d740 	.word	0x0800d740
 800c3e4:	0800d74a 	.word	0x0800d74a
 800c3e8:	00000000 	.word	0x00000000
 800c3ec:	0800c16f 	.word	0x0800c16f
 800c3f0:	0800d746 	.word	0x0800d746

0800c3f4 <_printf_common>:
 800c3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3f8:	4616      	mov	r6, r2
 800c3fa:	4699      	mov	r9, r3
 800c3fc:	688a      	ldr	r2, [r1, #8]
 800c3fe:	690b      	ldr	r3, [r1, #16]
 800c400:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c404:	4293      	cmp	r3, r2
 800c406:	bfb8      	it	lt
 800c408:	4613      	movlt	r3, r2
 800c40a:	6033      	str	r3, [r6, #0]
 800c40c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c410:	4607      	mov	r7, r0
 800c412:	460c      	mov	r4, r1
 800c414:	b10a      	cbz	r2, 800c41a <_printf_common+0x26>
 800c416:	3301      	adds	r3, #1
 800c418:	6033      	str	r3, [r6, #0]
 800c41a:	6823      	ldr	r3, [r4, #0]
 800c41c:	0699      	lsls	r1, r3, #26
 800c41e:	bf42      	ittt	mi
 800c420:	6833      	ldrmi	r3, [r6, #0]
 800c422:	3302      	addmi	r3, #2
 800c424:	6033      	strmi	r3, [r6, #0]
 800c426:	6825      	ldr	r5, [r4, #0]
 800c428:	f015 0506 	ands.w	r5, r5, #6
 800c42c:	d106      	bne.n	800c43c <_printf_common+0x48>
 800c42e:	f104 0a19 	add.w	sl, r4, #25
 800c432:	68e3      	ldr	r3, [r4, #12]
 800c434:	6832      	ldr	r2, [r6, #0]
 800c436:	1a9b      	subs	r3, r3, r2
 800c438:	42ab      	cmp	r3, r5
 800c43a:	dc26      	bgt.n	800c48a <_printf_common+0x96>
 800c43c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c440:	1e13      	subs	r3, r2, #0
 800c442:	6822      	ldr	r2, [r4, #0]
 800c444:	bf18      	it	ne
 800c446:	2301      	movne	r3, #1
 800c448:	0692      	lsls	r2, r2, #26
 800c44a:	d42b      	bmi.n	800c4a4 <_printf_common+0xb0>
 800c44c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c450:	4649      	mov	r1, r9
 800c452:	4638      	mov	r0, r7
 800c454:	47c0      	blx	r8
 800c456:	3001      	adds	r0, #1
 800c458:	d01e      	beq.n	800c498 <_printf_common+0xa4>
 800c45a:	6823      	ldr	r3, [r4, #0]
 800c45c:	68e5      	ldr	r5, [r4, #12]
 800c45e:	6832      	ldr	r2, [r6, #0]
 800c460:	f003 0306 	and.w	r3, r3, #6
 800c464:	2b04      	cmp	r3, #4
 800c466:	bf08      	it	eq
 800c468:	1aad      	subeq	r5, r5, r2
 800c46a:	68a3      	ldr	r3, [r4, #8]
 800c46c:	6922      	ldr	r2, [r4, #16]
 800c46e:	bf0c      	ite	eq
 800c470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c474:	2500      	movne	r5, #0
 800c476:	4293      	cmp	r3, r2
 800c478:	bfc4      	itt	gt
 800c47a:	1a9b      	subgt	r3, r3, r2
 800c47c:	18ed      	addgt	r5, r5, r3
 800c47e:	2600      	movs	r6, #0
 800c480:	341a      	adds	r4, #26
 800c482:	42b5      	cmp	r5, r6
 800c484:	d11a      	bne.n	800c4bc <_printf_common+0xc8>
 800c486:	2000      	movs	r0, #0
 800c488:	e008      	b.n	800c49c <_printf_common+0xa8>
 800c48a:	2301      	movs	r3, #1
 800c48c:	4652      	mov	r2, sl
 800c48e:	4649      	mov	r1, r9
 800c490:	4638      	mov	r0, r7
 800c492:	47c0      	blx	r8
 800c494:	3001      	adds	r0, #1
 800c496:	d103      	bne.n	800c4a0 <_printf_common+0xac>
 800c498:	f04f 30ff 	mov.w	r0, #4294967295
 800c49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4a0:	3501      	adds	r5, #1
 800c4a2:	e7c6      	b.n	800c432 <_printf_common+0x3e>
 800c4a4:	18e1      	adds	r1, r4, r3
 800c4a6:	1c5a      	adds	r2, r3, #1
 800c4a8:	2030      	movs	r0, #48	; 0x30
 800c4aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c4ae:	4422      	add	r2, r4
 800c4b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c4b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c4b8:	3302      	adds	r3, #2
 800c4ba:	e7c7      	b.n	800c44c <_printf_common+0x58>
 800c4bc:	2301      	movs	r3, #1
 800c4be:	4622      	mov	r2, r4
 800c4c0:	4649      	mov	r1, r9
 800c4c2:	4638      	mov	r0, r7
 800c4c4:	47c0      	blx	r8
 800c4c6:	3001      	adds	r0, #1
 800c4c8:	d0e6      	beq.n	800c498 <_printf_common+0xa4>
 800c4ca:	3601      	adds	r6, #1
 800c4cc:	e7d9      	b.n	800c482 <_printf_common+0x8e>
	...

0800c4d0 <_printf_i>:
 800c4d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d4:	7e0f      	ldrb	r7, [r1, #24]
 800c4d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c4d8:	2f78      	cmp	r7, #120	; 0x78
 800c4da:	4691      	mov	r9, r2
 800c4dc:	4680      	mov	r8, r0
 800c4de:	460c      	mov	r4, r1
 800c4e0:	469a      	mov	sl, r3
 800c4e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c4e6:	d807      	bhi.n	800c4f8 <_printf_i+0x28>
 800c4e8:	2f62      	cmp	r7, #98	; 0x62
 800c4ea:	d80a      	bhi.n	800c502 <_printf_i+0x32>
 800c4ec:	2f00      	cmp	r7, #0
 800c4ee:	f000 80d8 	beq.w	800c6a2 <_printf_i+0x1d2>
 800c4f2:	2f58      	cmp	r7, #88	; 0x58
 800c4f4:	f000 80a3 	beq.w	800c63e <_printf_i+0x16e>
 800c4f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c500:	e03a      	b.n	800c578 <_printf_i+0xa8>
 800c502:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c506:	2b15      	cmp	r3, #21
 800c508:	d8f6      	bhi.n	800c4f8 <_printf_i+0x28>
 800c50a:	a101      	add	r1, pc, #4	; (adr r1, 800c510 <_printf_i+0x40>)
 800c50c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c510:	0800c569 	.word	0x0800c569
 800c514:	0800c57d 	.word	0x0800c57d
 800c518:	0800c4f9 	.word	0x0800c4f9
 800c51c:	0800c4f9 	.word	0x0800c4f9
 800c520:	0800c4f9 	.word	0x0800c4f9
 800c524:	0800c4f9 	.word	0x0800c4f9
 800c528:	0800c57d 	.word	0x0800c57d
 800c52c:	0800c4f9 	.word	0x0800c4f9
 800c530:	0800c4f9 	.word	0x0800c4f9
 800c534:	0800c4f9 	.word	0x0800c4f9
 800c538:	0800c4f9 	.word	0x0800c4f9
 800c53c:	0800c689 	.word	0x0800c689
 800c540:	0800c5ad 	.word	0x0800c5ad
 800c544:	0800c66b 	.word	0x0800c66b
 800c548:	0800c4f9 	.word	0x0800c4f9
 800c54c:	0800c4f9 	.word	0x0800c4f9
 800c550:	0800c6ab 	.word	0x0800c6ab
 800c554:	0800c4f9 	.word	0x0800c4f9
 800c558:	0800c5ad 	.word	0x0800c5ad
 800c55c:	0800c4f9 	.word	0x0800c4f9
 800c560:	0800c4f9 	.word	0x0800c4f9
 800c564:	0800c673 	.word	0x0800c673
 800c568:	682b      	ldr	r3, [r5, #0]
 800c56a:	1d1a      	adds	r2, r3, #4
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	602a      	str	r2, [r5, #0]
 800c570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c578:	2301      	movs	r3, #1
 800c57a:	e0a3      	b.n	800c6c4 <_printf_i+0x1f4>
 800c57c:	6820      	ldr	r0, [r4, #0]
 800c57e:	6829      	ldr	r1, [r5, #0]
 800c580:	0606      	lsls	r6, r0, #24
 800c582:	f101 0304 	add.w	r3, r1, #4
 800c586:	d50a      	bpl.n	800c59e <_printf_i+0xce>
 800c588:	680e      	ldr	r6, [r1, #0]
 800c58a:	602b      	str	r3, [r5, #0]
 800c58c:	2e00      	cmp	r6, #0
 800c58e:	da03      	bge.n	800c598 <_printf_i+0xc8>
 800c590:	232d      	movs	r3, #45	; 0x2d
 800c592:	4276      	negs	r6, r6
 800c594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c598:	485e      	ldr	r0, [pc, #376]	; (800c714 <_printf_i+0x244>)
 800c59a:	230a      	movs	r3, #10
 800c59c:	e019      	b.n	800c5d2 <_printf_i+0x102>
 800c59e:	680e      	ldr	r6, [r1, #0]
 800c5a0:	602b      	str	r3, [r5, #0]
 800c5a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c5a6:	bf18      	it	ne
 800c5a8:	b236      	sxthne	r6, r6
 800c5aa:	e7ef      	b.n	800c58c <_printf_i+0xbc>
 800c5ac:	682b      	ldr	r3, [r5, #0]
 800c5ae:	6820      	ldr	r0, [r4, #0]
 800c5b0:	1d19      	adds	r1, r3, #4
 800c5b2:	6029      	str	r1, [r5, #0]
 800c5b4:	0601      	lsls	r1, r0, #24
 800c5b6:	d501      	bpl.n	800c5bc <_printf_i+0xec>
 800c5b8:	681e      	ldr	r6, [r3, #0]
 800c5ba:	e002      	b.n	800c5c2 <_printf_i+0xf2>
 800c5bc:	0646      	lsls	r6, r0, #25
 800c5be:	d5fb      	bpl.n	800c5b8 <_printf_i+0xe8>
 800c5c0:	881e      	ldrh	r6, [r3, #0]
 800c5c2:	4854      	ldr	r0, [pc, #336]	; (800c714 <_printf_i+0x244>)
 800c5c4:	2f6f      	cmp	r7, #111	; 0x6f
 800c5c6:	bf0c      	ite	eq
 800c5c8:	2308      	moveq	r3, #8
 800c5ca:	230a      	movne	r3, #10
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c5d2:	6865      	ldr	r5, [r4, #4]
 800c5d4:	60a5      	str	r5, [r4, #8]
 800c5d6:	2d00      	cmp	r5, #0
 800c5d8:	bfa2      	ittt	ge
 800c5da:	6821      	ldrge	r1, [r4, #0]
 800c5dc:	f021 0104 	bicge.w	r1, r1, #4
 800c5e0:	6021      	strge	r1, [r4, #0]
 800c5e2:	b90e      	cbnz	r6, 800c5e8 <_printf_i+0x118>
 800c5e4:	2d00      	cmp	r5, #0
 800c5e6:	d04d      	beq.n	800c684 <_printf_i+0x1b4>
 800c5e8:	4615      	mov	r5, r2
 800c5ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800c5ee:	fb03 6711 	mls	r7, r3, r1, r6
 800c5f2:	5dc7      	ldrb	r7, [r0, r7]
 800c5f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c5f8:	4637      	mov	r7, r6
 800c5fa:	42bb      	cmp	r3, r7
 800c5fc:	460e      	mov	r6, r1
 800c5fe:	d9f4      	bls.n	800c5ea <_printf_i+0x11a>
 800c600:	2b08      	cmp	r3, #8
 800c602:	d10b      	bne.n	800c61c <_printf_i+0x14c>
 800c604:	6823      	ldr	r3, [r4, #0]
 800c606:	07de      	lsls	r6, r3, #31
 800c608:	d508      	bpl.n	800c61c <_printf_i+0x14c>
 800c60a:	6923      	ldr	r3, [r4, #16]
 800c60c:	6861      	ldr	r1, [r4, #4]
 800c60e:	4299      	cmp	r1, r3
 800c610:	bfde      	ittt	le
 800c612:	2330      	movle	r3, #48	; 0x30
 800c614:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c618:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c61c:	1b52      	subs	r2, r2, r5
 800c61e:	6122      	str	r2, [r4, #16]
 800c620:	f8cd a000 	str.w	sl, [sp]
 800c624:	464b      	mov	r3, r9
 800c626:	aa03      	add	r2, sp, #12
 800c628:	4621      	mov	r1, r4
 800c62a:	4640      	mov	r0, r8
 800c62c:	f7ff fee2 	bl	800c3f4 <_printf_common>
 800c630:	3001      	adds	r0, #1
 800c632:	d14c      	bne.n	800c6ce <_printf_i+0x1fe>
 800c634:	f04f 30ff 	mov.w	r0, #4294967295
 800c638:	b004      	add	sp, #16
 800c63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c63e:	4835      	ldr	r0, [pc, #212]	; (800c714 <_printf_i+0x244>)
 800c640:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c644:	6829      	ldr	r1, [r5, #0]
 800c646:	6823      	ldr	r3, [r4, #0]
 800c648:	f851 6b04 	ldr.w	r6, [r1], #4
 800c64c:	6029      	str	r1, [r5, #0]
 800c64e:	061d      	lsls	r5, r3, #24
 800c650:	d514      	bpl.n	800c67c <_printf_i+0x1ac>
 800c652:	07df      	lsls	r7, r3, #31
 800c654:	bf44      	itt	mi
 800c656:	f043 0320 	orrmi.w	r3, r3, #32
 800c65a:	6023      	strmi	r3, [r4, #0]
 800c65c:	b91e      	cbnz	r6, 800c666 <_printf_i+0x196>
 800c65e:	6823      	ldr	r3, [r4, #0]
 800c660:	f023 0320 	bic.w	r3, r3, #32
 800c664:	6023      	str	r3, [r4, #0]
 800c666:	2310      	movs	r3, #16
 800c668:	e7b0      	b.n	800c5cc <_printf_i+0xfc>
 800c66a:	6823      	ldr	r3, [r4, #0]
 800c66c:	f043 0320 	orr.w	r3, r3, #32
 800c670:	6023      	str	r3, [r4, #0]
 800c672:	2378      	movs	r3, #120	; 0x78
 800c674:	4828      	ldr	r0, [pc, #160]	; (800c718 <_printf_i+0x248>)
 800c676:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c67a:	e7e3      	b.n	800c644 <_printf_i+0x174>
 800c67c:	0659      	lsls	r1, r3, #25
 800c67e:	bf48      	it	mi
 800c680:	b2b6      	uxthmi	r6, r6
 800c682:	e7e6      	b.n	800c652 <_printf_i+0x182>
 800c684:	4615      	mov	r5, r2
 800c686:	e7bb      	b.n	800c600 <_printf_i+0x130>
 800c688:	682b      	ldr	r3, [r5, #0]
 800c68a:	6826      	ldr	r6, [r4, #0]
 800c68c:	6961      	ldr	r1, [r4, #20]
 800c68e:	1d18      	adds	r0, r3, #4
 800c690:	6028      	str	r0, [r5, #0]
 800c692:	0635      	lsls	r5, r6, #24
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	d501      	bpl.n	800c69c <_printf_i+0x1cc>
 800c698:	6019      	str	r1, [r3, #0]
 800c69a:	e002      	b.n	800c6a2 <_printf_i+0x1d2>
 800c69c:	0670      	lsls	r0, r6, #25
 800c69e:	d5fb      	bpl.n	800c698 <_printf_i+0x1c8>
 800c6a0:	8019      	strh	r1, [r3, #0]
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	6123      	str	r3, [r4, #16]
 800c6a6:	4615      	mov	r5, r2
 800c6a8:	e7ba      	b.n	800c620 <_printf_i+0x150>
 800c6aa:	682b      	ldr	r3, [r5, #0]
 800c6ac:	1d1a      	adds	r2, r3, #4
 800c6ae:	602a      	str	r2, [r5, #0]
 800c6b0:	681d      	ldr	r5, [r3, #0]
 800c6b2:	6862      	ldr	r2, [r4, #4]
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	f7f3 fd6a 	bl	8000190 <memchr>
 800c6bc:	b108      	cbz	r0, 800c6c2 <_printf_i+0x1f2>
 800c6be:	1b40      	subs	r0, r0, r5
 800c6c0:	6060      	str	r0, [r4, #4]
 800c6c2:	6863      	ldr	r3, [r4, #4]
 800c6c4:	6123      	str	r3, [r4, #16]
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6cc:	e7a8      	b.n	800c620 <_printf_i+0x150>
 800c6ce:	6923      	ldr	r3, [r4, #16]
 800c6d0:	462a      	mov	r2, r5
 800c6d2:	4649      	mov	r1, r9
 800c6d4:	4640      	mov	r0, r8
 800c6d6:	47d0      	blx	sl
 800c6d8:	3001      	adds	r0, #1
 800c6da:	d0ab      	beq.n	800c634 <_printf_i+0x164>
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	079b      	lsls	r3, r3, #30
 800c6e0:	d413      	bmi.n	800c70a <_printf_i+0x23a>
 800c6e2:	68e0      	ldr	r0, [r4, #12]
 800c6e4:	9b03      	ldr	r3, [sp, #12]
 800c6e6:	4298      	cmp	r0, r3
 800c6e8:	bfb8      	it	lt
 800c6ea:	4618      	movlt	r0, r3
 800c6ec:	e7a4      	b.n	800c638 <_printf_i+0x168>
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	4632      	mov	r2, r6
 800c6f2:	4649      	mov	r1, r9
 800c6f4:	4640      	mov	r0, r8
 800c6f6:	47d0      	blx	sl
 800c6f8:	3001      	adds	r0, #1
 800c6fa:	d09b      	beq.n	800c634 <_printf_i+0x164>
 800c6fc:	3501      	adds	r5, #1
 800c6fe:	68e3      	ldr	r3, [r4, #12]
 800c700:	9903      	ldr	r1, [sp, #12]
 800c702:	1a5b      	subs	r3, r3, r1
 800c704:	42ab      	cmp	r3, r5
 800c706:	dcf2      	bgt.n	800c6ee <_printf_i+0x21e>
 800c708:	e7eb      	b.n	800c6e2 <_printf_i+0x212>
 800c70a:	2500      	movs	r5, #0
 800c70c:	f104 0619 	add.w	r6, r4, #25
 800c710:	e7f5      	b.n	800c6fe <_printf_i+0x22e>
 800c712:	bf00      	nop
 800c714:	0800d751 	.word	0x0800d751
 800c718:	0800d762 	.word	0x0800d762

0800c71c <_sbrk_r>:
 800c71c:	b538      	push	{r3, r4, r5, lr}
 800c71e:	4d06      	ldr	r5, [pc, #24]	; (800c738 <_sbrk_r+0x1c>)
 800c720:	2300      	movs	r3, #0
 800c722:	4604      	mov	r4, r0
 800c724:	4608      	mov	r0, r1
 800c726:	602b      	str	r3, [r5, #0]
 800c728:	f7f6 f84a 	bl	80027c0 <_sbrk>
 800c72c:	1c43      	adds	r3, r0, #1
 800c72e:	d102      	bne.n	800c736 <_sbrk_r+0x1a>
 800c730:	682b      	ldr	r3, [r5, #0]
 800c732:	b103      	cbz	r3, 800c736 <_sbrk_r+0x1a>
 800c734:	6023      	str	r3, [r4, #0]
 800c736:	bd38      	pop	{r3, r4, r5, pc}
 800c738:	20001600 	.word	0x20001600

0800c73c <__sread>:
 800c73c:	b510      	push	{r4, lr}
 800c73e:	460c      	mov	r4, r1
 800c740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c744:	f000 f8a8 	bl	800c898 <_read_r>
 800c748:	2800      	cmp	r0, #0
 800c74a:	bfab      	itete	ge
 800c74c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c74e:	89a3      	ldrhlt	r3, [r4, #12]
 800c750:	181b      	addge	r3, r3, r0
 800c752:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c756:	bfac      	ite	ge
 800c758:	6563      	strge	r3, [r4, #84]	; 0x54
 800c75a:	81a3      	strhlt	r3, [r4, #12]
 800c75c:	bd10      	pop	{r4, pc}

0800c75e <__swrite>:
 800c75e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c762:	461f      	mov	r7, r3
 800c764:	898b      	ldrh	r3, [r1, #12]
 800c766:	05db      	lsls	r3, r3, #23
 800c768:	4605      	mov	r5, r0
 800c76a:	460c      	mov	r4, r1
 800c76c:	4616      	mov	r6, r2
 800c76e:	d505      	bpl.n	800c77c <__swrite+0x1e>
 800c770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c774:	2302      	movs	r3, #2
 800c776:	2200      	movs	r2, #0
 800c778:	f000 f870 	bl	800c85c <_lseek_r>
 800c77c:	89a3      	ldrh	r3, [r4, #12]
 800c77e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c786:	81a3      	strh	r3, [r4, #12]
 800c788:	4632      	mov	r2, r6
 800c78a:	463b      	mov	r3, r7
 800c78c:	4628      	mov	r0, r5
 800c78e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c792:	f000 b817 	b.w	800c7c4 <_write_r>

0800c796 <__sseek>:
 800c796:	b510      	push	{r4, lr}
 800c798:	460c      	mov	r4, r1
 800c79a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c79e:	f000 f85d 	bl	800c85c <_lseek_r>
 800c7a2:	1c43      	adds	r3, r0, #1
 800c7a4:	89a3      	ldrh	r3, [r4, #12]
 800c7a6:	bf15      	itete	ne
 800c7a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c7aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7b2:	81a3      	strheq	r3, [r4, #12]
 800c7b4:	bf18      	it	ne
 800c7b6:	81a3      	strhne	r3, [r4, #12]
 800c7b8:	bd10      	pop	{r4, pc}

0800c7ba <__sclose>:
 800c7ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7be:	f000 b81b 	b.w	800c7f8 <_close_r>
	...

0800c7c4 <_write_r>:
 800c7c4:	b538      	push	{r3, r4, r5, lr}
 800c7c6:	4d07      	ldr	r5, [pc, #28]	; (800c7e4 <_write_r+0x20>)
 800c7c8:	4604      	mov	r4, r0
 800c7ca:	4608      	mov	r0, r1
 800c7cc:	4611      	mov	r1, r2
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	602a      	str	r2, [r5, #0]
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	f7fc ff84 	bl	80096e0 <_write>
 800c7d8:	1c43      	adds	r3, r0, #1
 800c7da:	d102      	bne.n	800c7e2 <_write_r+0x1e>
 800c7dc:	682b      	ldr	r3, [r5, #0]
 800c7de:	b103      	cbz	r3, 800c7e2 <_write_r+0x1e>
 800c7e0:	6023      	str	r3, [r4, #0]
 800c7e2:	bd38      	pop	{r3, r4, r5, pc}
 800c7e4:	20001600 	.word	0x20001600

0800c7e8 <abort>:
 800c7e8:	b508      	push	{r3, lr}
 800c7ea:	2006      	movs	r0, #6
 800c7ec:	f000 f88e 	bl	800c90c <raise>
 800c7f0:	2001      	movs	r0, #1
 800c7f2:	f7f5 ff8a 	bl	800270a <_exit>
	...

0800c7f8 <_close_r>:
 800c7f8:	b538      	push	{r3, r4, r5, lr}
 800c7fa:	4d06      	ldr	r5, [pc, #24]	; (800c814 <_close_r+0x1c>)
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	4604      	mov	r4, r0
 800c800:	4608      	mov	r0, r1
 800c802:	602b      	str	r3, [r5, #0]
 800c804:	f7f5 ffa8 	bl	8002758 <_close>
 800c808:	1c43      	adds	r3, r0, #1
 800c80a:	d102      	bne.n	800c812 <_close_r+0x1a>
 800c80c:	682b      	ldr	r3, [r5, #0]
 800c80e:	b103      	cbz	r3, 800c812 <_close_r+0x1a>
 800c810:	6023      	str	r3, [r4, #0]
 800c812:	bd38      	pop	{r3, r4, r5, pc}
 800c814:	20001600 	.word	0x20001600

0800c818 <_fstat_r>:
 800c818:	b538      	push	{r3, r4, r5, lr}
 800c81a:	4d07      	ldr	r5, [pc, #28]	; (800c838 <_fstat_r+0x20>)
 800c81c:	2300      	movs	r3, #0
 800c81e:	4604      	mov	r4, r0
 800c820:	4608      	mov	r0, r1
 800c822:	4611      	mov	r1, r2
 800c824:	602b      	str	r3, [r5, #0]
 800c826:	f7f5 ffa3 	bl	8002770 <_fstat>
 800c82a:	1c43      	adds	r3, r0, #1
 800c82c:	d102      	bne.n	800c834 <_fstat_r+0x1c>
 800c82e:	682b      	ldr	r3, [r5, #0]
 800c830:	b103      	cbz	r3, 800c834 <_fstat_r+0x1c>
 800c832:	6023      	str	r3, [r4, #0]
 800c834:	bd38      	pop	{r3, r4, r5, pc}
 800c836:	bf00      	nop
 800c838:	20001600 	.word	0x20001600

0800c83c <_isatty_r>:
 800c83c:	b538      	push	{r3, r4, r5, lr}
 800c83e:	4d06      	ldr	r5, [pc, #24]	; (800c858 <_isatty_r+0x1c>)
 800c840:	2300      	movs	r3, #0
 800c842:	4604      	mov	r4, r0
 800c844:	4608      	mov	r0, r1
 800c846:	602b      	str	r3, [r5, #0]
 800c848:	f7f5 ffa2 	bl	8002790 <_isatty>
 800c84c:	1c43      	adds	r3, r0, #1
 800c84e:	d102      	bne.n	800c856 <_isatty_r+0x1a>
 800c850:	682b      	ldr	r3, [r5, #0]
 800c852:	b103      	cbz	r3, 800c856 <_isatty_r+0x1a>
 800c854:	6023      	str	r3, [r4, #0]
 800c856:	bd38      	pop	{r3, r4, r5, pc}
 800c858:	20001600 	.word	0x20001600

0800c85c <_lseek_r>:
 800c85c:	b538      	push	{r3, r4, r5, lr}
 800c85e:	4d07      	ldr	r5, [pc, #28]	; (800c87c <_lseek_r+0x20>)
 800c860:	4604      	mov	r4, r0
 800c862:	4608      	mov	r0, r1
 800c864:	4611      	mov	r1, r2
 800c866:	2200      	movs	r2, #0
 800c868:	602a      	str	r2, [r5, #0]
 800c86a:	461a      	mov	r2, r3
 800c86c:	f7f5 ff9b 	bl	80027a6 <_lseek>
 800c870:	1c43      	adds	r3, r0, #1
 800c872:	d102      	bne.n	800c87a <_lseek_r+0x1e>
 800c874:	682b      	ldr	r3, [r5, #0]
 800c876:	b103      	cbz	r3, 800c87a <_lseek_r+0x1e>
 800c878:	6023      	str	r3, [r4, #0]
 800c87a:	bd38      	pop	{r3, r4, r5, pc}
 800c87c:	20001600 	.word	0x20001600

0800c880 <__malloc_lock>:
 800c880:	4801      	ldr	r0, [pc, #4]	; (800c888 <__malloc_lock+0x8>)
 800c882:	f7ff bb0d 	b.w	800bea0 <__retarget_lock_acquire_recursive>
 800c886:	bf00      	nop
 800c888:	200015f4 	.word	0x200015f4

0800c88c <__malloc_unlock>:
 800c88c:	4801      	ldr	r0, [pc, #4]	; (800c894 <__malloc_unlock+0x8>)
 800c88e:	f7ff bb08 	b.w	800bea2 <__retarget_lock_release_recursive>
 800c892:	bf00      	nop
 800c894:	200015f4 	.word	0x200015f4

0800c898 <_read_r>:
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	4d07      	ldr	r5, [pc, #28]	; (800c8b8 <_read_r+0x20>)
 800c89c:	4604      	mov	r4, r0
 800c89e:	4608      	mov	r0, r1
 800c8a0:	4611      	mov	r1, r2
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	602a      	str	r2, [r5, #0]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	f7f5 ff39 	bl	800271e <_read>
 800c8ac:	1c43      	adds	r3, r0, #1
 800c8ae:	d102      	bne.n	800c8b6 <_read_r+0x1e>
 800c8b0:	682b      	ldr	r3, [r5, #0]
 800c8b2:	b103      	cbz	r3, 800c8b6 <_read_r+0x1e>
 800c8b4:	6023      	str	r3, [r4, #0]
 800c8b6:	bd38      	pop	{r3, r4, r5, pc}
 800c8b8:	20001600 	.word	0x20001600

0800c8bc <_raise_r>:
 800c8bc:	291f      	cmp	r1, #31
 800c8be:	b538      	push	{r3, r4, r5, lr}
 800c8c0:	4604      	mov	r4, r0
 800c8c2:	460d      	mov	r5, r1
 800c8c4:	d904      	bls.n	800c8d0 <_raise_r+0x14>
 800c8c6:	2316      	movs	r3, #22
 800c8c8:	6003      	str	r3, [r0, #0]
 800c8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ce:	bd38      	pop	{r3, r4, r5, pc}
 800c8d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c8d2:	b112      	cbz	r2, 800c8da <_raise_r+0x1e>
 800c8d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8d8:	b94b      	cbnz	r3, 800c8ee <_raise_r+0x32>
 800c8da:	4620      	mov	r0, r4
 800c8dc:	f000 f830 	bl	800c940 <_getpid_r>
 800c8e0:	462a      	mov	r2, r5
 800c8e2:	4601      	mov	r1, r0
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8ea:	f000 b817 	b.w	800c91c <_kill_r>
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d00a      	beq.n	800c908 <_raise_r+0x4c>
 800c8f2:	1c59      	adds	r1, r3, #1
 800c8f4:	d103      	bne.n	800c8fe <_raise_r+0x42>
 800c8f6:	2316      	movs	r3, #22
 800c8f8:	6003      	str	r3, [r0, #0]
 800c8fa:	2001      	movs	r0, #1
 800c8fc:	e7e7      	b.n	800c8ce <_raise_r+0x12>
 800c8fe:	2400      	movs	r4, #0
 800c900:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c904:	4628      	mov	r0, r5
 800c906:	4798      	blx	r3
 800c908:	2000      	movs	r0, #0
 800c90a:	e7e0      	b.n	800c8ce <_raise_r+0x12>

0800c90c <raise>:
 800c90c:	4b02      	ldr	r3, [pc, #8]	; (800c918 <raise+0xc>)
 800c90e:	4601      	mov	r1, r0
 800c910:	6818      	ldr	r0, [r3, #0]
 800c912:	f7ff bfd3 	b.w	800c8bc <_raise_r>
 800c916:	bf00      	nop
 800c918:	20000054 	.word	0x20000054

0800c91c <_kill_r>:
 800c91c:	b538      	push	{r3, r4, r5, lr}
 800c91e:	4d07      	ldr	r5, [pc, #28]	; (800c93c <_kill_r+0x20>)
 800c920:	2300      	movs	r3, #0
 800c922:	4604      	mov	r4, r0
 800c924:	4608      	mov	r0, r1
 800c926:	4611      	mov	r1, r2
 800c928:	602b      	str	r3, [r5, #0]
 800c92a:	f7f5 fede 	bl	80026ea <_kill>
 800c92e:	1c43      	adds	r3, r0, #1
 800c930:	d102      	bne.n	800c938 <_kill_r+0x1c>
 800c932:	682b      	ldr	r3, [r5, #0]
 800c934:	b103      	cbz	r3, 800c938 <_kill_r+0x1c>
 800c936:	6023      	str	r3, [r4, #0]
 800c938:	bd38      	pop	{r3, r4, r5, pc}
 800c93a:	bf00      	nop
 800c93c:	20001600 	.word	0x20001600

0800c940 <_getpid_r>:
 800c940:	f7f5 becb 	b.w	80026da <_getpid>

0800c944 <_init>:
 800c944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c946:	bf00      	nop
 800c948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c94a:	bc08      	pop	{r3}
 800c94c:	469e      	mov	lr, r3
 800c94e:	4770      	bx	lr

0800c950 <_fini>:
 800c950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c952:	bf00      	nop
 800c954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c956:	bc08      	pop	{r3}
 800c958:	469e      	mov	lr, r3
 800c95a:	4770      	bx	lr
